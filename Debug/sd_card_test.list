
sd_card_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a798  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000964  0800a968  0800a968  0000b968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2cc  0800b2cc  0000d0e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2cc  0800b2cc  0000c2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2d4  0800b2d4  0000d0e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2d4  0800b2d4  0000c2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2d8  0800b2d8  0000c2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  0800b2dc  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa4  200000e8  0800b3c4  0000d0e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b8c  0800b3c4  0000db8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d0e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ea3  00000000  00000000  0000d118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fa0  00000000  00000000  0001ffbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00022f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cec  00000000  00000000  00024030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226f7  00000000  00000000  00024d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017833  00000000  00000000  00047413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c261f  00000000  00000000  0005ec46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121265  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056cc  00000000  00000000  001212a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00126974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a950 	.word	0x0800a950

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	0800a950 	.word	0x0800a950

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295
 80002fe:	f000 b9b5 	b.w	800066c <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <UART_Print>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
SPI_HandleTypeDef hspi2;
char TxBuffer[250];
static void UART_Print(char* str)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 100);
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff fdd3 	bl	8000224 <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	2364      	movs	r3, #100	@ 0x64
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	4803      	ldr	r0, [pc, #12]	@ (8000694 <UART_Print+0x24>)
 8000688:	f002 fe3e 	bl	8003308 <HAL_UART_Transmit>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200001a4 	.word	0x200001a4

08000698 <mounSDtFile>:

static FRESULT mounSDtFile(FATFS *FatFs)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    FRESULT FR_Status;
    FR_Status = f_mount(FatFs, "", 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	4910      	ldr	r1, [pc, #64]	@ (80006e4 <mounSDtFile+0x4c>)
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f006 fbf1 	bl	8006e8c <f_mount>
 80006aa:	4603      	mov	r3, r0
 80006ac:	73fb      	strb	r3, [r7, #15]
    if (FR_Status != FR_OK)
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00a      	beq.n	80006ca <mounSDtFile+0x32>
    {
        sprintf(TxBuffer, "Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	461a      	mov	r2, r3
 80006b8:	490b      	ldr	r1, [pc, #44]	@ (80006e8 <mounSDtFile+0x50>)
 80006ba:	480c      	ldr	r0, [pc, #48]	@ (80006ec <mounSDtFile+0x54>)
 80006bc:	f007 fea4 	bl	8008408 <siprintf>
        UART_Print(TxBuffer);
 80006c0:	480a      	ldr	r0, [pc, #40]	@ (80006ec <mounSDtFile+0x54>)
 80006c2:	f7ff ffd5 	bl	8000670 <UART_Print>
        return FR_Status;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	e007      	b.n	80006da <mounSDtFile+0x42>
    }
    sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n\n");
 80006ca:	4909      	ldr	r1, [pc, #36]	@ (80006f0 <mounSDtFile+0x58>)
 80006cc:	4807      	ldr	r0, [pc, #28]	@ (80006ec <mounSDtFile+0x54>)
 80006ce:	f007 fe9b 	bl	8008408 <siprintf>
    UART_Print(TxBuffer);
 80006d2:	4806      	ldr	r0, [pc, #24]	@ (80006ec <mounSDtFile+0x54>)
 80006d4:	f7ff ffcc 	bl	8000670 <UART_Print>
    return FR_OK;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	0800a968 	.word	0x0800a968
 80006e8:	0800a96c 	.word	0x0800a96c
 80006ec:	200006d0 	.word	0x200006d0
 80006f0:	0800a9a0 	.word	0x0800a9a0

080006f4 <unmountSDFile>:

static FRESULT unmountSDFile()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	FRESULT FR_Status;
	FR_Status = f_mount(NULL, "", 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	490f      	ldr	r1, [pc, #60]	@ (800073c <unmountSDFile+0x48>)
 80006fe:	2000      	movs	r0, #0
 8000700:	f006 fbc4 	bl	8006e8c <f_mount>
 8000704:	4603      	mov	r3, r0
 8000706:	71fb      	strb	r3, [r7, #7]
	if (FR_Status != FR_OK)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d009      	beq.n	8000722 <unmountSDFile+0x2e>
	  {
	      sprintf(TxBuffer, "Error! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	461a      	mov	r2, r3
 8000712:	490b      	ldr	r1, [pc, #44]	@ (8000740 <unmountSDFile+0x4c>)
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <unmountSDFile+0x50>)
 8000716:	f007 fe77 	bl	8008408 <siprintf>
	      UART_Print(TxBuffer);
 800071a:	480a      	ldr	r0, [pc, #40]	@ (8000744 <unmountSDFile+0x50>)
 800071c:	f7ff ffa8 	bl	8000670 <UART_Print>
 8000720:	e006      	b.n	8000730 <unmountSDFile+0x3c>
	  } else{
	      sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
 8000722:	4909      	ldr	r1, [pc, #36]	@ (8000748 <unmountSDFile+0x54>)
 8000724:	4807      	ldr	r0, [pc, #28]	@ (8000744 <unmountSDFile+0x50>)
 8000726:	f007 fe6f 	bl	8008408 <siprintf>
	      UART_Print(TxBuffer);
 800072a:	4806      	ldr	r0, [pc, #24]	@ (8000744 <unmountSDFile+0x50>)
 800072c:	f7ff ffa0 	bl	8000670 <UART_Print>
	  }
	return FR_Status;
 8000730:	79fb      	ldrb	r3, [r7, #7]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	0800a968 	.word	0x0800a968
 8000740:	0800a9c4 	.word	0x0800a9c4
 8000744:	200006d0 	.word	0x200006d0
 8000748:	0800a9fc 	.word	0x0800a9fc

0800074c <writeSDFILE>:

static FRESULT writeSDFILE(const char *filename)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	f5ad 5d88 	sub.w	sp, sp, #4352	@ 0x1100
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800075a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800075e:	6018      	str	r0, [r3, #0]
    FRESULT FR_Status;
    FIL Fil;
    char RW_Buffer[200];

    FR_Status = f_open(&Fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8000760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000764:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 8000768:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800076c:	3b14      	subs	r3, #20
 800076e:	2212      	movs	r2, #18
 8000770:	6809      	ldr	r1, [r1, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f006 fbd0 	bl	8006f18 <f_open>
 8000778:	4603      	mov	r3, r0
 800077a:	f507 5288 	add.w	r2, r7, #4352	@ 0x1100
 800077e:	f102 0207 	add.w	r2, r2, #7
 8000782:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 8000784:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8000788:	f103 0307 	add.w	r3, r3, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d016      	beq.n	80007c0 <writeSDFILE+0x74>
    {
        sprintf(TxBuffer, "Error! While Opening/Creating The File '%s', Error Code: (%i)\r\n", filename, FR_Status);
 8000792:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8000796:	f103 0307 	add.w	r3, r3, #7
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80007a0:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80007a4:	6812      	ldr	r2, [r2, #0]
 80007a6:	4931      	ldr	r1, [pc, #196]	@ (800086c <writeSDFILE+0x120>)
 80007a8:	4831      	ldr	r0, [pc, #196]	@ (8000870 <writeSDFILE+0x124>)
 80007aa:	f007 fe2d 	bl	8008408 <siprintf>
        UART_Print(TxBuffer);
 80007ae:	4830      	ldr	r0, [pc, #192]	@ (8000870 <writeSDFILE+0x124>)
 80007b0:	f7ff ff5e 	bl	8000670 <UART_Print>
        return FR_Status;
 80007b4:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80007b8:	f103 0307 	add.w	r3, r3, #7
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	e04e      	b.n	800085e <writeSDFILE+0x112>
    }

    FR_Status = f_lseek(&Fil, f_size(&Fil));
 80007c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007c4:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80007c8:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80007cc:	3b14      	subs	r3, #20
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 f904 	bl	80079de <f_lseek>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f507 5288 	add.w	r2, r7, #4352	@ 0x1100
 80007dc:	f102 0207 	add.w	r2, r2, #7
 80007e0:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 80007e2:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80007e6:	f103 0307 	add.w	r3, r3, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d01c      	beq.n	800082a <writeSDFILE+0xde>
    {
        sprintf(TxBuffer, "Error! While Seeking to End of File '%s', Error Code: (%i)\r\n", filename, FR_Status);
 80007f0:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80007f4:	f103 0307 	add.w	r3, r3, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80007fe:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000802:	6812      	ldr	r2, [r2, #0]
 8000804:	491b      	ldr	r1, [pc, #108]	@ (8000874 <writeSDFILE+0x128>)
 8000806:	481a      	ldr	r0, [pc, #104]	@ (8000870 <writeSDFILE+0x124>)
 8000808:	f007 fdfe 	bl	8008408 <siprintf>
        UART_Print(TxBuffer);
 800080c:	4818      	ldr	r0, [pc, #96]	@ (8000870 <writeSDFILE+0x124>)
 800080e:	f7ff ff2f 	bl	8000670 <UART_Print>
        f_close(&Fil);
 8000812:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000816:	3b14      	subs	r3, #20
 8000818:	4618      	mov	r0, r3
 800081a:	f007 f8b6 	bl	800798a <f_close>
        return FR_Status;
 800081e:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8000822:	f103 0307 	add.w	r3, r3, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	e019      	b.n	800085e <writeSDFILE+0x112>
    }

    sprintf(TxBuffer, "File '%s' Opened Successfully! Writing Data..\r\n\n", filename);
 800082a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800082e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4910      	ldr	r1, [pc, #64]	@ (8000878 <writeSDFILE+0x12c>)
 8000836:	480e      	ldr	r0, [pc, #56]	@ (8000870 <writeSDFILE+0x124>)
 8000838:	f007 fde6 	bl	8008408 <siprintf>
    UART_Print(TxBuffer);
 800083c:	480c      	ldr	r0, [pc, #48]	@ (8000870 <writeSDFILE+0x124>)
 800083e:	f7ff ff17 	bl	8000670 <UART_Print>

    f_puts("ROAD ARROW!\r\n", &Fil);
 8000842:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000846:	3b14      	subs	r3, #20
 8000848:	4619      	mov	r1, r3
 800084a:	480c      	ldr	r0, [pc, #48]	@ (800087c <writeSDFILE+0x130>)
 800084c:	f007 fba0 	bl	8007f90 <f_puts>
    f_close(&Fil);
 8000850:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000854:	3b14      	subs	r3, #20
 8000856:	4618      	mov	r0, r3
 8000858:	f007 f897 	bl	800798a <f_close>

    return FR_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	f507 5788 	add.w	r7, r7, #4352	@ 0x1100
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	0800aa20 	.word	0x0800aa20
 8000870:	200006d0 	.word	0x200006d0
 8000874:	0800aa60 	.word	0x0800aa60
 8000878:	0800aaa0 	.word	0x0800aaa0
 800087c:	0800aad4 	.word	0x0800aad4

08000880 <readSDFILE>:

static FRESULT readSDFILE(const char *filename)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	f5ad 5d88 	sub.w	sp, sp, #4352	@ 0x1100
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800088e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000892:	6018      	str	r0, [r3, #0]
    FRESULT FR_Status;
    FIL Fil;
    char RW_Buffer[200];

    FR_Status = f_open(&Fil, filename, FA_READ);
 8000894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000898:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 800089c:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80008a0:	3b14      	subs	r3, #20
 80008a2:	2201      	movs	r2, #1
 80008a4:	6809      	ldr	r1, [r1, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f006 fb36 	bl	8006f18 <f_open>
 80008ac:	4603      	mov	r3, r0
 80008ae:	f507 5288 	add.w	r2, r7, #4352	@ 0x1100
 80008b2:	f102 0207 	add.w	r2, r2, #7
 80008b6:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 80008b8:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80008bc:	f103 0307 	add.w	r3, r3, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d016      	beq.n	80008f4 <readSDFILE+0x74>
    {
        sprintf(TxBuffer, "Error! While Opening File '%s' For Read.. Error Code: (%i)\r\n", filename, FR_Status);
 80008c6:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80008ca:	f103 0307 	add.w	r3, r3, #7
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80008d4:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	4920      	ldr	r1, [pc, #128]	@ (800095c <readSDFILE+0xdc>)
 80008dc:	4820      	ldr	r0, [pc, #128]	@ (8000960 <readSDFILE+0xe0>)
 80008de:	f007 fd93 	bl	8008408 <siprintf>
        UART_Print(TxBuffer);
 80008e2:	481f      	ldr	r0, [pc, #124]	@ (8000960 <readSDFILE+0xe0>)
 80008e4:	f7ff fec4 	bl	8000670 <UART_Print>
        return FR_Status;
 80008e8:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80008ec:	f103 0307 	add.w	r3, r3, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	e02d      	b.n	8000950 <readSDFILE+0xd0>
    }

    sprintf(TxBuffer, "Reading File '%s'...\r\n", filename);
 80008f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80008f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4919      	ldr	r1, [pc, #100]	@ (8000964 <readSDFILE+0xe4>)
 8000900:	4817      	ldr	r0, [pc, #92]	@ (8000960 <readSDFILE+0xe0>)
 8000902:	f007 fd81 	bl	8008408 <siprintf>
    UART_Print(TxBuffer);
 8000906:	4816      	ldr	r0, [pc, #88]	@ (8000960 <readSDFILE+0xe0>)
 8000908:	f7ff feb2 	bl	8000670 <UART_Print>

    while (f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil))
 800090c:	e005      	b.n	800091a <readSDFILE+0x9a>
    {
        UART_Print(RW_Buffer);
 800090e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000912:	3b1c      	subs	r3, #28
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff feab 	bl	8000670 <UART_Print>
    while (f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil))
 800091a:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800091e:	3a14      	subs	r2, #20
 8000920:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000924:	3b1c      	subs	r3, #28
 8000926:	21c8      	movs	r1, #200	@ 0xc8
 8000928:	4618      	mov	r0, r3
 800092a:	f007 fa7c 	bl	8007e26 <f_gets>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1ec      	bne.n	800090e <readSDFILE+0x8e>
    }

    f_close(&Fil);
 8000934:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000938:	3b14      	subs	r3, #20
 800093a:	4618      	mov	r0, r3
 800093c:	f007 f825 	bl	800798a <f_close>
    sprintf(TxBuffer, "File Closed! \r\n\n");
 8000940:	4909      	ldr	r1, [pc, #36]	@ (8000968 <readSDFILE+0xe8>)
 8000942:	4807      	ldr	r0, [pc, #28]	@ (8000960 <readSDFILE+0xe0>)
 8000944:	f007 fd60 	bl	8008408 <siprintf>
    UART_Print(TxBuffer);
 8000948:	4805      	ldr	r0, [pc, #20]	@ (8000960 <readSDFILE+0xe0>)
 800094a:	f7ff fe91 	bl	8000670 <UART_Print>

    return FR_OK;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	f507 5788 	add.w	r7, r7, #4352	@ 0x1100
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	0800aae4 	.word	0x0800aae4
 8000960:	200006d0 	.word	0x200006d0
 8000964:	0800ab24 	.word	0x0800ab24
 8000968:	0800ab3c 	.word	0x0800ab3c

0800096c <generate_filename>:

static void generate_filename(char *filename, size_t max_len)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b08b      	sub	sp, #44	@ 0x2c
 8000970:	af04      	add	r7, sp, #16
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
    time_t now = time(NULL);
 8000976:	2000      	movs	r0, #0
 8000978:	f007 fec0 	bl	80086fc <time>
 800097c:	4602      	mov	r2, r0
 800097e:	460b      	mov	r3, r1
 8000980:	e9c7 2302 	strd	r2, r3, [r7, #8]
    struct tm *t = localtime(&now);
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4618      	mov	r0, r3
 800098a:	f007 fdab 	bl	80084e4 <localtime>
 800098e:	6178      	str	r0, [r7, #20]

    snprintf(filename, max_len, "log_%02d_%02d_%04d_%02d_%02d.txt",
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	68dc      	ldr	r4, [r3, #12]
             t->tm_mday, t->tm_mon + 1, t->tm_year + 1900, t->tm_hour, t->tm_min);
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	691b      	ldr	r3, [r3, #16]
    snprintf(filename, max_len, "log_%02d_%02d_%04d_%02d_%02d.txt",
 8000998:	3301      	adds	r3, #1
             t->tm_mday, t->tm_mon + 1, t->tm_year + 1900, t->tm_hour, t->tm_min);
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	6952      	ldr	r2, [r2, #20]
    snprintf(filename, max_len, "log_%02d_%02d_%04d_%02d_%02d.txt",
 800099e:	f202 726c 	addw	r2, r2, #1900	@ 0x76c
 80009a2:	6979      	ldr	r1, [r7, #20]
 80009a4:	6889      	ldr	r1, [r1, #8]
 80009a6:	6978      	ldr	r0, [r7, #20]
 80009a8:	6840      	ldr	r0, [r0, #4]
 80009aa:	9003      	str	r0, [sp, #12]
 80009ac:	9102      	str	r1, [sp, #8]
 80009ae:	9201      	str	r2, [sp, #4]
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	4623      	mov	r3, r4
 80009b4:	4a04      	ldr	r2, [pc, #16]	@ (80009c8 <generate_filename+0x5c>)
 80009b6:	6839      	ldr	r1, [r7, #0]
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f007 fcf1 	bl	80083a0 <sniprintf>
}
 80009be:	bf00      	nop
 80009c0:	371c      	adds	r7, #28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	bf00      	nop
 80009c8:	0800ab50 	.word	0x0800ab50

080009cc <SD_Card_Test>:


static void SD_Card_Test(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
    FATFS FatFs;
    FRESULT FR_Status;

    char filename[50];

    generate_filename(filename, sizeof(filename));
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	3b14      	subs	r3, #20
 80009dc:	2132      	movs	r1, #50	@ 0x32
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ffc4 	bl	800096c <generate_filename>

    FR_Status = mounSDtFile(&FatFs);
 80009e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fe55 	bl	8000698 <mounSDtFile>
 80009ee:	4603      	mov	r3, r0
 80009f0:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80009f4:	f102 0213 	add.w	r2, r2, #19
 80009f8:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 80009fa:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80009fe:	f103 0313 	add.w	r3, r3, #19
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d14e      	bne.n	8000aa6 <SD_Card_Test+0xda>
        return;

    for (int i = 0; i < 500; i++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8000a0e:	f102 0214 	add.w	r2, r2, #20
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	e01d      	b.n	8000a52 <SD_Card_Test+0x86>
    {
        FR_Status = writeSDFILE(filename);
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	3b14      	subs	r3, #20
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fe95 	bl	800074c <writeSDFILE>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8000a28:	f102 0213 	add.w	r2, r2, #19
 8000a2c:	7013      	strb	r3, [r2, #0]
        if (FR_Status != FR_OK)
 8000a2e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000a32:	f103 0313 	add.w	r3, r3, #19
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d136      	bne.n	8000aaa <SD_Card_Test+0xde>
    for (int i = 0; i < 500; i++)
 8000a3c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000a40:	f103 0314 	add.w	r3, r3, #20
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8000a4c:	f102 0214 	add.w	r2, r2, #20
 8000a50:	6013      	str	r3, [r2, #0]
 8000a52:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000a56:	f103 0314 	add.w	r3, r3, #20
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000a60:	dbd9      	blt.n	8000a16 <SD_Card_Test+0x4a>
            return;
    }

    FR_Status = readSDFILE(filename);
 8000a62:	f107 0318 	add.w	r3, r7, #24
 8000a66:	3b14      	subs	r3, #20
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff09 	bl	8000880 <readSDFILE>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8000a74:	f102 0213 	add.w	r2, r2, #19
 8000a78:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 8000a7a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000a7e:	f103 0313 	add.w	r3, r3, #19
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d112      	bne.n	8000aae <SD_Card_Test+0xe2>
        return;

    FR_Status = unmountSDFile();
 8000a88:	f7ff fe34 	bl	80006f4 <unmountSDFile>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8000a92:	f102 0213 	add.w	r2, r2, #19
 8000a96:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 8000a98:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000a9c:	f103 0313 	add.w	r3, r3, #19
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	e004      	b.n	8000ab0 <SD_Card_Test+0xe4>
        return;
 8000aa6:	bf00      	nop
 8000aa8:	e002      	b.n	8000ab0 <SD_Card_Test+0xe4>
            return;
 8000aaa:	bf00      	nop
 8000aac:	e000      	b.n	8000ab0 <SD_Card_Test+0xe4>
        return;
 8000aae:	bf00      	nop
        return;

}
 8000ab0:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b0b2      	sub	sp, #200	@ 0xc8
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f000 fcaa 	bl	8001418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f814 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f000 f938 	bl	8000d3c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000acc:	f000 f8dc 	bl	8000c88 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ad0:	f000 f904 	bl	8000cdc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000ad4:	f000 f878 	bl	8000bc8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000ad8:	f000 f8ac 	bl	8000c34 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000adc:	f003 faca 	bl	8004074 <MX_FATFS_Init>
  char RW_Buffer[200];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SD_Card_Test();
 8000ae0:	f7ff ff74 	bl	80009cc <SD_Card_Test>
  HAL_Delay(1000);
 8000ae4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ae8:	f000 fd08 	bl	80014fc <HAL_Delay>
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <main+0x32>

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	@ 0x50
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2234      	movs	r2, #52	@ 0x34
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f007 fce7 	bl	80084d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 0308 	add.w	r3, r7, #8
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <SystemClock_Config+0xd0>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	4a28      	ldr	r2, [pc, #160]	@ (8000bc0 <SystemClock_Config+0xd0>)
 8000b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b24:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <SystemClock_Config+0xd0>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b30:	2300      	movs	r3, #0
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	4b23      	ldr	r3, [pc, #140]	@ (8000bc4 <SystemClock_Config+0xd4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a22      	ldr	r2, [pc, #136]	@ (8000bc4 <SystemClock_Config+0xd4>)
 8000b3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b20      	ldr	r3, [pc, #128]	@ (8000bc4 <SystemClock_Config+0xd4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b50:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b60:	2308      	movs	r3, #8
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000b64:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b68:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b6e:	2308      	movs	r3, #8
 8000b70:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fc9e 	bl	80024bc <HAL_RCC_OscConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b86:	f000 f99b 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	2103      	movs	r1, #3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 f89a 	bl	8001ce0 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bb2:	f000 f985 	bl	8000ec0 <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3750      	adds	r7, #80	@ 0x50
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bce:	4a18      	ldr	r2, [pc, #96]	@ (8000c30 <MX_SPI1_Init+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c14:	220a      	movs	r2, #10
 8000c16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c1a:	f001 fed3 	bl	80029c4 <HAL_SPI_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c24:	f000 f94c 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000104 	.word	0x20000104
 8000c30:	40013000 	.word	0x40013000

08000c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <MX_USART2_UART_Init+0x50>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_USART2_UART_Init+0x4c>)
 8000c6c:	f002 fafc 	bl	8003268 <HAL_UART_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c76:	f000 f923 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000015c 	.word	0x2000015c
 8000c84:	40004400 	.word	0x40004400

08000c88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c8c:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000c8e:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <MX_USART3_UART_Init+0x50>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c92:	4b10      	ldr	r3, [pc, #64]	@ (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cbe:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_USART3_UART_Init+0x4c>)
 8000cc0:	f002 fad2 	bl	8003268 <HAL_UART_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cca:	f000 f8f9 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200001a4 	.word	0x200001a4
 8000cd8:	40004800 	.word	0x40004800

08000cdc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ce2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ce6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ce8:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cea:	2206      	movs	r2, #6
 8000cec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cee:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cf4:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d00:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d18:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d26:	f000 fea0 	bl	8001a6a <HAL_PCD_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000d30:	f000 f8c6 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200001ec 	.word	0x200001ec

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	@ 0x30
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	4b55      	ldr	r3, [pc, #340]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a54      	ldr	r2, [pc, #336]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b52      	ldr	r3, [pc, #328]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	61bb      	str	r3, [r7, #24]
 8000d6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	4b4e      	ldr	r3, [pc, #312]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a4d      	ldr	r2, [pc, #308]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b4b      	ldr	r3, [pc, #300]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b47      	ldr	r3, [pc, #284]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a46      	ldr	r2, [pc, #280]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b44      	ldr	r3, [pc, #272]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b40      	ldr	r3, [pc, #256]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a3f      	ldr	r2, [pc, #252]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b3d      	ldr	r3, [pc, #244]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	4b39      	ldr	r3, [pc, #228]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a38      	ldr	r2, [pc, #224]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b36      	ldr	r3, [pc, #216]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b32      	ldr	r3, [pc, #200]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a31      	ldr	r2, [pc, #196]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b2f      	ldr	r3, [pc, #188]	@ (8000eac <MX_GPIO_Init+0x170>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	482c      	ldr	r0, [pc, #176]	@ (8000eb0 <MX_GPIO_Init+0x174>)
 8000e00:	f000 fe1a 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e0a:	482a      	ldr	r0, [pc, #168]	@ (8000eb4 <MX_GPIO_Init+0x178>)
 8000e0c:	f000 fe14 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2140      	movs	r1, #64	@ 0x40
 8000e14:	4828      	ldr	r0, [pc, #160]	@ (8000eb8 <MX_GPIO_Init+0x17c>)
 8000e16:	f000 fe0f 	bl	8001a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4822      	ldr	r0, [pc, #136]	@ (8000ebc <MX_GPIO_Init+0x180>)
 8000e32:	f000 fc6d 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000e36:	2310      	movs	r3, #16
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4818      	ldr	r0, [pc, #96]	@ (8000eb0 <MX_GPIO_Init+0x174>)
 8000e4e:	f000 fc5f 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e52:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4812      	ldr	r0, [pc, #72]	@ (8000eb4 <MX_GPIO_Init+0x178>)
 8000e6c:	f000 fc50 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e70:	2340      	movs	r3, #64	@ 0x40
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <MX_GPIO_Init+0x17c>)
 8000e88:	f000 fc42 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4806      	ldr	r0, [pc, #24]	@ (8000eb8 <MX_GPIO_Init+0x17c>)
 8000ea0:	f000 fc36 	bl	8001710 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea4:	bf00      	nop
 8000ea6:	3730      	adds	r7, #48	@ 0x30
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40021800 	.word	0x40021800
 8000ebc:	40020800 	.word	0x40020800

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <Error_Handler+0x8>

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eda:	4a0f      	ldr	r2, [pc, #60]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	4a08      	ldr	r2, [pc, #32]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000ef8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_MspInit+0x4c>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f06:	603b      	str	r3, [r7, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	@ 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a19      	ldr	r2, [pc, #100]	@ (8000fa0 <HAL_SPI_MspInit+0x84>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d12b      	bne.n	8000f96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	4a17      	ldr	r2, [pc, #92]	@ (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a10      	ldr	r2, [pc, #64]	@ (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <HAL_SPI_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f76:	23e0      	movs	r3, #224	@ 0xe0
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f86:	2305      	movs	r3, #5
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <HAL_SPI_MspInit+0x8c>)
 8000f92:	f000 fbbd 	bl	8001710 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40013000 	.word	0x40013000
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020000 	.word	0x40020000

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	@ 0x30
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a32      	ldr	r2, [pc, #200]	@ (8001094 <HAL_UART_MspInit+0xe8>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d12c      	bne.n	8001028 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
 8000fd2:	4b31      	ldr	r3, [pc, #196]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	4a30      	ldr	r2, [pc, #192]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fde:	4b2e      	ldr	r3, [pc, #184]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	4b2a      	ldr	r3, [pc, #168]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a29      	ldr	r2, [pc, #164]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001006:	230c      	movs	r3, #12
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001016:	2307      	movs	r3, #7
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	481e      	ldr	r0, [pc, #120]	@ (800109c <HAL_UART_MspInit+0xf0>)
 8001022:	f000 fb75 	bl	8001710 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001026:	e031      	b.n	800108c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1c      	ldr	r2, [pc, #112]	@ (80010a0 <HAL_UART_MspInit+0xf4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d12c      	bne.n	800108c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <HAL_UART_MspInit+0xec>)
 800103c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001040:	6413      	str	r3, [r2, #64]	@ 0x40
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <HAL_UART_MspInit+0xec>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800106a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800107c:	2307      	movs	r3, #7
 800107e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <HAL_UART_MspInit+0xf8>)
 8001088:	f000 fb42 	bl	8001710 <HAL_GPIO_Init>
}
 800108c:	bf00      	nop
 800108e:	3730      	adds	r7, #48	@ 0x30
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40004400 	.word	0x40004400
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40004800 	.word	0x40004800
 80010a4:	40020c00 	.word	0x40020c00

080010a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b098      	sub	sp, #96	@ 0x60
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	223c      	movs	r2, #60	@ 0x3c
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f007 fa02 	bl	80084d2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010d6:	d14d      	bne.n	8001174 <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010d8:	2320      	movs	r3, #32
 80010da:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80010dc:	2300      	movs	r3, #0
 80010de:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 f81b 	bl	8002120 <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 80010f0:	f7ff fee6 	bl	8000ec0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	4b20      	ldr	r3, [pc, #128]	@ (800117c <HAL_PCD_MspInit+0xd4>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fc:	4a1f      	ldr	r2, [pc, #124]	@ (800117c <HAL_PCD_MspInit+0xd4>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6313      	str	r3, [r2, #48]	@ 0x30
 8001104:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <HAL_PCD_MspInit+0xd4>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001110:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001114:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001122:	230a      	movs	r3, #10
 8001124:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800112a:	4619      	mov	r1, r3
 800112c:	4814      	ldr	r0, [pc, #80]	@ (8001180 <HAL_PCD_MspInit+0xd8>)
 800112e:	f000 faef 	bl	8001710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001132:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001136:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001144:	4619      	mov	r1, r3
 8001146:	480e      	ldr	r0, [pc, #56]	@ (8001180 <HAL_PCD_MspInit+0xd8>)
 8001148:	f000 fae2 	bl	8001710 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <HAL_PCD_MspInit+0xd4>)
 800114e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001150:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <HAL_PCD_MspInit+0xd4>)
 8001152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001156:	6353      	str	r3, [r2, #52]	@ 0x34
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b07      	ldr	r3, [pc, #28]	@ (800117c <HAL_PCD_MspInit+0xd4>)
 800115e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001160:	4a06      	ldr	r2, [pc, #24]	@ (800117c <HAL_PCD_MspInit+0xd4>)
 8001162:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001166:	6453      	str	r3, [r2, #68]	@ 0x44
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <HAL_PCD_MspInit+0xd4>)
 800116a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001174:	bf00      	nop
 8001176:	3760      	adds	r7, #96	@ 0x60
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <NMI_Handler+0x4>

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <MemManage_Handler+0x4>

0800119c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <UsageFault_Handler+0x4>

080011ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	(Timer1 > 0) ? (Timer1--) : (Timer1);
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <SysTick_Handler+0x34>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <SysTick_Handler+0x18>
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <SysTick_Handler+0x34>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <SysTick_Handler+0x34>)
 80011ee:	801a      	strh	r2, [r3, #0]
	(Timer2 > 0) ? (Timer2--) : (Timer2);
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <SysTick_Handler+0x38>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <SysTick_Handler+0x2c>
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <SysTick_Handler+0x38>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <SysTick_Handler+0x38>)
 8001202:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f000 f95a 	bl	80014bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200007e0 	.word	0x200007e0
 8001210:	200007e2 	.word	0x200007e2

08001214 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return 1;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_kill>:

int _kill(int pid, int sig)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800122e:	f007 fdb7 	bl	8008da0 <__errno>
 8001232:	4603      	mov	r3, r0
 8001234:	2216      	movs	r2, #22
 8001236:	601a      	str	r2, [r3, #0]
  return -1;
 8001238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_exit>:

void _exit (int status)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ffe7 	bl	8001224 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001256:	bf00      	nop
 8001258:	e7fd      	b.n	8001256 <_exit+0x12>

0800125a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	e00a      	b.n	8001282 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800126c:	f3af 8000 	nop.w
 8001270:	4601      	mov	r1, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	60ba      	str	r2, [r7, #8]
 8001278:	b2ca      	uxtb	r2, r1
 800127a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	dbf0      	blt.n	800126c <_read+0x12>
  }

  return len;
 800128a:	687b      	ldr	r3, [r7, #4]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	e009      	b.n	80012ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	60ba      	str	r2, [r7, #8]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dbf1      	blt.n	80012a6 <_write+0x12>
  }
  return len;
 80012c2:	687b      	ldr	r3, [r7, #4]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_close>:

int _close(int file)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012f4:	605a      	str	r2, [r3, #4]
  return 0;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_isatty>:

int _isatty(int file)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800130c:	2301      	movs	r3, #1
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800131a:	b480      	push	{r7}
 800131c:	b085      	sub	sp, #20
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	@ (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	@ (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f007 fd1c 	bl	8008da0 <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	220c      	movs	r2, #12
 800136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20040000 	.word	0x20040000
 8001394:	00000400 	.word	0x00000400
 8001398:	200007d0 	.word	0x200007d0
 800139c:	20000b90 	.word	0x20000b90

080013a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <SystemInit+0x20>)
 80013a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013aa:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <SystemInit+0x20>)
 80013ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80013c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013c8:	f7ff ffea 	bl	80013a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013cc:	480c      	ldr	r0, [pc, #48]	@ (8001400 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ce:	490d      	ldr	r1, [pc, #52]	@ (8001404 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001408 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d4:	e002      	b.n	80013dc <LoopCopyDataInit>

080013d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013da:	3304      	adds	r3, #4

080013dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e0:	d3f9      	bcc.n	80013d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e2:	4a0a      	ldr	r2, [pc, #40]	@ (800140c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001410 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e8:	e001      	b.n	80013ee <LoopFillZerobss>

080013ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ec:	3204      	adds	r2, #4

080013ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f0:	d3fb      	bcc.n	80013ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f2:	f007 fcdb 	bl	8008dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f6:	f7ff fb60 	bl	8000aba <main>
  bx  lr    
 80013fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013fc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001404:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001408:	0800b2dc 	.word	0x0800b2dc
  ldr r2, =_sbss
 800140c:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001410:	20000b8c 	.word	0x20000b8c

08001414 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001414:	e7fe      	b.n	8001414 <ADC_IRQHandler>
	...

08001418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800141c:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <HAL_Init+0x40>)
 8001422:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001426:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001428:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <HAL_Init+0x40>)
 800142e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001432:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_Init+0x40>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <HAL_Init+0x40>)
 800143a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800143e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001440:	2003      	movs	r0, #3
 8001442:	f000 f931 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001446:	2000      	movs	r0, #0
 8001448:	f000 f808 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800144c:	f7ff fd3e 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023c00 	.word	0x40023c00

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_InitTick+0x54>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_InitTick+0x58>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4619      	mov	r1, r3
 800146e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001472:	fbb3 f3f1 	udiv	r3, r3, r1
 8001476:	fbb2 f3f3 	udiv	r3, r2, r3
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f93b 	bl	80016f6 <HAL_SYSTICK_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00e      	b.n	80014a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b0f      	cmp	r3, #15
 800148e:	d80a      	bhi.n	80014a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	6879      	ldr	r1, [r7, #4]
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f000 f911 	bl	80016be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800149c:	4a06      	ldr	r2, [pc, #24]	@ (80014b8 <HAL_InitTick+0x5c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000004 	.word	0x20000004
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	20000008 	.word	0x20000008

080014bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_IncTick+0x20>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <HAL_IncTick+0x24>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <HAL_IncTick+0x24>)
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2000000c 	.word	0x2000000c
 80014e0:	200007d4 	.word	0x200007d4

080014e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return uwTick;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <HAL_GetTick+0x14>)
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	200007d4 	.word	0x200007d4

080014fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001504:	f7ff ffee 	bl	80014e4 <HAL_GetTick>
 8001508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001514:	d005      	beq.n	8001522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_Delay+0x44>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001522:	bf00      	nop
 8001524:	f7ff ffde 	bl	80014e4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	429a      	cmp	r2, r3
 8001532:	d8f7      	bhi.n	8001524 <HAL_Delay+0x28>
  {
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000000c 	.word	0x2000000c

08001544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001554:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001560:	4013      	ands	r3, r2
 8001562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800156c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001576:	4a04      	ldr	r2, [pc, #16]	@ (8001588 <__NVIC_SetPriorityGrouping+0x44>)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	60d3      	str	r3, [r2, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001590:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	f003 0307 	and.w	r3, r3, #7
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	@ (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	@ (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	@ 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	@ 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f7ff ff8e 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff47 	bl	8001544 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d0:	f7ff ff5c 	bl	800158c <__NVIC_GetPriorityGrouping>
 80016d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f7ff ff8e 	bl	80015fc <NVIC_EncodePriority>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff5d 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffb0 	bl	8001664 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	@ 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	e165      	b.n	80019f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800172c:	2201      	movs	r2, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	429a      	cmp	r2, r3
 8001746:	f040 8154 	bne.w	80019f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b01      	cmp	r3, #1
 8001754:	d005      	beq.n	8001762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175e:	2b02      	cmp	r3, #2
 8001760:	d130      	bne.n	80017c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 0201 	and.w	r2, r3, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d017      	beq.n	8001800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d123      	bne.n	8001854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3208      	adds	r2, #8
 8001814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3208      	adds	r2, #8
 800184e:	69b9      	ldr	r1, [r7, #24]
 8001850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80ae 	beq.w	80019f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b5d      	ldr	r3, [pc, #372]	@ (8001a10 <HAL_GPIO_Init+0x300>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	4a5c      	ldr	r2, [pc, #368]	@ (8001a10 <HAL_GPIO_Init+0x300>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001a10 <HAL_GPIO_Init+0x300>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b2:	4a58      	ldr	r2, [pc, #352]	@ (8001a14 <HAL_GPIO_Init+0x304>)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	220f      	movs	r2, #15
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001a18 <HAL_GPIO_Init+0x308>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d025      	beq.n	800192a <HAL_GPIO_Init+0x21a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4e      	ldr	r2, [pc, #312]	@ (8001a1c <HAL_GPIO_Init+0x30c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01f      	beq.n	8001926 <HAL_GPIO_Init+0x216>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001a20 <HAL_GPIO_Init+0x310>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0x212>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001a24 <HAL_GPIO_Init+0x314>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x20e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001a28 <HAL_GPIO_Init+0x318>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_Init+0x20a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4a      	ldr	r2, [pc, #296]	@ (8001a2c <HAL_GPIO_Init+0x31c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x206>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a49      	ldr	r2, [pc, #292]	@ (8001a30 <HAL_GPIO_Init+0x320>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_Init+0x202>
 800190e:	2306      	movs	r3, #6
 8001910:	e00c      	b.n	800192c <HAL_GPIO_Init+0x21c>
 8001912:	2307      	movs	r3, #7
 8001914:	e00a      	b.n	800192c <HAL_GPIO_Init+0x21c>
 8001916:	2305      	movs	r3, #5
 8001918:	e008      	b.n	800192c <HAL_GPIO_Init+0x21c>
 800191a:	2304      	movs	r3, #4
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x21c>
 800191e:	2303      	movs	r3, #3
 8001920:	e004      	b.n	800192c <HAL_GPIO_Init+0x21c>
 8001922:	2302      	movs	r3, #2
 8001924:	e002      	b.n	800192c <HAL_GPIO_Init+0x21c>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_GPIO_Init+0x21c>
 800192a:	2300      	movs	r3, #0
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	f002 0203 	and.w	r2, r2, #3
 8001932:	0092      	lsls	r2, r2, #2
 8001934:	4093      	lsls	r3, r2
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800193c:	4935      	ldr	r1, [pc, #212]	@ (8001a14 <HAL_GPIO_Init+0x304>)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	3302      	adds	r3, #2
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194a:	4b3a      	ldr	r3, [pc, #232]	@ (8001a34 <HAL_GPIO_Init+0x324>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800196e:	4a31      	ldr	r2, [pc, #196]	@ (8001a34 <HAL_GPIO_Init+0x324>)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001974:	4b2f      	ldr	r3, [pc, #188]	@ (8001a34 <HAL_GPIO_Init+0x324>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001998:	4a26      	ldr	r2, [pc, #152]	@ (8001a34 <HAL_GPIO_Init+0x324>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800199e:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <HAL_GPIO_Init+0x324>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a34 <HAL_GPIO_Init+0x324>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <HAL_GPIO_Init+0x324>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019ec:	4a11      	ldr	r2, [pc, #68]	@ (8001a34 <HAL_GPIO_Init+0x324>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3301      	adds	r3, #1
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	2b0f      	cmp	r3, #15
 80019fc:	f67f ae96 	bls.w	800172c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3724      	adds	r7, #36	@ 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40013800 	.word	0x40013800
 8001a18:	40020000 	.word	0x40020000
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40021400 	.word	0x40021400
 8001a30:	40021800 	.word	0x40021800
 8001a34:	40013c00 	.word	0x40013c00

08001a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
 8001a44:	4613      	mov	r3, r2
 8001a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a48:	787b      	ldrb	r3, [r7, #1]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a54:	e003      	b.n	8001a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a56:	887b      	ldrh	r3, [r7, #2]
 8001a58:	041a      	lsls	r2, r3, #16
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	619a      	str	r2, [r3, #24]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af02      	add	r7, sp, #8
 8001a70:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e108      	b.n	8001c8e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fb06 	bl	80010a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aaa:	d102      	bne.n	8001ab2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f002 f846 	bl	8003b48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7c1a      	ldrb	r2, [r3, #16]
 8001ac4:	f88d 2000 	strb.w	r2, [sp]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001acc:	f001 ffd8 	bl	8003a80 <USB_CoreInit>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0d5      	b.n	8001c8e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 f83e 	bl	8003b6a <USB_SetCurrentMode>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0c6      	b.n	8001c8e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e04a      	b.n	8001b9c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	3315      	adds	r3, #21
 8001b16:	2201      	movs	r2, #1
 8001b18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	3314      	adds	r3, #20
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	b298      	uxth	r0, r3
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	332e      	adds	r3, #46	@ 0x2e
 8001b42:	4602      	mov	r2, r0
 8001b44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b46:	7bfa      	ldrb	r2, [r7, #15]
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	3318      	adds	r3, #24
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	331c      	adds	r3, #28
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3320      	adds	r3, #32
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	3324      	adds	r3, #36	@ 0x24
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	791b      	ldrb	r3, [r3, #4]
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3af      	bcc.n	8001b06 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73fb      	strb	r3, [r7, #15]
 8001baa:	e044      	b.n	8001c36 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bac:	7bfa      	ldrb	r2, [r7, #15]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bc2:	7bfa      	ldrb	r2, [r7, #15]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bee:	7bfa      	ldrb	r2, [r7, #15]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	3301      	adds	r3, #1
 8001c34:	73fb      	strb	r3, [r7, #15]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	791b      	ldrb	r3, [r3, #4]
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d3b5      	bcc.n	8001bac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7c1a      	ldrb	r2, [r3, #16]
 8001c48:	f88d 2000 	strb.w	r2, [sp]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c50:	f001 ffd8 	bl	8003c04 <USB_DevInit>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e013      	b.n	8001c8e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7b1b      	ldrb	r3, [r3, #12]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d102      	bne.n	8001c82 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f80a 	bl	8001c96 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 f993 	bl	8003fb2 <USB_DevDisconnect>

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	f043 0303 	orr.w	r3, r3, #3
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0cc      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b68      	ldr	r3, [pc, #416]	@ (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d90c      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b65      	ldr	r3, [pc, #404]	@ (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b63      	ldr	r3, [pc, #396]	@ (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b8      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d34:	4b59      	ldr	r3, [pc, #356]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a58      	ldr	r2, [pc, #352]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d4c:	4b53      	ldr	r3, [pc, #332]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a52      	ldr	r2, [pc, #328]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b50      	ldr	r3, [pc, #320]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	494d      	ldr	r1, [pc, #308]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d044      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b47      	ldr	r3, [pc, #284]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d119      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e07f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e06f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dae:	4b3b      	ldr	r3, [pc, #236]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e067      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dbe:	4b37      	ldr	r3, [pc, #220]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f023 0203 	bic.w	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4934      	ldr	r1, [pc, #208]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd0:	f7ff fb88 	bl	80014e4 <HAL_GetTick>
 8001dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	e00a      	b.n	8001dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd8:	f7ff fb84 	bl	80014e4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e04f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	4b2b      	ldr	r3, [pc, #172]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 020c 	and.w	r2, r3, #12
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d1eb      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e00:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d20c      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b22      	ldr	r3, [pc, #136]	@ (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e032      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4916      	ldr	r1, [pc, #88]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e52:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	490e      	ldr	r1, [pc, #56]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e66:	f000 f821 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	490a      	ldr	r1, [pc, #40]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	5ccb      	ldrb	r3, [r1, r3]
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fae8 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023c00 	.word	0x40023c00
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	0800abc8 	.word	0x0800abc8
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	20000008 	.word	0x20000008

08001eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eb0:	b094      	sub	sp, #80	@ 0x50
 8001eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec4:	4b79      	ldr	r3, [pc, #484]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d00d      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x40>
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	f200 80e1 	bhi.w	8002098 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d003      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ede:	e0db      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ee0:	4b73      	ldr	r3, [pc, #460]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ee4:	e0db      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ee6:	4b73      	ldr	r3, [pc, #460]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001eea:	e0d8      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eec:	4b6f      	ldr	r3, [pc, #444]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ef4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d063      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f02:	4b6a      	ldr	r3, [pc, #424]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	099b      	lsrs	r3, r3, #6
 8001f08:	2200      	movs	r2, #0
 8001f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f1e:	4622      	mov	r2, r4
 8001f20:	462b      	mov	r3, r5
 8001f22:	f04f 0000 	mov.w	r0, #0
 8001f26:	f04f 0100 	mov.w	r1, #0
 8001f2a:	0159      	lsls	r1, r3, #5
 8001f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f30:	0150      	lsls	r0, r2, #5
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4621      	mov	r1, r4
 8001f38:	1a51      	subs	r1, r2, r1
 8001f3a:	6139      	str	r1, [r7, #16]
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f50:	4659      	mov	r1, fp
 8001f52:	018b      	lsls	r3, r1, #6
 8001f54:	4651      	mov	r1, sl
 8001f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f5a:	4651      	mov	r1, sl
 8001f5c:	018a      	lsls	r2, r1, #6
 8001f5e:	4651      	mov	r1, sl
 8001f60:	ebb2 0801 	subs.w	r8, r2, r1
 8001f64:	4659      	mov	r1, fp
 8001f66:	eb63 0901 	sbc.w	r9, r3, r1
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f7e:	4690      	mov	r8, r2
 8001f80:	4699      	mov	r9, r3
 8001f82:	4623      	mov	r3, r4
 8001f84:	eb18 0303 	adds.w	r3, r8, r3
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	462b      	mov	r3, r5
 8001f8c:	eb49 0303 	adc.w	r3, r9, r3
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f9e:	4629      	mov	r1, r5
 8001fa0:	024b      	lsls	r3, r1, #9
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fa8:	4621      	mov	r1, r4
 8001faa:	024a      	lsls	r2, r1, #9
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fbc:	f7fe f9e0 	bl	8000380 <__aeabi_uldivmod>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fc8:	e058      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fca:	4b38      	ldr	r3, [pc, #224]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	099b      	lsrs	r3, r3, #6
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fda:	623b      	str	r3, [r7, #32]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fe4:	4642      	mov	r2, r8
 8001fe6:	464b      	mov	r3, r9
 8001fe8:	f04f 0000 	mov.w	r0, #0
 8001fec:	f04f 0100 	mov.w	r1, #0
 8001ff0:	0159      	lsls	r1, r3, #5
 8001ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff6:	0150      	lsls	r0, r2, #5
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4641      	mov	r1, r8
 8001ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002002:	4649      	mov	r1, r9
 8002004:	eb63 0b01 	sbc.w	fp, r3, r1
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800201c:	ebb2 040a 	subs.w	r4, r2, sl
 8002020:	eb63 050b 	sbc.w	r5, r3, fp
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	00eb      	lsls	r3, r5, #3
 800202e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002032:	00e2      	lsls	r2, r4, #3
 8002034:	4614      	mov	r4, r2
 8002036:	461d      	mov	r5, r3
 8002038:	4643      	mov	r3, r8
 800203a:	18e3      	adds	r3, r4, r3
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	464b      	mov	r3, r9
 8002040:	eb45 0303 	adc.w	r3, r5, r3
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002052:	4629      	mov	r1, r5
 8002054:	028b      	lsls	r3, r1, #10
 8002056:	4621      	mov	r1, r4
 8002058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800205c:	4621      	mov	r1, r4
 800205e:	028a      	lsls	r2, r1, #10
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002066:	2200      	movs	r2, #0
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	61fa      	str	r2, [r7, #28]
 800206c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002070:	f7fe f986 	bl	8000380 <__aeabi_uldivmod>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4613      	mov	r3, r2
 800207a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800207c:	4b0b      	ldr	r3, [pc, #44]	@ (80020ac <HAL_RCC_GetSysClockFreq+0x200>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	3301      	adds	r3, #1
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800208c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800208e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002096:	e002      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800209a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800209c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800209e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3750      	adds	r7, #80	@ 0x50
 80020a4:	46bd      	mov	sp, r7
 80020a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800
 80020b0:	00f42400 	.word	0x00f42400
 80020b4:	007a1200 	.word	0x007a1200

080020b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <HAL_RCC_GetHCLKFreq+0x14>)
 80020be:	681b      	ldr	r3, [r3, #0]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000004 	.word	0x20000004

080020d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d4:	f7ff fff0 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0a9b      	lsrs	r3, r3, #10
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4903      	ldr	r1, [pc, #12]	@ (80020f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	0800abd8 	.word	0x0800abd8

080020f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020fc:	f7ff ffdc 	bl	80020b8 <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0b5b      	lsrs	r3, r3, #13
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4903      	ldr	r1, [pc, #12]	@ (800211c <HAL_RCC_GetPCLK2Freq+0x24>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	0800abd8 	.word	0x0800abd8

08002120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b00      	cmp	r3, #0
 800213e:	d010      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002140:	4b87      	ldr	r3, [pc, #540]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002142:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002146:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	4984      	ldr	r1, [pc, #528]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 800215e:	2301      	movs	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d010      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800216e:	4b7c      	ldr	r3, [pc, #496]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002174:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4978      	ldr	r1, [pc, #480]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 800218c:	2301      	movs	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 8083 	beq.w	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80021ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a69      	ldr	r2, [pc, #420]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80021c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021c6:	f7ff f98d 	bl	80014e4 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80021cc:	e008      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ce:	f7ff f989 	bl	80014e4 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e162      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80021e0:	4b60      	ldr	r3, [pc, #384]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0f0      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021f4:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d02f      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	429a      	cmp	r2, r3
 8002208:	d028      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800220a:	4b55      	ldr	r3, [pc, #340]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002212:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002214:	4b54      	ldr	r3, [pc, #336]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800221a:	4b53      	ldr	r3, [pc, #332]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002220:	4a4f      	ldr	r2, [pc, #316]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002226:	4b4e      	ldr	r3, [pc, #312]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d114      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002232:	f7ff f957 	bl	80014e4 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7ff f953 	bl	80014e4 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e12a      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	4b43      	ldr	r3, [pc, #268]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ee      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002264:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002268:	d10d      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800226a:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800227a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800227e:	4938      	ldr	r1, [pc, #224]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]
 8002284:	e005      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002286:	4b36      	ldr	r3, [pc, #216]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4a35      	ldr	r2, [pc, #212]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800228c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002290:	6093      	str	r3, [r2, #8]
 8002292:	4b33      	ldr	r3, [pc, #204]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002294:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229e:	4930      	ldr	r1, [pc, #192]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d004      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 80022b6:	4b2d      	ldr	r3, [pc, #180]	@ (800236c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80022b8:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80022c6:	4b26      	ldr	r3, [pc, #152]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022cc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d4:	4922      	ldr	r1, [pc, #136]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d011      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ee:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f6:	491a      	ldr	r1, [pc, #104]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002302:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002306:	d101      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002308:	2301      	movs	r3, #1
 800230a:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800231a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800231e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	490e      	ldr	r1, [pc, #56]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d004      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b80      	cmp	r3, #128	@ 0x80
 800233a:	f040 8091 	bne.w	8002460 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800233e:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002344:	f7ff f8ce 	bl	80014e4 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800234a:	e013      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800234c:	f7ff f8ca 	bl	80014e4 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d90c      	bls.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0a3      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	40007000 	.word	0x40007000
 8002368:	42470e40 	.word	0x42470e40
 800236c:	424711e0 	.word	0x424711e0
 8002370:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002374:	4b4e      	ldr	r3, [pc, #312]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1e5      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002380:	4a4c      	ldr	r2, [pc, #304]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002386:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d023      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d019      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d004      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023c4:	d00e      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d115      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023e2:	d110      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	061b      	lsls	r3, r3, #24
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	071b      	lsls	r3, r3, #28
 80023fe:	492c      	ldr	r1, [pc, #176]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240e:	2b00      	cmp	r3, #0
 8002410:	d010      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	019b      	lsls	r3, r3, #6
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	061b      	lsls	r3, r3, #24
 8002424:	431a      	orrs	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	071b      	lsls	r3, r3, #28
 800242c:	4920      	ldr	r1, [pc, #128]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002434:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800243a:	f7ff f853 	bl	80014e4 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002442:	f7ff f84f 	bl	80014e4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e028      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002454:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800246c:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800246e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002472:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247a:	490d      	ldr	r1, [pc, #52]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800248e:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002494:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	4904      	ldr	r1, [pc, #16]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	424710d8 	.word	0x424710d8
 80024b8:	42470068 	.word	0x42470068

080024bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e273      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d075      	beq.n	80025c6 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024da:	4b88      	ldr	r3, [pc, #544]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d00c      	beq.n	8002500 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e6:	4b85      	ldr	r3, [pc, #532]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
        || \
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d112      	bne.n	8002518 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f2:	4b82      	ldr	r3, [pc, #520]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024fe:	d10b      	bne.n	8002518 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	4b7e      	ldr	r3, [pc, #504]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d05b      	beq.n	80025c4 <HAL_RCC_OscConfig+0x108>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d157      	bne.n	80025c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e24e      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002520:	d106      	bne.n	8002530 <HAL_RCC_OscConfig+0x74>
 8002522:	4b76      	ldr	r3, [pc, #472]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a75      	ldr	r2, [pc, #468]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e01d      	b.n	800256c <HAL_RCC_OscConfig+0xb0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x98>
 800253a:	4b70      	ldr	r3, [pc, #448]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6f      	ldr	r2, [pc, #444]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b6d      	ldr	r3, [pc, #436]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6c      	ldr	r2, [pc, #432]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 800254c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0xb0>
 8002554:	4b69      	ldr	r3, [pc, #420]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a68      	ldr	r2, [pc, #416]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 800255a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b66      	ldr	r3, [pc, #408]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a65      	ldr	r2, [pc, #404]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 8002566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800256a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d013      	beq.n	800259c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe ffb6 	bl	80014e4 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe ffb2 	bl	80014e4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	@ 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e213      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b5b      	ldr	r3, [pc, #364]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0xc0>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe ffa2 	bl	80014e4 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a4:	f7fe ff9e 	bl	80014e4 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	@ 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e1ff      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	4b51      	ldr	r3, [pc, #324]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0xe8>
 80025c2:	e000      	b.n	80025c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d063      	beq.n	800269a <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025d2:	4b4a      	ldr	r3, [pc, #296]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025de:	4b47      	ldr	r3, [pc, #284]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
        || \
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d11c      	bne.n	8002624 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ea:	4b44      	ldr	r3, [pc, #272]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d116      	bne.n	8002624 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	4b41      	ldr	r3, [pc, #260]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_RCC_OscConfig+0x152>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d001      	beq.n	800260e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e1d3      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260e:	4b3b      	ldr	r3, [pc, #236]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4937      	ldr	r1, [pc, #220]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	e03a      	b.n	800269a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d020      	beq.n	800266e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800262c:	4b34      	ldr	r3, [pc, #208]	@ (8002700 <HAL_RCC_OscConfig+0x244>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7fe ff57 	bl	80014e4 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263a:	f7fe ff53 	bl	80014e4 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e1b4      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	4b2b      	ldr	r3, [pc, #172]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002658:	4b28      	ldr	r3, [pc, #160]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4925      	ldr	r1, [pc, #148]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]
 800266c:	e015      	b.n	800269a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800266e:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <HAL_RCC_OscConfig+0x244>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe ff36 	bl	80014e4 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267c:	f7fe ff32 	bl	80014e4 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e193      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	4b1b      	ldr	r3, [pc, #108]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d036      	beq.n	8002714 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ae:	4b15      	ldr	r3, [pc, #84]	@ (8002704 <HAL_RCC_OscConfig+0x248>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fe ff16 	bl	80014e4 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7fe ff12 	bl	80014e4 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e173      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <HAL_RCC_OscConfig+0x240>)
 80026d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x200>
 80026da:	e01b      	b.n	8002714 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026dc:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <HAL_RCC_OscConfig+0x248>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7fe feff 	bl	80014e4 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	e00e      	b.n	8002708 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ea:	f7fe fefb 	bl	80014e4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d907      	bls.n	8002708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e15c      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
 80026fc:	40023800 	.word	0x40023800
 8002700:	42470000 	.word	0x42470000
 8002704:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	4b8a      	ldr	r3, [pc, #552]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 800270a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ea      	bne.n	80026ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8097 	beq.w	8002850 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002726:	4b83      	ldr	r3, [pc, #524]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10f      	bne.n	8002752 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	4b7f      	ldr	r3, [pc, #508]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	4a7e      	ldr	r2, [pc, #504]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002740:	6413      	str	r3, [r2, #64]	@ 0x40
 8002742:	4b7c      	ldr	r3, [pc, #496]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274e:	2301      	movs	r3, #1
 8002750:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002752:	4b79      	ldr	r3, [pc, #484]	@ (8002938 <HAL_RCC_OscConfig+0x47c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d118      	bne.n	8002790 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275e:	4b76      	ldr	r3, [pc, #472]	@ (8002938 <HAL_RCC_OscConfig+0x47c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a75      	ldr	r2, [pc, #468]	@ (8002938 <HAL_RCC_OscConfig+0x47c>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276a:	f7fe febb 	bl	80014e4 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002772:	f7fe feb7 	bl	80014e4 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e118      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	4b6c      	ldr	r3, [pc, #432]	@ (8002938 <HAL_RCC_OscConfig+0x47c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2ea>
 8002798:	4b66      	ldr	r3, [pc, #408]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279c:	4a65      	ldr	r2, [pc, #404]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a4:	e01c      	b.n	80027e0 <HAL_RCC_OscConfig+0x324>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b05      	cmp	r3, #5
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0x30c>
 80027ae:	4b61      	ldr	r3, [pc, #388]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	4a60      	ldr	r2, [pc, #384]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027be:	4a5d      	ldr	r2, [pc, #372]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0x324>
 80027c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027cc:	4a59      	ldr	r2, [pc, #356]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 80027ce:	f023 0301 	bic.w	r3, r3, #1
 80027d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d4:	4b57      	ldr	r3, [pc, #348]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d8:	4a56      	ldr	r2, [pc, #344]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 80027da:	f023 0304 	bic.w	r3, r3, #4
 80027de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d015      	beq.n	8002814 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7fe fe7c 	bl	80014e4 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f0:	f7fe fe78 	bl	80014e4 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0d7      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002806:	4b4b      	ldr	r3, [pc, #300]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0ee      	beq.n	80027f0 <HAL_RCC_OscConfig+0x334>
 8002812:	e014      	b.n	800283e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002814:	f7fe fe66 	bl	80014e4 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281a:	e00a      	b.n	8002832 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fe fe62 	bl	80014e4 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282a:	4293      	cmp	r3, r2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e0c1      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002832:	4b40      	ldr	r3, [pc, #256]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1ee      	bne.n	800281c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d105      	bne.n	8002850 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002844:	4b3b      	ldr	r3, [pc, #236]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	4a3a      	ldr	r2, [pc, #232]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 800284a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800284e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80ad 	beq.w	80029b4 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800285a:	4b36      	ldr	r3, [pc, #216]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
 8002862:	2b08      	cmp	r3, #8
 8002864:	d060      	beq.n	8002928 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d145      	bne.n	80028fa <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b33      	ldr	r3, [pc, #204]	@ (800293c <HAL_RCC_OscConfig+0x480>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fe36 	bl	80014e4 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fe32 	bl	80014e4 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e093      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	4b29      	ldr	r3, [pc, #164]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	3b01      	subs	r3, #1
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	071b      	lsls	r3, r3, #28
 80028c6:	491b      	ldr	r1, [pc, #108]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <HAL_RCC_OscConfig+0x480>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7fe fe07 	bl	80014e4 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028da:	f7fe fe03 	bl	80014e4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e064      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ec:	4b11      	ldr	r3, [pc, #68]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x41e>
 80028f8:	e05c      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fa:	4b10      	ldr	r3, [pc, #64]	@ (800293c <HAL_RCC_OscConfig+0x480>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fdf0 	bl	80014e4 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002908:	f7fe fdec 	bl	80014e4 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e04d      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <HAL_RCC_OscConfig+0x478>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x44c>
 8002926:	e045      	b.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d107      	bne.n	8002940 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e040      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
 8002934:	40023800 	.word	0x40023800
 8002938:	40007000 	.word	0x40007000
 800293c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002940:	4b1f      	ldr	r3, [pc, #124]	@ (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d030      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d129      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d122      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002970:	4013      	ands	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002976:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002978:	4293      	cmp	r3, r2
 800297a:	d119      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	3b01      	subs	r3, #1
 800298a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d10f      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800

080029c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e07b      	b.n	8002ace <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029e6:	d009      	beq.n	80029fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]
 80029ee:	e005      	b.n	80029fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe fa80 	bl	8000f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a80:	ea42 0103 	orr.w	r1, r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	0c1b      	lsrs	r3, r3, #16
 8002a9a:	f003 0104 	and.w	r1, r3, #4
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	f003 0210 	and.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69da      	ldr	r2, [r3, #28]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002abc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b088      	sub	sp, #32
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	603b      	str	r3, [r7, #0]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ae6:	f7fe fcfd 	bl	80014e4 <HAL_GetTick>
 8002aea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d001      	beq.n	8002b00 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
 8002afe:	e12a      	b.n	8002d56 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_SPI_Transmit+0x36>
 8002b06:	88fb      	ldrh	r3, [r7, #6]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e122      	b.n	8002d56 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_SPI_Transmit+0x48>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e11b      	b.n	8002d56 <HAL_SPI_Transmit+0x280>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2203      	movs	r2, #3
 8002b2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	88fa      	ldrh	r2, [r7, #6]
 8002b3e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	88fa      	ldrh	r2, [r7, #6]
 8002b44:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b6c:	d10f      	bne.n	8002b8e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b98:	2b40      	cmp	r3, #64	@ 0x40
 8002b9a:	d007      	beq.n	8002bac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002baa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bb4:	d152      	bne.n	8002c5c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_SPI_Transmit+0xee>
 8002bbe:	8b7b      	ldrh	r3, [r7, #26]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d145      	bne.n	8002c50 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc8:	881a      	ldrh	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd4:	1c9a      	adds	r2, r3, #2
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002be8:	e032      	b.n	8002c50 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d112      	bne.n	8002c1e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfc:	881a      	ldrh	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c08:	1c9a      	adds	r2, r3, #2
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c1c:	e018      	b.n	8002c50 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c1e:	f7fe fc61 	bl	80014e4 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d803      	bhi.n	8002c36 <HAL_SPI_Transmit+0x160>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d102      	bne.n	8002c3c <HAL_SPI_Transmit+0x166>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e082      	b.n	8002d56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1c7      	bne.n	8002bea <HAL_SPI_Transmit+0x114>
 8002c5a:	e053      	b.n	8002d04 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_SPI_Transmit+0x194>
 8002c64:	8b7b      	ldrh	r3, [r7, #26]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d147      	bne.n	8002cfa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c90:	e033      	b.n	8002cfa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d113      	bne.n	8002cc8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	7812      	ldrb	r2, [r2, #0]
 8002cac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002cc6:	e018      	b.n	8002cfa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc8:	f7fe fc0c 	bl	80014e4 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d803      	bhi.n	8002ce0 <HAL_SPI_Transmit+0x20a>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d102      	bne.n	8002ce6 <HAL_SPI_Transmit+0x210>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e02d      	b.n	8002d56 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1c6      	bne.n	8002c92 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	6839      	ldr	r1, [r7, #0]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fa59 	bl	80031c0 <SPI_EndRxTxTransaction>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002d54:	2300      	movs	r3, #0
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b08a      	sub	sp, #40	@ 0x28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d70:	f7fe fbb8 	bl	80014e4 <HAL_GetTick>
 8002d74:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d7c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002d84:	887b      	ldrh	r3, [r7, #2]
 8002d86:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d88:	7ffb      	ldrb	r3, [r7, #31]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d00c      	beq.n	8002da8 <HAL_SPI_TransmitReceive+0x4a>
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d94:	d106      	bne.n	8002da4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <HAL_SPI_TransmitReceive+0x46>
 8002d9e:	7ffb      	ldrb	r3, [r7, #31]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d001      	beq.n	8002da8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
 8002da6:	e17f      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_SPI_TransmitReceive+0x5c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_SPI_TransmitReceive+0x5c>
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e174      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_SPI_TransmitReceive+0x6e>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e16d      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x34a>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d003      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2205      	movs	r2, #5
 8002de4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	887a      	ldrh	r2, [r7, #2]
 8002dfe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	887a      	ldrh	r2, [r7, #2]
 8002e0a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	887a      	ldrh	r2, [r7, #2]
 8002e10:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e28:	2b40      	cmp	r3, #64	@ 0x40
 8002e2a:	d007      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e44:	d17e      	bne.n	8002f44 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0xf6>
 8002e4e:	8afb      	ldrh	r3, [r7, #22]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d16c      	bne.n	8002f2e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	881a      	ldrh	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	1c9a      	adds	r2, r3, #2
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e78:	e059      	b.n	8002f2e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d11b      	bne.n	8002ec0 <HAL_SPI_TransmitReceive+0x162>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d016      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0x162>
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d113      	bne.n	8002ec0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9c:	881a      	ldrh	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	1c9a      	adds	r2, r3, #2
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d119      	bne.n	8002f02 <HAL_SPI_TransmitReceive+0x1a4>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d014      	beq.n	8002f02 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee2:	b292      	uxth	r2, r2
 8002ee4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eea:	1c9a      	adds	r2, r3, #2
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002efe:	2301      	movs	r3, #1
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f02:	f7fe faef 	bl	80014e4 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d80d      	bhi.n	8002f2e <HAL_SPI_TransmitReceive+0x1d0>
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d009      	beq.n	8002f2e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e0bc      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1a0      	bne.n	8002e7a <HAL_SPI_TransmitReceive+0x11c>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d19b      	bne.n	8002e7a <HAL_SPI_TransmitReceive+0x11c>
 8002f42:	e082      	b.n	800304a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <HAL_SPI_TransmitReceive+0x1f4>
 8002f4c:	8afb      	ldrh	r3, [r7, #22]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d171      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f78:	e05d      	b.n	8003036 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d11c      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x264>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d017      	beq.n	8002fc2 <HAL_SPI_TransmitReceive+0x264>
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d114      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	7812      	ldrb	r2, [r2, #0]
 8002fa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d119      	bne.n	8003004 <HAL_SPI_TransmitReceive+0x2a6>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d014      	beq.n	8003004 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003000:	2301      	movs	r3, #1
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003004:	f7fe fa6e 	bl	80014e4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003010:	429a      	cmp	r2, r3
 8003012:	d803      	bhi.n	800301c <HAL_SPI_TransmitReceive+0x2be>
 8003014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301a:	d102      	bne.n	8003022 <HAL_SPI_TransmitReceive+0x2c4>
 800301c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301e:	2b00      	cmp	r3, #0
 8003020:	d109      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e038      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d19c      	bne.n	8002f7a <HAL_SPI_TransmitReceive+0x21c>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d197      	bne.n	8002f7a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800304a:	6a3a      	ldr	r2, [r7, #32]
 800304c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f8b6 	bl	80031c0 <SPI_EndRxTxTransaction>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e01d      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003074:	2300      	movs	r3, #0
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	613b      	str	r3, [r7, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80030a6:	2300      	movs	r3, #0
  }
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3728      	adds	r7, #40	@ 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030c0:	f7fe fa10 	bl	80014e4 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	4413      	add	r3, r2
 80030ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030d0:	f7fe fa08 	bl	80014e4 <HAL_GetTick>
 80030d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030d6:	4b39      	ldr	r3, [pc, #228]	@ (80031bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	015b      	lsls	r3, r3, #5
 80030dc:	0d1b      	lsrs	r3, r3, #20
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030e6:	e054      	b.n	8003192 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ee:	d050      	beq.n	8003192 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030f0:	f7fe f9f8 	bl	80014e4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d902      	bls.n	8003106 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d13d      	bne.n	8003182 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003114:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800311e:	d111      	bne.n	8003144 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003128:	d004      	beq.n	8003134 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003132:	d107      	bne.n	8003144 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003142:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800314c:	d10f      	bne.n	800316e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800316c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e017      	b.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	3b01      	subs	r3, #1
 8003190:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d19b      	bne.n	80030e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000004 	.word	0x20000004

080031c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2201      	movs	r2, #1
 80031d4:	2102      	movs	r1, #2
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f7ff ff6a 	bl	80030b0 <SPI_WaitFlagStateUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e6:	f043 0220 	orr.w	r2, r3, #32
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e032      	b.n	8003258 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80031f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003260 <SPI_EndRxTxTransaction+0xa0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003264 <SPI_EndRxTxTransaction+0xa4>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	0d5b      	lsrs	r3, r3, #21
 80031fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003210:	d112      	bne.n	8003238 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2200      	movs	r2, #0
 800321a:	2180      	movs	r1, #128	@ 0x80
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f7ff ff47 	bl	80030b0 <SPI_WaitFlagStateUntilTimeout>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d016      	beq.n	8003256 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e00f      	b.n	8003258 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	3b01      	subs	r3, #1
 8003242:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324e:	2b80      	cmp	r3, #128	@ 0x80
 8003250:	d0f2      	beq.n	8003238 <SPI_EndRxTxTransaction+0x78>
 8003252:	e000      	b.n	8003256 <SPI_EndRxTxTransaction+0x96>
        break;
 8003254:	bf00      	nop
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000004 	.word	0x20000004
 8003264:	165e9f81 	.word	0x165e9f81

08003268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e042      	b.n	8003300 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd fe8c 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2224      	movs	r2, #36	@ 0x24
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f973 	bl	8003598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	@ 0x28
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b20      	cmp	r3, #32
 8003326:	d175      	bne.n	8003414 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_UART_Transmit+0x2c>
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e06e      	b.n	8003416 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2221      	movs	r2, #33	@ 0x21
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003346:	f7fe f8cd 	bl	80014e4 <HAL_GetTick>
 800334a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	88fa      	ldrh	r2, [r7, #6]
 8003350:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003360:	d108      	bne.n	8003374 <HAL_UART_Transmit+0x6c>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d104      	bne.n	8003374 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	e003      	b.n	800337c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800337c:	e02e      	b.n	80033dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	2180      	movs	r1, #128	@ 0x80
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f848 	bl	800341e <UART_WaitOnFlagUntilTimeout>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e03a      	b.n	8003416 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	3302      	adds	r3, #2
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	e007      	b.n	80033ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3301      	adds	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3b01      	subs	r3, #1
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1cb      	bne.n	800337e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2200      	movs	r2, #0
 80033ee:	2140      	movs	r1, #64	@ 0x40
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f814 	bl	800341e <UART_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e006      	b.n	8003416 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b086      	sub	sp, #24
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800342e:	e03b      	b.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d037      	beq.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003438:	f7fe f854 	bl	80014e4 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	429a      	cmp	r2, r3
 8003446:	d302      	bcc.n	800344e <UART_WaitOnFlagUntilTimeout+0x30>
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e03a      	b.n	80034c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d023      	beq.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b80      	cmp	r3, #128	@ 0x80
 8003464:	d020      	beq.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b40      	cmp	r3, #64	@ 0x40
 800346a:	d01d      	beq.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b08      	cmp	r3, #8
 8003478:	d116      	bne.n	80034a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f81d 	bl	80034d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2208      	movs	r2, #8
 800349a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e00f      	b.n	80034c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4013      	ands	r3, r2
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d0b4      	beq.n	8003430 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b095      	sub	sp, #84	@ 0x54
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80034fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e5      	bne.n	80034d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3314      	adds	r3, #20
 8003512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	61fb      	str	r3, [r7, #28]
   return(result);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3314      	adds	r3, #20
 800352a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800352c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800352e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e5      	bne.n	800350c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003544:	2b01      	cmp	r3, #1
 8003546:	d119      	bne.n	800357c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	e853 3f00 	ldrex	r3, [r3]
 8003556:	60bb      	str	r3, [r7, #8]
   return(result);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f023 0310 	bic.w	r3, r3, #16
 800355e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	330c      	adds	r3, #12
 8003566:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003568:	61ba      	str	r2, [r7, #24]
 800356a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356c:	6979      	ldr	r1, [r7, #20]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	e841 2300 	strex	r3, r2, [r1]
 8003574:	613b      	str	r3, [r7, #16]
   return(result);
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e5      	bne.n	8003548 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800358a:	bf00      	nop
 800358c:	3754      	adds	r7, #84	@ 0x54
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800359c:	b0c0      	sub	sp, #256	@ 0x100
 800359e:	af00      	add	r7, sp, #0
 80035a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b4:	68d9      	ldr	r1, [r3, #12]
 80035b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	ea40 0301 	orr.w	r3, r0, r1
 80035c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80035f0:	f021 010c 	bic.w	r1, r1, #12
 80035f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80035fe:	430b      	orrs	r3, r1
 8003600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800360e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003612:	6999      	ldr	r1, [r3, #24]
 8003614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	ea40 0301 	orr.w	r3, r0, r1
 800361e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	4b8f      	ldr	r3, [pc, #572]	@ (8003864 <UART_SetConfig+0x2cc>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d005      	beq.n	8003638 <UART_SetConfig+0xa0>
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4b8d      	ldr	r3, [pc, #564]	@ (8003868 <UART_SetConfig+0x2d0>)
 8003634:	429a      	cmp	r2, r3
 8003636:	d104      	bne.n	8003642 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003638:	f7fe fd5e 	bl	80020f8 <HAL_RCC_GetPCLK2Freq>
 800363c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003640:	e003      	b.n	800364a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003642:	f7fe fd45 	bl	80020d0 <HAL_RCC_GetPCLK1Freq>
 8003646:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003654:	f040 810c 	bne.w	8003870 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800365c:	2200      	movs	r2, #0
 800365e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003662:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800366a:	4622      	mov	r2, r4
 800366c:	462b      	mov	r3, r5
 800366e:	1891      	adds	r1, r2, r2
 8003670:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003672:	415b      	adcs	r3, r3
 8003674:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800367a:	4621      	mov	r1, r4
 800367c:	eb12 0801 	adds.w	r8, r2, r1
 8003680:	4629      	mov	r1, r5
 8003682:	eb43 0901 	adc.w	r9, r3, r1
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800369a:	4690      	mov	r8, r2
 800369c:	4699      	mov	r9, r3
 800369e:	4623      	mov	r3, r4
 80036a0:	eb18 0303 	adds.w	r3, r8, r3
 80036a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036a8:	462b      	mov	r3, r5
 80036aa:	eb49 0303 	adc.w	r3, r9, r3
 80036ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80036c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80036c6:	460b      	mov	r3, r1
 80036c8:	18db      	adds	r3, r3, r3
 80036ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80036cc:	4613      	mov	r3, r2
 80036ce:	eb42 0303 	adc.w	r3, r2, r3
 80036d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80036d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80036d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80036dc:	f7fc fe50 	bl	8000380 <__aeabi_uldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4b61      	ldr	r3, [pc, #388]	@ (800386c <UART_SetConfig+0x2d4>)
 80036e6:	fba3 2302 	umull	r2, r3, r3, r2
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	011c      	lsls	r4, r3, #4
 80036ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80036fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003700:	4642      	mov	r2, r8
 8003702:	464b      	mov	r3, r9
 8003704:	1891      	adds	r1, r2, r2
 8003706:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003708:	415b      	adcs	r3, r3
 800370a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800370c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003710:	4641      	mov	r1, r8
 8003712:	eb12 0a01 	adds.w	sl, r2, r1
 8003716:	4649      	mov	r1, r9
 8003718:	eb43 0b01 	adc.w	fp, r3, r1
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003728:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800372c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003730:	4692      	mov	sl, r2
 8003732:	469b      	mov	fp, r3
 8003734:	4643      	mov	r3, r8
 8003736:	eb1a 0303 	adds.w	r3, sl, r3
 800373a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800373e:	464b      	mov	r3, r9
 8003740:	eb4b 0303 	adc.w	r3, fp, r3
 8003744:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003754:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003758:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800375c:	460b      	mov	r3, r1
 800375e:	18db      	adds	r3, r3, r3
 8003760:	643b      	str	r3, [r7, #64]	@ 0x40
 8003762:	4613      	mov	r3, r2
 8003764:	eb42 0303 	adc.w	r3, r2, r3
 8003768:	647b      	str	r3, [r7, #68]	@ 0x44
 800376a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800376e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003772:	f7fc fe05 	bl	8000380 <__aeabi_uldivmod>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4611      	mov	r1, r2
 800377c:	4b3b      	ldr	r3, [pc, #236]	@ (800386c <UART_SetConfig+0x2d4>)
 800377e:	fba3 2301 	umull	r2, r3, r3, r1
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	2264      	movs	r2, #100	@ 0x64
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	1acb      	subs	r3, r1, r3
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003792:	4b36      	ldr	r3, [pc, #216]	@ (800386c <UART_SetConfig+0x2d4>)
 8003794:	fba3 2302 	umull	r2, r3, r3, r2
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80037a0:	441c      	add	r4, r3
 80037a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037a6:	2200      	movs	r2, #0
 80037a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80037b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80037b4:	4642      	mov	r2, r8
 80037b6:	464b      	mov	r3, r9
 80037b8:	1891      	adds	r1, r2, r2
 80037ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80037bc:	415b      	adcs	r3, r3
 80037be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80037c4:	4641      	mov	r1, r8
 80037c6:	1851      	adds	r1, r2, r1
 80037c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80037ca:	4649      	mov	r1, r9
 80037cc:	414b      	adcs	r3, r1
 80037ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80037dc:	4659      	mov	r1, fp
 80037de:	00cb      	lsls	r3, r1, #3
 80037e0:	4651      	mov	r1, sl
 80037e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e6:	4651      	mov	r1, sl
 80037e8:	00ca      	lsls	r2, r1, #3
 80037ea:	4610      	mov	r0, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	4642      	mov	r2, r8
 80037f2:	189b      	adds	r3, r3, r2
 80037f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037f8:	464b      	mov	r3, r9
 80037fa:	460a      	mov	r2, r1
 80037fc:	eb42 0303 	adc.w	r3, r2, r3
 8003800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003810:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003818:	460b      	mov	r3, r1
 800381a:	18db      	adds	r3, r3, r3
 800381c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800381e:	4613      	mov	r3, r2
 8003820:	eb42 0303 	adc.w	r3, r2, r3
 8003824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800382a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800382e:	f7fc fda7 	bl	8000380 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4b0d      	ldr	r3, [pc, #52]	@ (800386c <UART_SetConfig+0x2d4>)
 8003838:	fba3 1302 	umull	r1, r3, r3, r2
 800383c:	095b      	lsrs	r3, r3, #5
 800383e:	2164      	movs	r1, #100	@ 0x64
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	3332      	adds	r3, #50	@ 0x32
 800384a:	4a08      	ldr	r2, [pc, #32]	@ (800386c <UART_SetConfig+0x2d4>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	f003 0207 	and.w	r2, r3, #7
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4422      	add	r2, r4
 800385e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003860:	e106      	b.n	8003a70 <UART_SetConfig+0x4d8>
 8003862:	bf00      	nop
 8003864:	40011000 	.word	0x40011000
 8003868:	40011400 	.word	0x40011400
 800386c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003874:	2200      	movs	r2, #0
 8003876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800387a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800387e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003882:	4642      	mov	r2, r8
 8003884:	464b      	mov	r3, r9
 8003886:	1891      	adds	r1, r2, r2
 8003888:	6239      	str	r1, [r7, #32]
 800388a:	415b      	adcs	r3, r3
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
 800388e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003892:	4641      	mov	r1, r8
 8003894:	1854      	adds	r4, r2, r1
 8003896:	4649      	mov	r1, r9
 8003898:	eb43 0501 	adc.w	r5, r3, r1
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	00eb      	lsls	r3, r5, #3
 80038a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038aa:	00e2      	lsls	r2, r4, #3
 80038ac:	4614      	mov	r4, r2
 80038ae:	461d      	mov	r5, r3
 80038b0:	4643      	mov	r3, r8
 80038b2:	18e3      	adds	r3, r4, r3
 80038b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038b8:	464b      	mov	r3, r9
 80038ba:	eb45 0303 	adc.w	r3, r5, r3
 80038be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80038de:	4629      	mov	r1, r5
 80038e0:	008b      	lsls	r3, r1, #2
 80038e2:	4621      	mov	r1, r4
 80038e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038e8:	4621      	mov	r1, r4
 80038ea:	008a      	lsls	r2, r1, #2
 80038ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80038f0:	f7fc fd46 	bl	8000380 <__aeabi_uldivmod>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4b60      	ldr	r3, [pc, #384]	@ (8003a7c <UART_SetConfig+0x4e4>)
 80038fa:	fba3 2302 	umull	r2, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	011c      	lsls	r4, r3, #4
 8003902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003906:	2200      	movs	r2, #0
 8003908:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800390c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003910:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003914:	4642      	mov	r2, r8
 8003916:	464b      	mov	r3, r9
 8003918:	1891      	adds	r1, r2, r2
 800391a:	61b9      	str	r1, [r7, #24]
 800391c:	415b      	adcs	r3, r3
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003924:	4641      	mov	r1, r8
 8003926:	1851      	adds	r1, r2, r1
 8003928:	6139      	str	r1, [r7, #16]
 800392a:	4649      	mov	r1, r9
 800392c:	414b      	adcs	r3, r1
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800393c:	4659      	mov	r1, fp
 800393e:	00cb      	lsls	r3, r1, #3
 8003940:	4651      	mov	r1, sl
 8003942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003946:	4651      	mov	r1, sl
 8003948:	00ca      	lsls	r2, r1, #3
 800394a:	4610      	mov	r0, r2
 800394c:	4619      	mov	r1, r3
 800394e:	4603      	mov	r3, r0
 8003950:	4642      	mov	r2, r8
 8003952:	189b      	adds	r3, r3, r2
 8003954:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003958:	464b      	mov	r3, r9
 800395a:	460a      	mov	r2, r1
 800395c:	eb42 0303 	adc.w	r3, r2, r3
 8003960:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800396e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800397c:	4649      	mov	r1, r9
 800397e:	008b      	lsls	r3, r1, #2
 8003980:	4641      	mov	r1, r8
 8003982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003986:	4641      	mov	r1, r8
 8003988:	008a      	lsls	r2, r1, #2
 800398a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800398e:	f7fc fcf7 	bl	8000380 <__aeabi_uldivmod>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4611      	mov	r1, r2
 8003998:	4b38      	ldr	r3, [pc, #224]	@ (8003a7c <UART_SetConfig+0x4e4>)
 800399a:	fba3 2301 	umull	r2, r3, r3, r1
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	2264      	movs	r2, #100	@ 0x64
 80039a2:	fb02 f303 	mul.w	r3, r2, r3
 80039a6:	1acb      	subs	r3, r1, r3
 80039a8:	011b      	lsls	r3, r3, #4
 80039aa:	3332      	adds	r3, #50	@ 0x32
 80039ac:	4a33      	ldr	r2, [pc, #204]	@ (8003a7c <UART_SetConfig+0x4e4>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039b8:	441c      	add	r4, r3
 80039ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039be:	2200      	movs	r2, #0
 80039c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80039c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80039c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80039c8:	4642      	mov	r2, r8
 80039ca:	464b      	mov	r3, r9
 80039cc:	1891      	adds	r1, r2, r2
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	415b      	adcs	r3, r3
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039d8:	4641      	mov	r1, r8
 80039da:	1851      	adds	r1, r2, r1
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	4649      	mov	r1, r9
 80039e0:	414b      	adcs	r3, r1
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039f0:	4659      	mov	r1, fp
 80039f2:	00cb      	lsls	r3, r1, #3
 80039f4:	4651      	mov	r1, sl
 80039f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039fa:	4651      	mov	r1, sl
 80039fc:	00ca      	lsls	r2, r1, #3
 80039fe:	4610      	mov	r0, r2
 8003a00:	4619      	mov	r1, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	4642      	mov	r2, r8
 8003a06:	189b      	adds	r3, r3, r2
 8003a08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	460a      	mov	r2, r1
 8003a0e:	eb42 0303 	adc.w	r3, r2, r3
 8003a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003a2c:	4649      	mov	r1, r9
 8003a2e:	008b      	lsls	r3, r1, #2
 8003a30:	4641      	mov	r1, r8
 8003a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a36:	4641      	mov	r1, r8
 8003a38:	008a      	lsls	r2, r1, #2
 8003a3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003a3e:	f7fc fc9f 	bl	8000380 <__aeabi_uldivmod>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <UART_SetConfig+0x4e4>)
 8003a48:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	2164      	movs	r1, #100	@ 0x64
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	3332      	adds	r3, #50	@ 0x32
 8003a5a:	4a08      	ldr	r2, [pc, #32]	@ (8003a7c <UART_SetConfig+0x4e4>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	f003 020f 	and.w	r2, r3, #15
 8003a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4422      	add	r2, r4
 8003a6e:	609a      	str	r2, [r3, #8]
}
 8003a70:	bf00      	nop
 8003a72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003a76:	46bd      	mov	sp, r7
 8003a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a7c:	51eb851f 	.word	0x51eb851f

08003a80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a80:	b084      	sub	sp, #16
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	f107 001c 	add.w	r0, r7, #28
 8003a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d123      	bne.n	8003ae2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d105      	bne.n	8003ad6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fa9a 	bl	8004010 <USB_CoreReset>
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]
 8003ae0:	e01b      	b.n	8003b1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa8e 	bl	8004010 <USB_CoreReset>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003af8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b0c:	e005      	b.n	8003b1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b1a:	7fbb      	ldrb	r3, [r7, #30]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10b      	bne.n	8003b38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f043 0206 	orr.w	r2, r3, #6
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b44:	b004      	add	sp, #16
 8003b46:	4770      	bx	lr

08003b48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f023 0201 	bic.w	r2, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d115      	bne.n	8003bb8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b98:	200a      	movs	r0, #10
 8003b9a:	f7fd fcaf 	bl	80014fc <HAL_Delay>
      ms += 10U;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	330a      	adds	r3, #10
 8003ba2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fa25 	bl	8003ff4 <USB_GetMode>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d01e      	beq.n	8003bee <USB_SetCurrentMode+0x84>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2bc7      	cmp	r3, #199	@ 0xc7
 8003bb4:	d9f0      	bls.n	8003b98 <USB_SetCurrentMode+0x2e>
 8003bb6:	e01a      	b.n	8003bee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d115      	bne.n	8003bea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003bca:	200a      	movs	r0, #10
 8003bcc:	f7fd fc96 	bl	80014fc <HAL_Delay>
      ms += 10U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	330a      	adds	r3, #10
 8003bd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fa0c 	bl	8003ff4 <USB_GetMode>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <USB_SetCurrentMode+0x84>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2bc7      	cmp	r3, #199	@ 0xc7
 8003be6:	d9f0      	bls.n	8003bca <USB_SetCurrentMode+0x60>
 8003be8:	e001      	b.n	8003bee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e005      	b.n	8003bfa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2bc8      	cmp	r3, #200	@ 0xc8
 8003bf2:	d101      	bne.n	8003bf8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
	...

08003c04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c04:	b084      	sub	sp, #16
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	e009      	b.n	8003c38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	3340      	adds	r3, #64	@ 0x40
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	2200      	movs	r2, #0
 8003c30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	3301      	adds	r3, #1
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b0e      	cmp	r3, #14
 8003c3c:	d9f2      	bls.n	8003c24 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d11c      	bne.n	8003c80 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c54:	f043 0302 	orr.w	r3, r3, #2
 8003c58:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	e005      	b.n	8003c8c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c84:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003c92:	461a      	mov	r2, r3
 8003c94:	2300      	movs	r3, #0
 8003c96:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c98:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d10d      	bne.n	8003cbc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d104      	bne.n	8003cb2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ca8:	2100      	movs	r1, #0
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f968 	bl	8003f80 <USB_SetDevSpeed>
 8003cb0:	e008      	b.n	8003cc4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f963 	bl	8003f80 <USB_SetDevSpeed>
 8003cba:	e003      	b.n	8003cc4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003cbc:	2103      	movs	r1, #3
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 f95e 	bl	8003f80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003cc4:	2110      	movs	r1, #16
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f8fa 	bl	8003ec0 <USB_FlushTxFifo>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f924 	bl	8003f24 <USB_FlushRxFifo>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cec:	461a      	mov	r2, r3
 8003cee:	2300      	movs	r3, #0
 8003cf0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d04:	461a      	mov	r2, r3
 8003d06:	2300      	movs	r3, #0
 8003d08:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	e043      	b.n	8003d98 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d26:	d118      	bne.n	8003d5a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e013      	b.n	8003d6c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d50:	461a      	mov	r2, r3
 8003d52:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	e008      	b.n	8003d6c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d66:	461a      	mov	r2, r3
 8003d68:	2300      	movs	r3, #0
 8003d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	3301      	adds	r3, #1
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d3b5      	bcc.n	8003d10 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003da4:	2300      	movs	r3, #0
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	e043      	b.n	8003e32 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003dc0:	d118      	bne.n	8003df4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	e013      	b.n	8003e06 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dea:	461a      	mov	r2, r3
 8003dec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e008      	b.n	8003e06 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e00:	461a      	mov	r2, r3
 8003e02:	2300      	movs	r3, #0
 8003e04:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e12:	461a      	mov	r2, r3
 8003e14:	2300      	movs	r3, #0
 8003e16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e24:	461a      	mov	r2, r3
 8003e26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003e36:	461a      	mov	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d3b5      	bcc.n	8003daa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e50:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003e5e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d105      	bne.n	8003e74 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f043 0210 	orr.w	r2, r3, #16
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699a      	ldr	r2, [r3, #24]
 8003e78:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <USB_DevInit+0x2b8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f043 0208 	orr.w	r2, r3, #8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d107      	bne.n	8003eac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ea4:	f043 0304 	orr.w	r3, r3, #4
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003eb8:	b004      	add	sp, #16
 8003eba:	4770      	bx	lr
 8003ebc:	803c3800 	.word	0x803c3800

08003ec0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003eda:	d901      	bls.n	8003ee0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e01b      	b.n	8003f18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	daf2      	bge.n	8003ece <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	019b      	lsls	r3, r3, #6
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3301      	adds	r3, #1
 8003efc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f04:	d901      	bls.n	8003f0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e006      	b.n	8003f18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d0f0      	beq.n	8003ef8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3301      	adds	r3, #1
 8003f34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f3c:	d901      	bls.n	8003f42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e018      	b.n	8003f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	daf2      	bge.n	8003f30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2210      	movs	r2, #16
 8003f52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3301      	adds	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003f60:	d901      	bls.n	8003f66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e006      	b.n	8003f74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d0f0      	beq.n	8003f54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	68f9      	ldr	r1, [r7, #12]
 8003f9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b085      	sub	sp, #20
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003fcc:	f023 0303 	bic.w	r3, r3, #3
 8003fd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fe0:	f043 0302 	orr.w	r3, r3, #2
 8003fe4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f003 0301 	and.w	r3, r3, #1
}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3301      	adds	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004028:	d901      	bls.n	800402e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e01b      	b.n	8004066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	daf2      	bge.n	800401c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f043 0201 	orr.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	3301      	adds	r3, #1
 800404a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004052:	d901      	bls.n	8004058 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e006      	b.n	8004066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d0f0      	beq.n	8004046 <USB_CoreReset+0x36>

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004078:	4904      	ldr	r1, [pc, #16]	@ (800408c <MX_FATFS_Init+0x18>)
 800407a:	4805      	ldr	r0, [pc, #20]	@ (8004090 <MX_FATFS_Init+0x1c>)
 800407c:	f003 fff8 	bl	8008070 <FATFS_LinkDriver>
 8004080:	4603      	mov	r3, r0
 8004082:	461a      	mov	r2, r3
 8004084:	4b03      	ldr	r3, [pc, #12]	@ (8004094 <MX_FATFS_Init+0x20>)
 8004086:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004088:	bf00      	nop
 800408a:	bd80      	pop	{r7, pc}
 800408c:	200007dc 	.word	0x200007dc
 8004090:	20000010 	.word	0x20000010
 8004094:	200007d8 	.word	0x200007d8

08004098 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800409c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 f9fd 	bl	80044b4 <SD_disk_initialize>
 80040ba:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fad5 	bl	8004680 <SD_disk_status>
 80040d6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	4603      	mov	r3, r0
 80040ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80040f0:	7bf8      	ldrb	r0, [r7, #15]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	f000 fad8 	bl	80046ac <SD_disk_read>
 80040fc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	603b      	str	r3, [r7, #0]
 8004112:	4603      	mov	r3, r0
 8004114:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004116:	7bf8      	ldrb	r0, [r7, #15]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	f000 fb2f 	bl	8004780 <SD_disk_write>
 8004122:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	603a      	str	r2, [r7, #0]
 8004136:	71fb      	strb	r3, [r7, #7]
 8004138:	460b      	mov	r3, r1
 800413a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800413c:	79b9      	ldrb	r1, [r7, #6]
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fba0 	bl	8004888 <SD_disk_ioctl>
 8004148:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <SELECT>:
//-----[ SPI Functions ]-----

//cs is active when 0!!!
/* slave select */
static void SELECT(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8004158:	2200      	movs	r2, #0
 800415a:	2110      	movs	r1, #16
 800415c:	4802      	ldr	r0, [pc, #8]	@ (8004168 <SELECT+0x14>)
 800415e:	f7fd fc6b 	bl	8001a38 <HAL_GPIO_WritePin>
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40020000 	.word	0x40020000

0800416c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004170:	2201      	movs	r2, #1
 8004172:	2110      	movs	r1, #16
 8004174:	4802      	ldr	r0, [pc, #8]	@ (8004180 <DESELECT+0x14>)
 8004176:	f7fd fc5f 	bl	8001a38 <HAL_GPIO_WritePin>
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40020000 	.word	0x40020000

08004184 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800418e:	bf00      	nop
 8004190:	4b08      	ldr	r3, [pc, #32]	@ (80041b4 <SPI_TxByte+0x30>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d1f8      	bne.n	8004190 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800419e:	1df9      	adds	r1, r7, #7
 80041a0:	2364      	movs	r3, #100	@ 0x64
 80041a2:	2201      	movs	r2, #1
 80041a4:	4803      	ldr	r0, [pc, #12]	@ (80041b4 <SPI_TxByte+0x30>)
 80041a6:	f7fe fc96 	bl	8002ad6 <HAL_SPI_Transmit>
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000104 	.word	0x20000104

080041b8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80041c4:	bf00      	nop
 80041c6:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <SPI_TxBuffer+0x30>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d1f8      	bne.n	80041c6 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80041d4:	887a      	ldrh	r2, [r7, #2]
 80041d6:	2364      	movs	r3, #100	@ 0x64
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4803      	ldr	r0, [pc, #12]	@ (80041e8 <SPI_TxBuffer+0x30>)
 80041dc:	f7fe fc7b 	bl	8002ad6 <HAL_SPI_Transmit>
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20000104 	.word	0x20000104

080041ec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80041f2:	23ff      	movs	r3, #255	@ 0xff
 80041f4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80041f6:	bf00      	nop
 80041f8:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <SPI_RxByte+0x34>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d1f8      	bne.n	80041f8 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8004206:	1dba      	adds	r2, r7, #6
 8004208:	1df9      	adds	r1, r7, #7
 800420a:	2364      	movs	r3, #100	@ 0x64
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	2301      	movs	r3, #1
 8004210:	4803      	ldr	r0, [pc, #12]	@ (8004220 <SPI_RxByte+0x34>)
 8004212:	f7fe fda4 	bl	8002d5e <HAL_SPI_TransmitReceive>
  return data;
 8004216:	79bb      	ldrb	r3, [r7, #6]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000104 	.word	0x20000104

08004224 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800422c:	f7ff ffde 	bl	80041ec <SPI_RxByte>
 8004230:	4603      	mov	r3, r0
 8004232:	461a      	mov	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	701a      	strb	r2, [r3, #0]
}
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8004246:	4b0a      	ldr	r3, [pc, #40]	@ (8004270 <SD_ReadyWait+0x30>)
 8004248:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800424c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800424e:	f7ff ffcd 	bl	80041ec <SPI_RxByte>
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	2bff      	cmp	r3, #255	@ 0xff
 800425a:	d003      	beq.n	8004264 <SD_ReadyWait+0x24>
 800425c:	4b04      	ldr	r3, [pc, #16]	@ (8004270 <SD_ReadyWait+0x30>)
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f4      	bne.n	800424e <SD_ReadyWait+0xe>
  return res;
 8004264:	79fb      	ldrb	r3, [r7, #7]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	200007e2 	.word	0x200007e2

08004274 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800427a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800427e:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8004280:	f7ff ff74 	bl	800416c <DESELECT>
  for(int i = 0; i < 10; i++)
 8004284:	2300      	movs	r3, #0
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	e005      	b.n	8004296 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800428a:	20ff      	movs	r0, #255	@ 0xff
 800428c:	f7ff ff7a 	bl	8004184 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	3301      	adds	r3, #1
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b09      	cmp	r3, #9
 800429a:	ddf6      	ble.n	800428a <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800429c:	f7ff ff5a 	bl	8004154 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80042a0:	2340      	movs	r3, #64	@ 0x40
 80042a2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 80042b4:	2395      	movs	r3, #149	@ 0x95
 80042b6:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 80042b8:	463b      	mov	r3, r7
 80042ba:	2106      	movs	r1, #6
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff ff7b 	bl	80041b8 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80042c2:	e002      	b.n	80042ca <SD_PowerOn+0x56>
  {
    cnt--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80042ca:	f7ff ff8f 	bl	80041ec <SPI_RxByte>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d002      	beq.n	80042da <SD_PowerOn+0x66>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f4      	bne.n	80042c4 <SD_PowerOn+0x50>
  }
  DESELECT();
 80042da:	f7ff ff47 	bl	800416c <DESELECT>
  SPI_TxByte(0XFF);
 80042de:	20ff      	movs	r0, #255	@ 0xff
 80042e0:	f7ff ff50 	bl	8004184 <SPI_TxByte>
  PowerFlag = 1;
 80042e4:	4b03      	ldr	r3, [pc, #12]	@ (80042f4 <SD_PowerOn+0x80>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200007e5 	.word	0x200007e5

080042f8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80042fc:	4b03      	ldr	r3, [pc, #12]	@ (800430c <SD_PowerOff+0x14>)
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
}
 8004302:	bf00      	nop
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	200007e5 	.word	0x200007e5

08004310 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return PowerFlag;
 8004314:	4b03      	ldr	r3, [pc, #12]	@ (8004324 <SD_CheckPower+0x14>)
 8004316:	781b      	ldrb	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	200007e5 	.word	0x200007e5

08004328 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8004332:	4b13      	ldr	r3, [pc, #76]	@ (8004380 <SD_RxDataBlock+0x58>)
 8004334:	22c8      	movs	r2, #200	@ 0xc8
 8004336:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8004338:	f7ff ff58 	bl	80041ec <SPI_RxByte>
 800433c:	4603      	mov	r3, r0
 800433e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2bff      	cmp	r3, #255	@ 0xff
 8004344:	d103      	bne.n	800434e <SD_RxDataBlock+0x26>
 8004346:	4b0e      	ldr	r3, [pc, #56]	@ (8004380 <SD_RxDataBlock+0x58>)
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f4      	bne.n	8004338 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2bfe      	cmp	r3, #254	@ 0xfe
 8004352:	d001      	beq.n	8004358 <SD_RxDataBlock+0x30>
 8004354:	2300      	movs	r3, #0
 8004356:	e00f      	b.n	8004378 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	607a      	str	r2, [r7, #4]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff ff60 	bl	8004224 <SPI_RxBytePtr>
  } while(len--);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	1e5a      	subs	r2, r3, #1
 8004368:	603a      	str	r2, [r7, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f4      	bne.n	8004358 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800436e:	f7ff ff3d 	bl	80041ec <SPI_RxByte>
  SPI_RxByte();
 8004372:	f7ff ff3b 	bl	80041ec <SPI_RxByte>
  return TRUE;
 8004376:	2301      	movs	r3, #1
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	200007e0 	.word	0x200007e0

08004384 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8004394:	f7ff ff54 	bl	8004240 <SD_ReadyWait>
 8004398:	4603      	mov	r3, r0
 800439a:	2bff      	cmp	r3, #255	@ 0xff
 800439c:	d001      	beq.n	80043a2 <SD_TxDataBlock+0x1e>
 800439e:	2300      	movs	r3, #0
 80043a0:	e02f      	b.n	8004402 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff feed 	bl	8004184 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	2bfd      	cmp	r3, #253	@ 0xfd
 80043ae:	d020      	beq.n	80043f2 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80043b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff feff 	bl	80041b8 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 80043ba:	f7ff ff17 	bl	80041ec <SPI_RxByte>
    SPI_RxByte();
 80043be:	f7ff ff15 	bl	80041ec <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 80043c2:	e00b      	b.n	80043dc <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80043c4:	f7ff ff12 	bl	80041ec <SPI_RxByte>
 80043c8:	4603      	mov	r3, r0
 80043ca:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	f003 031f 	and.w	r3, r3, #31
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d006      	beq.n	80043e4 <SD_TxDataBlock+0x60>
      i++;
 80043d6:	7bbb      	ldrb	r3, [r7, #14]
 80043d8:	3301      	adds	r3, #1
 80043da:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 80043dc:	7bbb      	ldrb	r3, [r7, #14]
 80043de:	2b40      	cmp	r3, #64	@ 0x40
 80043e0:	d9f0      	bls.n	80043c4 <SD_TxDataBlock+0x40>
 80043e2:	e000      	b.n	80043e6 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 80043e4:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 80043e6:	bf00      	nop
 80043e8:	f7ff ff00 	bl	80041ec <SPI_RxByte>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0fa      	beq.n	80043e8 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	2b05      	cmp	r3, #5
 80043fa:	d101      	bne.n	8004400 <SD_TxDataBlock+0x7c>
 80043fc:	2301      	movs	r3, #1
 80043fe:	e000      	b.n	8004402 <SD_TxDataBlock+0x7e>

  return FALSE;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	4603      	mov	r3, r0
 8004412:	6039      	str	r1, [r7, #0]
 8004414:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8004416:	f7ff ff13 	bl	8004240 <SD_ReadyWait>
 800441a:	4603      	mov	r3, r0
 800441c:	2bff      	cmp	r3, #255	@ 0xff
 800441e:	d001      	beq.n	8004424 <SD_SendCmd+0x1a>
 8004420:	23ff      	movs	r3, #255	@ 0xff
 8004422:	e042      	b.n	80044aa <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff feac 	bl	8004184 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	0e1b      	lsrs	r3, r3, #24
 8004430:	b2db      	uxtb	r3, r3
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fea6 	bl	8004184 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	0c1b      	lsrs	r3, r3, #16
 800443c:	b2db      	uxtb	r3, r3
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff fea0 	bl	8004184 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	b2db      	uxtb	r3, r3
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fe9a 	bl	8004184 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fe95 	bl	8004184 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	2b40      	cmp	r3, #64	@ 0x40
 800445e:	d102      	bne.n	8004466 <SD_SendCmd+0x5c>
 8004460:	2395      	movs	r3, #149	@ 0x95
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	e007      	b.n	8004476 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	2b48      	cmp	r3, #72	@ 0x48
 800446a:	d102      	bne.n	8004472 <SD_SendCmd+0x68>
 800446c:	2387      	movs	r3, #135	@ 0x87
 800446e:	73fb      	strb	r3, [r7, #15]
 8004470:	e001      	b.n	8004476 <SD_SendCmd+0x6c>
  else crc = 1;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fe83 	bl	8004184 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	2b4c      	cmp	r3, #76	@ 0x4c
 8004482:	d101      	bne.n	8004488 <SD_SendCmd+0x7e>
 8004484:	f7ff feb2 	bl	80041ec <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8004488:	230a      	movs	r3, #10
 800448a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800448c:	f7ff feae 	bl	80041ec <SPI_RxByte>
 8004490:	4603      	mov	r3, r0
 8004492:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8004494:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004498:	2b00      	cmp	r3, #0
 800449a:	da05      	bge.n	80044a8 <SD_SendCmd+0x9e>
 800449c:	7bbb      	ldrb	r3, [r7, #14]
 800449e:	3b01      	subs	r3, #1
 80044a0:	73bb      	strb	r3, [r7, #14]
 80044a2:	7bbb      	ldrb	r3, [r7, #14]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1f1      	bne.n	800448c <SD_SendCmd+0x82>

  return res;
 80044a8:	7b7b      	ldrb	r3, [r7, #13]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <SD_disk_initialize+0x14>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0d1      	b.n	800466c <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80044c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004674 <SD_disk_initialize+0x1c0>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <SD_disk_initialize+0x2a>
 80044d6:	4b67      	ldr	r3, [pc, #412]	@ (8004674 <SD_disk_initialize+0x1c0>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	e0c6      	b.n	800466c <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 80044de:	f7ff fec9 	bl	8004274 <SD_PowerOn>
  /* slave select */
  SELECT();
 80044e2:	f7ff fe37 	bl	8004154 <SELECT>
  /* check disk type */
  type = 0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 80044ea:	2100      	movs	r1, #0
 80044ec:	2040      	movs	r0, #64	@ 0x40
 80044ee:	f7ff ff8c 	bl	800440a <SD_SendCmd>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	f040 80a1 	bne.w	800463c <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80044fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004678 <SD_disk_initialize+0x1c4>)
 80044fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004500:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8004502:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8004506:	2048      	movs	r0, #72	@ 0x48
 8004508:	f7ff ff7f 	bl	800440a <SD_SendCmd>
 800450c:	4603      	mov	r3, r0
 800450e:	2b01      	cmp	r3, #1
 8004510:	d155      	bne.n	80045be <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
 8004516:	e00c      	b.n	8004532 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8004518:	7bfc      	ldrb	r4, [r7, #15]
 800451a:	f7ff fe67 	bl	80041ec <SPI_RxByte>
 800451e:	4603      	mov	r3, r0
 8004520:	461a      	mov	r2, r3
 8004522:	f104 0310 	add.w	r3, r4, #16
 8004526:	443b      	add	r3, r7
 8004528:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	3301      	adds	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d9ef      	bls.n	8004518 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8004538:	7abb      	ldrb	r3, [r7, #10]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d17e      	bne.n	800463c <SD_disk_initialize+0x188>
 800453e:	7afb      	ldrb	r3, [r7, #11]
 8004540:	2baa      	cmp	r3, #170	@ 0xaa
 8004542:	d17b      	bne.n	800463c <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004544:	2100      	movs	r1, #0
 8004546:	2077      	movs	r0, #119	@ 0x77
 8004548:	f7ff ff5f 	bl	800440a <SD_SendCmd>
 800454c:	4603      	mov	r3, r0
 800454e:	2b01      	cmp	r3, #1
 8004550:	d807      	bhi.n	8004562 <SD_disk_initialize+0xae>
 8004552:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004556:	2069      	movs	r0, #105	@ 0x69
 8004558:	f7ff ff57 	bl	800440a <SD_SendCmd>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <SD_disk_initialize+0xb8>
        } while (Timer1);
 8004562:	4b45      	ldr	r3, [pc, #276]	@ (8004678 <SD_disk_initialize+0x1c4>)
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ec      	bne.n	8004544 <SD_disk_initialize+0x90>
 800456a:	e000      	b.n	800456e <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800456c:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800456e:	4b42      	ldr	r3, [pc, #264]	@ (8004678 <SD_disk_initialize+0x1c4>)
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d062      	beq.n	800463c <SD_disk_initialize+0x188>
 8004576:	2100      	movs	r1, #0
 8004578:	207a      	movs	r0, #122	@ 0x7a
 800457a:	f7ff ff46 	bl	800440a <SD_SendCmd>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d15b      	bne.n	800463c <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8004584:	2300      	movs	r3, #0
 8004586:	73fb      	strb	r3, [r7, #15]
 8004588:	e00c      	b.n	80045a4 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800458a:	7bfc      	ldrb	r4, [r7, #15]
 800458c:	f7ff fe2e 	bl	80041ec <SPI_RxByte>
 8004590:	4603      	mov	r3, r0
 8004592:	461a      	mov	r2, r3
 8004594:	f104 0310 	add.w	r3, r4, #16
 8004598:	443b      	add	r3, r7
 800459a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	3301      	adds	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d9ef      	bls.n	800458a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80045aa:	7a3b      	ldrb	r3, [r7, #8]
 80045ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <SD_disk_initialize+0x104>
 80045b4:	230c      	movs	r3, #12
 80045b6:	e000      	b.n	80045ba <SD_disk_initialize+0x106>
 80045b8:	2304      	movs	r3, #4
 80045ba:	73bb      	strb	r3, [r7, #14]
 80045bc:	e03e      	b.n	800463c <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80045be:	2100      	movs	r1, #0
 80045c0:	2077      	movs	r0, #119	@ 0x77
 80045c2:	f7ff ff22 	bl	800440a <SD_SendCmd>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d808      	bhi.n	80045de <SD_disk_initialize+0x12a>
 80045cc:	2100      	movs	r1, #0
 80045ce:	2069      	movs	r0, #105	@ 0x69
 80045d0:	f7ff ff1b 	bl	800440a <SD_SendCmd>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d801      	bhi.n	80045de <SD_disk_initialize+0x12a>
 80045da:	2302      	movs	r3, #2
 80045dc:	e000      	b.n	80045e0 <SD_disk_initialize+0x12c>
 80045de:	2301      	movs	r3, #1
 80045e0:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 80045e2:	7bbb      	ldrb	r3, [r7, #14]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d10e      	bne.n	8004606 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80045e8:	2100      	movs	r1, #0
 80045ea:	2077      	movs	r0, #119	@ 0x77
 80045ec:	f7ff ff0d 	bl	800440a <SD_SendCmd>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d80e      	bhi.n	8004614 <SD_disk_initialize+0x160>
 80045f6:	2100      	movs	r1, #0
 80045f8:	2069      	movs	r0, #105	@ 0x69
 80045fa:	f7ff ff06 	bl	800440a <SD_SendCmd>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d107      	bne.n	8004614 <SD_disk_initialize+0x160>
 8004604:	e00c      	b.n	8004620 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8004606:	2100      	movs	r1, #0
 8004608:	2041      	movs	r0, #65	@ 0x41
 800460a:	f7ff fefe 	bl	800440a <SD_SendCmd>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8004614:	4b18      	ldr	r3, [pc, #96]	@ (8004678 <SD_disk_initialize+0x1c4>)
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e2      	bne.n	80045e2 <SD_disk_initialize+0x12e>
 800461c:	e000      	b.n	8004620 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800461e:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8004620:	4b15      	ldr	r3, [pc, #84]	@ (8004678 <SD_disk_initialize+0x1c4>)
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <SD_disk_initialize+0x184>
 8004628:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800462c:	2050      	movs	r0, #80	@ 0x50
 800462e:	f7ff feec 	bl	800440a <SD_SendCmd>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <SD_disk_initialize+0x188>
 8004638:	2300      	movs	r3, #0
 800463a:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800463c:	4a0f      	ldr	r2, [pc, #60]	@ (800467c <SD_disk_initialize+0x1c8>)
 800463e:	7bbb      	ldrb	r3, [r7, #14]
 8004640:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8004642:	f7ff fd93 	bl	800416c <DESELECT>
  SPI_RxByte();
 8004646:	f7ff fdd1 	bl	80041ec <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800464a:	7bbb      	ldrb	r3, [r7, #14]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8004650:	4b08      	ldr	r3, [pc, #32]	@ (8004674 <SD_disk_initialize+0x1c0>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f023 0301 	bic.w	r3, r3, #1
 800465a:	b2da      	uxtb	r2, r3
 800465c:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <SD_disk_initialize+0x1c0>)
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e001      	b.n	8004666 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8004662:	f7ff fe49 	bl	80042f8 <SD_PowerOff>
  }
  return Stat;
 8004666:	4b03      	ldr	r3, [pc, #12]	@ (8004674 <SD_disk_initialize+0x1c0>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	b2db      	uxtb	r3, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	bd90      	pop	{r4, r7, pc}
 8004674:	20000024 	.word	0x20000024
 8004678:	200007e0 	.word	0x200007e0
 800467c:	200007e4 	.word	0x200007e4

08004680 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <SD_disk_status+0x14>
 8004690:	2301      	movs	r3, #1
 8004692:	e002      	b.n	800469a <SD_disk_status+0x1a>
  return Stat;
 8004694:	4b04      	ldr	r3, [pc, #16]	@ (80046a8 <SD_disk_status+0x28>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	b2db      	uxtb	r3, r3
}
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20000024 	.word	0x20000024

080046ac <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	603b      	str	r3, [r7, #0]
 80046b8:	4603      	mov	r3, r0
 80046ba:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <SD_disk_read+0x1c>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <SD_disk_read+0x20>
 80046c8:	2304      	movs	r3, #4
 80046ca:	e051      	b.n	8004770 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80046cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004778 <SD_disk_read+0xcc>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <SD_disk_read+0x32>
 80046da:	2303      	movs	r3, #3
 80046dc:	e048      	b.n	8004770 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80046de:	4b27      	ldr	r3, [pc, #156]	@ (800477c <SD_disk_read+0xd0>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d102      	bne.n	80046f0 <SD_disk_read+0x44>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	025b      	lsls	r3, r3, #9
 80046ee:	607b      	str	r3, [r7, #4]

  SELECT();
 80046f0:	f7ff fd30 	bl	8004154 <SELECT>

  if (count == 1)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d111      	bne.n	800471e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	2051      	movs	r0, #81	@ 0x51
 80046fe:	f7ff fe84 	bl	800440a <SD_SendCmd>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d129      	bne.n	800475c <SD_disk_read+0xb0>
 8004708:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800470c:	68b8      	ldr	r0, [r7, #8]
 800470e:	f7ff fe0b 	bl	8004328 <SD_RxDataBlock>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d021      	beq.n	800475c <SD_disk_read+0xb0>
 8004718:	2300      	movs	r3, #0
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	e01e      	b.n	800475c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	2052      	movs	r0, #82	@ 0x52
 8004722:	f7ff fe72 	bl	800440a <SD_SendCmd>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d117      	bne.n	800475c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800472c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004730:	68b8      	ldr	r0, [r7, #8]
 8004732:	f7ff fdf9 	bl	8004328 <SD_RxDataBlock>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <SD_disk_read+0xa6>
        buff += 512;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004742:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	3b01      	subs	r3, #1
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ed      	bne.n	800472c <SD_disk_read+0x80>
 8004750:	e000      	b.n	8004754 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8004752:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8004754:	2100      	movs	r1, #0
 8004756:	204c      	movs	r0, #76	@ 0x4c
 8004758:	f7ff fe57 	bl	800440a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800475c:	f7ff fd06 	bl	800416c <DESELECT>
  SPI_RxByte();
 8004760:	f7ff fd44 	bl	80041ec <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	bf14      	ite	ne
 800476a:	2301      	movne	r3, #1
 800476c:	2300      	moveq	r3, #0
 800476e:	b2db      	uxtb	r3, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000024 	.word	0x20000024
 800477c:	200007e4 	.word	0x200007e4

08004780 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	603b      	str	r3, [r7, #0]
 800478c:	4603      	mov	r3, r0
 800478e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <SD_disk_write+0x1c>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <SD_disk_write+0x20>
 800479c:	2304      	movs	r3, #4
 800479e:	e06b      	b.n	8004878 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80047a0:	4b37      	ldr	r3, [pc, #220]	@ (8004880 <SD_disk_write+0x100>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <SD_disk_write+0x32>
 80047ae:	2303      	movs	r3, #3
 80047b0:	e062      	b.n	8004878 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 80047b2:	4b33      	ldr	r3, [pc, #204]	@ (8004880 <SD_disk_write+0x100>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <SD_disk_write+0x44>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e059      	b.n	8004878 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 80047c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004884 <SD_disk_write+0x104>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <SD_disk_write+0x56>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	025b      	lsls	r3, r3, #9
 80047d4:	607b      	str	r3, [r7, #4]

  SELECT();
 80047d6:	f7ff fcbd 	bl	8004154 <SELECT>

  if (count == 1)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d110      	bne.n	8004802 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	2058      	movs	r0, #88	@ 0x58
 80047e4:	f7ff fe11 	bl	800440a <SD_SendCmd>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d13a      	bne.n	8004864 <SD_disk_write+0xe4>
 80047ee:	21fe      	movs	r1, #254	@ 0xfe
 80047f0:	68b8      	ldr	r0, [r7, #8]
 80047f2:	f7ff fdc7 	bl	8004384 <SD_TxDataBlock>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d033      	beq.n	8004864 <SD_disk_write+0xe4>
      count = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	e030      	b.n	8004864 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8004802:	4b20      	ldr	r3, [pc, #128]	@ (8004884 <SD_disk_write+0x104>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800480e:	2100      	movs	r1, #0
 8004810:	2077      	movs	r0, #119	@ 0x77
 8004812:	f7ff fdfa 	bl	800440a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8004816:	6839      	ldr	r1, [r7, #0]
 8004818:	2057      	movs	r0, #87	@ 0x57
 800481a:	f7ff fdf6 	bl	800440a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	2059      	movs	r0, #89	@ 0x59
 8004822:	f7ff fdf2 	bl	800440a <SD_SendCmd>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d11b      	bne.n	8004864 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800482c:	21fc      	movs	r1, #252	@ 0xfc
 800482e:	68b8      	ldr	r0, [r7, #8]
 8004830:	f7ff fda8 	bl	8004384 <SD_TxDataBlock>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <SD_disk_write+0xd0>
        buff += 512;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004840:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	3b01      	subs	r3, #1
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1ee      	bne.n	800482c <SD_disk_write+0xac>
 800484e:	e000      	b.n	8004852 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004850:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8004852:	21fd      	movs	r1, #253	@ 0xfd
 8004854:	2000      	movs	r0, #0
 8004856:	f7ff fd95 	bl	8004384 <SD_TxDataBlock>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <SD_disk_write+0xe4>
      {
        count = 1;
 8004860:	2301      	movs	r3, #1
 8004862:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8004864:	f7ff fc82 	bl	800416c <DESELECT>
  SPI_RxByte();
 8004868:	f7ff fcc0 	bl	80041ec <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20000024 	.word	0x20000024
 8004884:	200007e4 	.word	0x200007e4

08004888 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8004888:	b590      	push	{r4, r7, lr}
 800488a:	b08b      	sub	sp, #44	@ 0x2c
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	603a      	str	r2, [r7, #0]
 8004892:	71fb      	strb	r3, [r7, #7]
 8004894:	460b      	mov	r3, r1
 8004896:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <SD_disk_ioctl+0x1e>
 80048a2:	2304      	movs	r3, #4
 80048a4:	e113      	b.n	8004ace <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 80048ac:	79bb      	ldrb	r3, [r7, #6]
 80048ae:	2b05      	cmp	r3, #5
 80048b0:	d124      	bne.n	80048fc <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d012      	beq.n	80048e0 <SD_disk_ioctl+0x58>
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	dc1a      	bgt.n	80048f4 <SD_disk_ioctl+0x6c>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <SD_disk_ioctl+0x40>
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d006      	beq.n	80048d4 <SD_disk_ioctl+0x4c>
 80048c6:	e015      	b.n	80048f4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 80048c8:	f7ff fd16 	bl	80042f8 <SD_PowerOff>
      res = RES_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80048d2:	e0fa      	b.n	8004aca <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 80048d4:	f7ff fcce 	bl	8004274 <SD_PowerOn>
      res = RES_OK;
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80048de:	e0f4      	b.n	8004aca <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	1c5c      	adds	r4, r3, #1
 80048e4:	f7ff fd14 	bl	8004310 <SD_CheckPower>
 80048e8:	4603      	mov	r3, r0
 80048ea:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80048f2:	e0ea      	b.n	8004aca <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 80048f4:	2304      	movs	r3, #4
 80048f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80048fa:	e0e6      	b.n	8004aca <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80048fc:	4b76      	ldr	r3, [pc, #472]	@ (8004ad8 <SD_disk_ioctl+0x250>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800490a:	2303      	movs	r3, #3
 800490c:	e0df      	b.n	8004ace <SD_disk_ioctl+0x246>
    }
    SELECT();
 800490e:	f7ff fc21 	bl	8004154 <SELECT>
    switch (ctrl)
 8004912:	79bb      	ldrb	r3, [r7, #6]
 8004914:	2b0d      	cmp	r3, #13
 8004916:	f200 80c9 	bhi.w	8004aac <SD_disk_ioctl+0x224>
 800491a:	a201      	add	r2, pc, #4	@ (adr r2, 8004920 <SD_disk_ioctl+0x98>)
 800491c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004920:	08004a17 	.word	0x08004a17
 8004924:	08004959 	.word	0x08004959
 8004928:	08004a07 	.word	0x08004a07
 800492c:	08004aad 	.word	0x08004aad
 8004930:	08004aad 	.word	0x08004aad
 8004934:	08004aad 	.word	0x08004aad
 8004938:	08004aad 	.word	0x08004aad
 800493c:	08004aad 	.word	0x08004aad
 8004940:	08004aad 	.word	0x08004aad
 8004944:	08004aad 	.word	0x08004aad
 8004948:	08004aad 	.word	0x08004aad
 800494c:	08004a29 	.word	0x08004a29
 8004950:	08004a4d 	.word	0x08004a4d
 8004954:	08004a71 	.word	0x08004a71
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004958:	2100      	movs	r1, #0
 800495a:	2049      	movs	r0, #73	@ 0x49
 800495c:	f7ff fd55 	bl	800440a <SD_SendCmd>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	f040 80a6 	bne.w	8004ab4 <SD_disk_ioctl+0x22c>
 8004968:	f107 030c 	add.w	r3, r7, #12
 800496c:	2110      	movs	r1, #16
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fcda 	bl	8004328 <SD_RxDataBlock>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 809c 	beq.w	8004ab4 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 800497c:	7b3b      	ldrb	r3, [r7, #12]
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d10d      	bne.n	80049a2 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004986:	7d7b      	ldrb	r3, [r7, #21]
 8004988:	461a      	mov	r2, r3
 800498a:	7d3b      	ldrb	r3, [r7, #20]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	b29b      	uxth	r3, r3
 8004990:	4413      	add	r3, r2
 8004992:	b29b      	uxth	r3, r3
 8004994:	3301      	adds	r3, #1
 8004996:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8004998:	8bfb      	ldrh	r3, [r7, #30]
 800499a:	029a      	lsls	r2, r3, #10
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e02d      	b.n	80049fe <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80049a2:	7c7b      	ldrb	r3, [r7, #17]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	7dbb      	ldrb	r3, [r7, #22]
 80049ac:	09db      	lsrs	r3, r3, #7
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	7d7b      	ldrb	r3, [r7, #21]
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	f003 0306 	and.w	r3, r3, #6
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	3302      	adds	r3, #2
 80049c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80049ca:	7d3b      	ldrb	r3, [r7, #20]
 80049cc:	099b      	lsrs	r3, r3, #6
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	7cfb      	ldrb	r3, [r7, #19]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	4413      	add	r3, r2
 80049da:	b29a      	uxth	r2, r3
 80049dc:	7cbb      	ldrb	r3, [r7, #18]
 80049de:	029b      	lsls	r3, r3, #10
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4413      	add	r3, r2
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3301      	adds	r3, #1
 80049ee:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80049f0:	8bfa      	ldrh	r2, [r7, #30]
 80049f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80049f6:	3b09      	subs	r3, #9
 80049f8:	409a      	lsls	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8004a04:	e056      	b.n	8004ab4 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a0c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004a14:	e055      	b.n	8004ac2 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004a16:	f7ff fc13 	bl	8004240 <SD_ReadyWait>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2bff      	cmp	r3, #255	@ 0xff
 8004a1e:	d14b      	bne.n	8004ab8 <SD_disk_ioctl+0x230>
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004a26:	e047      	b.n	8004ab8 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004a28:	2100      	movs	r1, #0
 8004a2a:	2049      	movs	r0, #73	@ 0x49
 8004a2c:	f7ff fced 	bl	800440a <SD_SendCmd>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d142      	bne.n	8004abc <SD_disk_ioctl+0x234>
 8004a36:	2110      	movs	r1, #16
 8004a38:	6a38      	ldr	r0, [r7, #32]
 8004a3a:	f7ff fc75 	bl	8004328 <SD_RxDataBlock>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d03b      	beq.n	8004abc <SD_disk_ioctl+0x234>
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004a4a:	e037      	b.n	8004abc <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	204a      	movs	r0, #74	@ 0x4a
 8004a50:	f7ff fcdb 	bl	800440a <SD_SendCmd>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d132      	bne.n	8004ac0 <SD_disk_ioctl+0x238>
 8004a5a:	2110      	movs	r1, #16
 8004a5c:	6a38      	ldr	r0, [r7, #32]
 8004a5e:	f7ff fc63 	bl	8004328 <SD_RxDataBlock>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02b      	beq.n	8004ac0 <SD_disk_ioctl+0x238>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004a6e:	e027      	b.n	8004ac0 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8004a70:	2100      	movs	r1, #0
 8004a72:	207a      	movs	r0, #122	@ 0x7a
 8004a74:	f7ff fcc9 	bl	800440a <SD_SendCmd>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d116      	bne.n	8004aac <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004a84:	e00b      	b.n	8004a9e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8004a86:	6a3c      	ldr	r4, [r7, #32]
 8004a88:	1c63      	adds	r3, r4, #1
 8004a8a:	623b      	str	r3, [r7, #32]
 8004a8c:	f7ff fbae 	bl	80041ec <SPI_RxByte>
 8004a90:	4603      	mov	r3, r0
 8004a92:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8004a94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a98:	3301      	adds	r3, #1
 8004a9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004a9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d9ef      	bls.n	8004a86 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8004aac:	2304      	movs	r3, #4
 8004aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004ab2:	e006      	b.n	8004ac2 <SD_disk_ioctl+0x23a>
      break;
 8004ab4:	bf00      	nop
 8004ab6:	e004      	b.n	8004ac2 <SD_disk_ioctl+0x23a>
      break;
 8004ab8:	bf00      	nop
 8004aba:	e002      	b.n	8004ac2 <SD_disk_ioctl+0x23a>
      break;
 8004abc:	bf00      	nop
 8004abe:	e000      	b.n	8004ac2 <SD_disk_ioctl+0x23a>
      break;
 8004ac0:	bf00      	nop
    }
    DESELECT();
 8004ac2:	f7ff fb53 	bl	800416c <DESELECT>
    SPI_RxByte();
 8004ac6:	f7ff fb91 	bl	80041ec <SPI_RxByte>
  }
  return res;
 8004aca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	372c      	adds	r7, #44	@ 0x2c
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd90      	pop	{r4, r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000024 	.word	0x20000024

08004adc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	4a08      	ldr	r2, [pc, #32]	@ (8004b0c <disk_status+0x30>)
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	79fa      	ldrb	r2, [r7, #7]
 8004af4:	4905      	ldr	r1, [pc, #20]	@ (8004b0c <disk_status+0x30>)
 8004af6:	440a      	add	r2, r1
 8004af8:	7a12      	ldrb	r2, [r2, #8]
 8004afa:	4610      	mov	r0, r2
 8004afc:	4798      	blx	r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000a10 	.word	0x20000a10

08004b10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	4a0e      	ldr	r2, [pc, #56]	@ (8004b5c <disk_initialize+0x4c>)
 8004b22:	5cd3      	ldrb	r3, [r2, r3]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d114      	bne.n	8004b52 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b5c <disk_initialize+0x4c>)
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	79fa      	ldrb	r2, [r7, #7]
 8004b36:	4909      	ldr	r1, [pc, #36]	@ (8004b5c <disk_initialize+0x4c>)
 8004b38:	440a      	add	r2, r1
 8004b3a:	7a12      	ldrb	r2, [r2, #8]
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4798      	blx	r3
 8004b40:	4603      	mov	r3, r0
 8004b42:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d103      	bne.n	8004b52 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	4a03      	ldr	r2, [pc, #12]	@ (8004b5c <disk_initialize+0x4c>)
 8004b4e:	2101      	movs	r1, #1
 8004b50:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8004b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000a10 	.word	0x20000a10

08004b60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004b60:	b590      	push	{r4, r7, lr}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	4a0a      	ldr	r2, [pc, #40]	@ (8004b9c <disk_read+0x3c>)
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	689c      	ldr	r4, [r3, #8]
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	4a07      	ldr	r2, [pc, #28]	@ (8004b9c <disk_read+0x3c>)
 8004b80:	4413      	add	r3, r2
 8004b82:	7a18      	ldrb	r0, [r3, #8]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	47a0      	blx	r4
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd90      	pop	{r4, r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000a10 	.word	0x20000a10

08004ba0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ba0:	b590      	push	{r4, r7, lr}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	4603      	mov	r3, r0
 8004bae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bdc <disk_write+0x3c>)
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	68dc      	ldr	r4, [r3, #12]
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	4a07      	ldr	r2, [pc, #28]	@ (8004bdc <disk_write+0x3c>)
 8004bc0:	4413      	add	r3, r2
 8004bc2:	7a18      	ldrb	r0, [r3, #8]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	47a0      	blx	r4
 8004bcc:	4603      	mov	r3, r0
 8004bce:	75fb      	strb	r3, [r7, #23]
  return res;
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd90      	pop	{r4, r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000a10 	.word	0x20000a10

08004be0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	603a      	str	r2, [r7, #0]
 8004bea:	71fb      	strb	r3, [r7, #7]
 8004bec:	460b      	mov	r3, r1
 8004bee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	4a09      	ldr	r2, [pc, #36]	@ (8004c18 <disk_ioctl+0x38>)
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	79fa      	ldrb	r2, [r7, #7]
 8004bfe:	4906      	ldr	r1, [pc, #24]	@ (8004c18 <disk_ioctl+0x38>)
 8004c00:	440a      	add	r2, r1
 8004c02:	7a10      	ldrb	r0, [r2, #8]
 8004c04:	79b9      	ldrb	r1, [r7, #6]
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	4798      	blx	r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	73fb      	strb	r3, [r7, #15]
  return res;
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000a10 	.word	0x20000a10

08004c1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3301      	adds	r3, #1
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004c2c:	89fb      	ldrh	r3, [r7, #14]
 8004c2e:	021b      	lsls	r3, r3, #8
 8004c30:	b21a      	sxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	b21b      	sxth	r3, r3
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	b21b      	sxth	r3, r3
 8004c3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004c3e:	89fb      	ldrh	r3, [r7, #14]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3303      	adds	r3, #3
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	3202      	adds	r2, #2
 8004c64:	7812      	ldrb	r2, [r2, #0]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	021b      	lsls	r3, r3, #8
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	3201      	adds	r2, #1
 8004c72:	7812      	ldrb	r2, [r2, #0]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	7812      	ldrb	r2, [r2, #0]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
	return rv;
 8004c84:	68fb      	ldr	r3, [r7, #12]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	887a      	ldrh	r2, [r7, #2]
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	887b      	ldrh	r3, [r7, #2]
 8004cac:	0a1b      	lsrs	r3, r3, #8
 8004cae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	607a      	str	r2, [r7, #4]
 8004cb6:	887a      	ldrh	r2, [r7, #2]
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	701a      	strb	r2, [r3, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	0a1b      	lsrs	r3, r3, #8
 8004ce2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	b2d2      	uxtb	r2, r2
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	0a1b      	lsrs	r3, r3, #8
 8004d06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00d      	beq.n	8004d56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	1c53      	adds	r3, r2, #1
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1c59      	adds	r1, r3, #1
 8004d44:	6179      	str	r1, [r7, #20]
 8004d46:	7812      	ldrb	r2, [r2, #0]
 8004d48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	607b      	str	r3, [r7, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f1      	bne.n	8004d3a <mem_cpy+0x1a>
	}
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004d62:	b480      	push	{r7}
 8004d64:	b087      	sub	sp, #28
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	617a      	str	r2, [r7, #20]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	607b      	str	r3, [r7, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f3      	bne.n	8004d72 <mem_set+0x10>
}
 8004d8a:	bf00      	nop
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004d98:	b480      	push	{r7}
 8004d9a:	b089      	sub	sp, #36	@ 0x24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	61fa      	str	r2, [r7, #28]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	4619      	mov	r1, r3
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	61ba      	str	r2, [r7, #24]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	1acb      	subs	r3, r1, r3
 8004dc4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <mem_cmp+0x40>
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0eb      	beq.n	8004db0 <mem_cmp+0x18>

	return r;
 8004dd8:	697b      	ldr	r3, [r7, #20]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3724      	adds	r7, #36	@ 0x24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004df0:	e002      	b.n	8004df8 <chk_chr+0x12>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3301      	adds	r3, #1
 8004df6:	607b      	str	r3, [r7, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <chk_chr+0x26>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d1f2      	bne.n	8004df2 <chk_chr+0xc>
	return *str;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e029      	b.n	8004e84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004e30:	4a27      	ldr	r2, [pc, #156]	@ (8004ed0 <chk_lock+0xb4>)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	4413      	add	r3, r2
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01d      	beq.n	8004e7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004e3e:	4a24      	ldr	r2, [pc, #144]	@ (8004ed0 <chk_lock+0xb4>)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	4413      	add	r3, r2
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d116      	bne.n	8004e7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004e50:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed0 <chk_lock+0xb4>)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	4413      	add	r3, r2
 8004e58:	3304      	adds	r3, #4
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d10c      	bne.n	8004e7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004e64:	4a1a      	ldr	r2, [pc, #104]	@ (8004ed0 <chk_lock+0xb4>)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d102      	bne.n	8004e7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004e78:	e007      	b.n	8004e8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3301      	adds	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d9d2      	bls.n	8004e30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d109      	bne.n	8004ea4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <chk_lock+0x80>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d101      	bne.n	8004ea0 <chk_lock+0x84>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e010      	b.n	8004ec2 <chk_lock+0xa6>
 8004ea0:	2312      	movs	r3, #18
 8004ea2:	e00e      	b.n	8004ec2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d108      	bne.n	8004ebc <chk_lock+0xa0>
 8004eaa:	4a09      	ldr	r2, [pc, #36]	@ (8004ed0 <chk_lock+0xb4>)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	4413      	add	r3, r2
 8004eb2:	330c      	adds	r3, #12
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eba:	d101      	bne.n	8004ec0 <chk_lock+0xa4>
 8004ebc:	2310      	movs	r3, #16
 8004ebe:	e000      	b.n	8004ec2 <chk_lock+0xa6>
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	200007f0 	.word	0x200007f0

08004ed4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004eda:	2300      	movs	r3, #0
 8004edc:	607b      	str	r3, [r7, #4]
 8004ede:	e002      	b.n	8004ee6 <enq_lock+0x12>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d806      	bhi.n	8004efa <enq_lock+0x26>
 8004eec:	4a09      	ldr	r2, [pc, #36]	@ (8004f14 <enq_lock+0x40>)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	4413      	add	r3, r2
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f2      	bne.n	8004ee0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	200007f0 	.word	0x200007f0

08004f18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	e01f      	b.n	8004f68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004f28:	4a41      	ldr	r2, [pc, #260]	@ (8005030 <inc_lock+0x118>)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	4413      	add	r3, r2
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d113      	bne.n	8004f62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8005030 <inc_lock+0x118>)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	4413      	add	r3, r2
 8004f42:	3304      	adds	r3, #4
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d109      	bne.n	8004f62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004f4e:	4a38      	ldr	r2, [pc, #224]	@ (8005030 <inc_lock+0x118>)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	4413      	add	r3, r2
 8004f56:	3308      	adds	r3, #8
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d006      	beq.n	8004f70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d9dc      	bls.n	8004f28 <inc_lock+0x10>
 8004f6e:	e000      	b.n	8004f72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004f70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d132      	bne.n	8004fde <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e002      	b.n	8004f84 <inc_lock+0x6c>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3301      	adds	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d806      	bhi.n	8004f98 <inc_lock+0x80>
 8004f8a:	4a29      	ldr	r2, [pc, #164]	@ (8005030 <inc_lock+0x118>)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	4413      	add	r3, r2
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f2      	bne.n	8004f7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d101      	bne.n	8004fa2 <inc_lock+0x8a>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e040      	b.n	8005024 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4922      	ldr	r1, [pc, #136]	@ (8005030 <inc_lock+0x118>)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	440b      	add	r3, r1
 8004fae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	491e      	ldr	r1, [pc, #120]	@ (8005030 <inc_lock+0x118>)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	440b      	add	r3, r1
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	491a      	ldr	r1, [pc, #104]	@ (8005030 <inc_lock+0x118>)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	440b      	add	r3, r1
 8004fcc:	3308      	adds	r3, #8
 8004fce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004fd0:	4a17      	ldr	r2, [pc, #92]	@ (8005030 <inc_lock+0x118>)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	4413      	add	r3, r2
 8004fd8:	330c      	adds	r3, #12
 8004fda:	2200      	movs	r2, #0
 8004fdc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d009      	beq.n	8004ff8 <inc_lock+0xe0>
 8004fe4:	4a12      	ldr	r2, [pc, #72]	@ (8005030 <inc_lock+0x118>)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	4413      	add	r3, r2
 8004fec:	330c      	adds	r3, #12
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <inc_lock+0xe0>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	e015      	b.n	8005024 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d108      	bne.n	8005010 <inc_lock+0xf8>
 8004ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8005030 <inc_lock+0x118>)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	4413      	add	r3, r2
 8005006:	330c      	adds	r3, #12
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	3301      	adds	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	e001      	b.n	8005014 <inc_lock+0xfc>
 8005010:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005014:	4906      	ldr	r1, [pc, #24]	@ (8005030 <inc_lock+0x118>)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	440b      	add	r3, r1
 800501c:	330c      	adds	r3, #12
 800501e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3301      	adds	r3, #1
}
 8005024:	4618      	mov	r0, r3
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	200007f0 	.word	0x200007f0

08005034 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3b01      	subs	r3, #1
 8005040:	607b      	str	r3, [r7, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d825      	bhi.n	8005094 <dec_lock+0x60>
		n = Files[i].ctr;
 8005048:	4a17      	ldr	r2, [pc, #92]	@ (80050a8 <dec_lock+0x74>)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	4413      	add	r3, r2
 8005050:	330c      	adds	r3, #12
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005056:	89fb      	ldrh	r3, [r7, #14]
 8005058:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800505c:	d101      	bne.n	8005062 <dec_lock+0x2e>
 800505e:	2300      	movs	r3, #0
 8005060:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005062:	89fb      	ldrh	r3, [r7, #14]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <dec_lock+0x3a>
 8005068:	89fb      	ldrh	r3, [r7, #14]
 800506a:	3b01      	subs	r3, #1
 800506c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800506e:	4a0e      	ldr	r2, [pc, #56]	@ (80050a8 <dec_lock+0x74>)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	4413      	add	r3, r2
 8005076:	330c      	adds	r3, #12
 8005078:	89fa      	ldrh	r2, [r7, #14]
 800507a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800507c:	89fb      	ldrh	r3, [r7, #14]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d105      	bne.n	800508e <dec_lock+0x5a>
 8005082:	4a09      	ldr	r2, [pc, #36]	@ (80050a8 <dec_lock+0x74>)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	4413      	add	r3, r2
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	737b      	strb	r3, [r7, #13]
 8005092:	e001      	b.n	8005098 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005094:	2302      	movs	r3, #2
 8005096:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005098:	7b7b      	ldrb	r3, [r7, #13]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	200007f0 	.word	0x200007f0

080050ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	e010      	b.n	80050dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80050ba:	4a0d      	ldr	r2, [pc, #52]	@ (80050f0 <clear_lock+0x44>)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	4413      	add	r3, r2
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d105      	bne.n	80050d6 <clear_lock+0x2a>
 80050ca:	4a09      	ldr	r2, [pc, #36]	@ (80050f0 <clear_lock+0x44>)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	4413      	add	r3, r2
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3301      	adds	r3, #1
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d9eb      	bls.n	80050ba <clear_lock+0xe>
	}
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	200007f0 	.word	0x200007f0

080050f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	78db      	ldrb	r3, [r3, #3]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d034      	beq.n	8005172 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800510c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	7858      	ldrb	r0, [r3, #1]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005118:	2301      	movs	r3, #1
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	f7ff fd40 	bl	8004ba0 <disk_write>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005126:	2301      	movs	r3, #1
 8005128:	73fb      	strb	r3, [r7, #15]
 800512a:	e022      	b.n	8005172 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	1ad2      	subs	r2, r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	429a      	cmp	r2, r3
 8005140:	d217      	bcs.n	8005172 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	789b      	ldrb	r3, [r3, #2]
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	e010      	b.n	800516c <sync_window+0x78>
					wsect += fs->fsize;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4413      	add	r3, r2
 8005152:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	7858      	ldrb	r0, [r3, #1]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800515e:	2301      	movs	r3, #1
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	f7ff fd1d 	bl	8004ba0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	3b01      	subs	r3, #1
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d8eb      	bhi.n	800514a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d01b      	beq.n	80051cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ffad 	bl	80050f4 <sync_window>
 800519a:	4603      	mov	r3, r0
 800519c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d113      	bne.n	80051cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	7858      	ldrb	r0, [r3, #1]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80051ae:	2301      	movs	r3, #1
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	f7ff fcd5 	bl	8004b60 <disk_read>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d004      	beq.n	80051c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80051bc:	f04f 33ff 	mov.w	r3, #4294967295
 80051c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
	...

080051d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff ff87 	bl	80050f4 <sync_window>
 80051e6:	4603      	mov	r3, r0
 80051e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d159      	bne.n	80052a4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d149      	bne.n	800528c <sync_fs+0xb4>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	791b      	ldrb	r3, [r3, #4]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d145      	bne.n	800528c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	899b      	ldrh	r3, [r3, #12]
 800520a:	461a      	mov	r2, r3
 800520c:	2100      	movs	r1, #0
 800520e:	f7ff fda8 	bl	8004d62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3338      	adds	r3, #56	@ 0x38
 8005216:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800521a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff fd37 	bl	8004c92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3338      	adds	r3, #56	@ 0x38
 8005228:	4921      	ldr	r1, [pc, #132]	@ (80052b0 <sync_fs+0xd8>)
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fd4c 	bl	8004cc8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3338      	adds	r3, #56	@ 0x38
 8005234:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005238:	491e      	ldr	r1, [pc, #120]	@ (80052b4 <sync_fs+0xdc>)
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fd44 	bl	8004cc8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3338      	adds	r3, #56	@ 0x38
 8005244:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f7ff fd3a 	bl	8004cc8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3338      	adds	r3, #56	@ 0x38
 8005258:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	4619      	mov	r1, r3
 8005262:	4610      	mov	r0, r2
 8005264:	f7ff fd30 	bl	8004cc8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	7858      	ldrb	r0, [r3, #1]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005280:	2301      	movs	r3, #1
 8005282:	f7ff fc8d 	bl	8004ba0 <disk_write>
			fs->fsi_flag = 0;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	2200      	movs	r2, #0
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff fca3 	bl	8004be0 <disk_ioctl>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <sync_fs+0xcc>
 80052a0:	2301      	movs	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	41615252 	.word	0x41615252
 80052b4:	61417272 	.word	0x61417272

080052b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	3b02      	subs	r3, #2
 80052c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	3b02      	subs	r3, #2
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d301      	bcc.n	80052d8 <clust2sect+0x20>
 80052d4:	2300      	movs	r3, #0
 80052d6:	e008      	b.n	80052ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	895b      	ldrh	r3, [r3, #10]
 80052dc:	461a      	mov	r2, r3
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	fb03 f202 	mul.w	r2, r3, r2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052e8:	4413      	add	r3, r2
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b086      	sub	sp, #24
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d904      	bls.n	8005316 <get_fat+0x20>
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d302      	bcc.n	800531c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005316:	2301      	movs	r3, #1
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	e0ba      	b.n	8005492 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800531c:	f04f 33ff 	mov.w	r3, #4294967295
 8005320:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b03      	cmp	r3, #3
 8005328:	f000 8082 	beq.w	8005430 <get_fat+0x13a>
 800532c:	2b03      	cmp	r3, #3
 800532e:	f300 80a6 	bgt.w	800547e <get_fat+0x188>
 8005332:	2b01      	cmp	r3, #1
 8005334:	d002      	beq.n	800533c <get_fat+0x46>
 8005336:	2b02      	cmp	r3, #2
 8005338:	d055      	beq.n	80053e6 <get_fat+0xf0>
 800533a:	e0a0      	b.n	800547e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	899b      	ldrh	r3, [r3, #12]
 8005352:	4619      	mov	r1, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	fbb3 f3f1 	udiv	r3, r3, r1
 800535a:	4413      	add	r3, r2
 800535c:	4619      	mov	r1, r3
 800535e:	6938      	ldr	r0, [r7, #16]
 8005360:	f7ff ff0c 	bl	800517c <move_window>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	f040 808c 	bne.w	8005484 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	60fa      	str	r2, [r7, #12]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	8992      	ldrh	r2, [r2, #12]
 8005376:	fbb3 f1f2 	udiv	r1, r3, r2
 800537a:	fb01 f202 	mul.w	r2, r1, r2
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	4413      	add	r3, r2
 8005384:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005388:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	899b      	ldrh	r3, [r3, #12]
 8005392:	4619      	mov	r1, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	fbb3 f3f1 	udiv	r3, r3, r1
 800539a:	4413      	add	r3, r2
 800539c:	4619      	mov	r1, r3
 800539e:	6938      	ldr	r0, [r7, #16]
 80053a0:	f7ff feec 	bl	800517c <move_window>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d16e      	bne.n	8005488 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	899b      	ldrh	r3, [r3, #12]
 80053ae:	461a      	mov	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80053b6:	fb01 f202 	mul.w	r2, r1, r2
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053c4:	021b      	lsls	r3, r3, #8
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <get_fat+0xe6>
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	091b      	lsrs	r3, r3, #4
 80053da:	e002      	b.n	80053e2 <get_fat+0xec>
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053e2:	617b      	str	r3, [r7, #20]
			break;
 80053e4:	e055      	b.n	8005492 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	899b      	ldrh	r3, [r3, #12]
 80053ee:	085b      	lsrs	r3, r3, #1
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	4619      	mov	r1, r3
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80053fa:	4413      	add	r3, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	6938      	ldr	r0, [r7, #16]
 8005400:	f7ff febc 	bl	800517c <move_window>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d140      	bne.n	800548c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	8992      	ldrh	r2, [r2, #12]
 8005418:	fbb3 f0f2 	udiv	r0, r3, r2
 800541c:	fb00 f202 	mul.w	r2, r0, r2
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	440b      	add	r3, r1
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fbf9 	bl	8004c1c <ld_word>
 800542a:	4603      	mov	r3, r0
 800542c:	617b      	str	r3, [r7, #20]
			break;
 800542e:	e030      	b.n	8005492 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	899b      	ldrh	r3, [r3, #12]
 8005438:	089b      	lsrs	r3, r3, #2
 800543a:	b29b      	uxth	r3, r3
 800543c:	4619      	mov	r1, r3
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	fbb3 f3f1 	udiv	r3, r3, r1
 8005444:	4413      	add	r3, r2
 8005446:	4619      	mov	r1, r3
 8005448:	6938      	ldr	r0, [r7, #16]
 800544a:	f7ff fe97 	bl	800517c <move_window>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d11d      	bne.n	8005490 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	8992      	ldrh	r2, [r2, #12]
 8005462:	fbb3 f0f2 	udiv	r0, r3, r2
 8005466:	fb00 f202 	mul.w	r2, r0, r2
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	440b      	add	r3, r1
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fbec 	bl	8004c4c <ld_dword>
 8005474:	4603      	mov	r3, r0
 8005476:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800547a:	617b      	str	r3, [r7, #20]
			break;
 800547c:	e009      	b.n	8005492 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800547e:	2301      	movs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	e006      	b.n	8005492 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005484:	bf00      	nop
 8005486:	e004      	b.n	8005492 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005488:	bf00      	nop
 800548a:	e002      	b.n	8005492 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800548c:	bf00      	nop
 800548e:	e000      	b.n	8005492 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005490:	bf00      	nop
		}
	}

	return val;
 8005492:	697b      	ldr	r3, [r7, #20]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800549c:	b590      	push	{r4, r7, lr}
 800549e:	b089      	sub	sp, #36	@ 0x24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80054a8:	2302      	movs	r3, #2
 80054aa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	f240 8109 	bls.w	80056c6 <put_fat+0x22a>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	f080 8103 	bcs.w	80056c6 <put_fat+0x22a>
		switch (fs->fs_type) {
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	f000 80b6 	beq.w	8005636 <put_fat+0x19a>
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	f300 80fb 	bgt.w	80056c6 <put_fat+0x22a>
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d003      	beq.n	80054dc <put_fat+0x40>
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	f000 8083 	beq.w	80055e0 <put_fat+0x144>
 80054da:	e0f4      	b.n	80056c6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	085b      	lsrs	r3, r3, #1
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4413      	add	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	899b      	ldrh	r3, [r3, #12]
 80054f2:	4619      	mov	r1, r3
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054fa:	4413      	add	r3, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff fe3c 	bl	800517c <move_window>
 8005504:	4603      	mov	r3, r0
 8005506:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005508:	7ffb      	ldrb	r3, [r7, #31]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 80d4 	bne.w	80056b8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	61ba      	str	r2, [r7, #24]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	8992      	ldrh	r2, [r2, #12]
 8005520:	fbb3 f0f2 	udiv	r0, r3, r2
 8005524:	fb00 f202 	mul.w	r2, r0, r2
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	440b      	add	r3, r1
 800552c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <put_fat+0xb8>
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	b25b      	sxtb	r3, r3
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	b25a      	sxtb	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	b25b      	sxtb	r3, r3
 800554c:	4313      	orrs	r3, r2
 800554e:	b25b      	sxtb	r3, r3
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e001      	b.n	8005558 <put_fat+0xbc>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	899b      	ldrh	r3, [r3, #12]
 800556a:	4619      	mov	r1, r3
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005572:	4413      	add	r3, r2
 8005574:	4619      	mov	r1, r3
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7ff fe00 	bl	800517c <move_window>
 800557c:	4603      	mov	r3, r0
 800557e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005580:	7ffb      	ldrb	r3, [r7, #31]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 809a 	bne.w	80056bc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	899b      	ldrh	r3, [r3, #12]
 8005592:	461a      	mov	r2, r3
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	fbb3 f0f2 	udiv	r0, r3, r2
 800559a:	fb00 f202 	mul.w	r2, r0, r2
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	440b      	add	r3, r1
 80055a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <put_fat+0x11a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	e00e      	b.n	80055d4 <put_fat+0x138>
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	f023 030f 	bic.w	r3, r3, #15
 80055c0:	b25a      	sxtb	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	0a1b      	lsrs	r3, r3, #8
 80055c6:	b25b      	sxtb	r3, r3
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b25b      	sxtb	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	70da      	strb	r2, [r3, #3]
			break;
 80055de:	e072      	b.n	80056c6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	899b      	ldrh	r3, [r3, #12]
 80055e8:	085b      	lsrs	r3, r3, #1
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	4619      	mov	r1, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80055f4:	4413      	add	r3, r2
 80055f6:	4619      	mov	r1, r3
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff fdbf 	bl	800517c <move_window>
 80055fe:	4603      	mov	r3, r0
 8005600:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005602:	7ffb      	ldrb	r3, [r7, #31]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d15b      	bne.n	80056c0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	8992      	ldrh	r2, [r2, #12]
 8005616:	fbb3 f0f2 	udiv	r0, r3, r2
 800561a:	fb00 f202 	mul.w	r2, r0, r2
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	440b      	add	r3, r1
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	b292      	uxth	r2, r2
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fb32 	bl	8004c92 <st_word>
			fs->wflag = 1;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	70da      	strb	r2, [r3, #3]
			break;
 8005634:	e047      	b.n	80056c6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	899b      	ldrh	r3, [r3, #12]
 800563e:	089b      	lsrs	r3, r3, #2
 8005640:	b29b      	uxth	r3, r3
 8005642:	4619      	mov	r1, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	fbb3 f3f1 	udiv	r3, r3, r1
 800564a:	4413      	add	r3, r2
 800564c:	4619      	mov	r1, r3
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f7ff fd94 	bl	800517c <move_window>
 8005654:	4603      	mov	r3, r0
 8005656:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005658:	7ffb      	ldrb	r3, [r7, #31]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d132      	bne.n	80056c4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	8992      	ldrh	r2, [r2, #12]
 8005672:	fbb3 f0f2 	udiv	r0, r3, r2
 8005676:	fb00 f202 	mul.w	r2, r0, r2
 800567a:	1a9b      	subs	r3, r3, r2
 800567c:	440b      	add	r3, r1
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff fae4 	bl	8004c4c <ld_dword>
 8005684:	4603      	mov	r3, r0
 8005686:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800568a:	4323      	orrs	r3, r4
 800568c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	8992      	ldrh	r2, [r2, #12]
 800569c:	fbb3 f0f2 	udiv	r0, r3, r2
 80056a0:	fb00 f202 	mul.w	r2, r0, r2
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	440b      	add	r3, r1
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fb0c 	bl	8004cc8 <st_dword>
			fs->wflag = 1;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	70da      	strb	r2, [r3, #3]
			break;
 80056b6:	e006      	b.n	80056c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80056b8:	bf00      	nop
 80056ba:	e004      	b.n	80056c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80056bc:	bf00      	nop
 80056be:	e002      	b.n	80056c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80056c0:	bf00      	nop
 80056c2:	e000      	b.n	80056c6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80056c4:	bf00      	nop
		}
	}
	return res;
 80056c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3724      	adds	r7, #36	@ 0x24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd90      	pop	{r4, r7, pc}

080056d0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d904      	bls.n	80056f6 <remove_chain+0x26>
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d301      	bcc.n	80056fa <remove_chain+0x2a>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e04b      	b.n	8005792 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00c      	beq.n	800571a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005700:	f04f 32ff 	mov.w	r2, #4294967295
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	69b8      	ldr	r0, [r7, #24]
 8005708:	f7ff fec8 	bl	800549c <put_fat>
 800570c:	4603      	mov	r3, r0
 800570e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005710:	7ffb      	ldrb	r3, [r7, #31]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <remove_chain+0x4a>
 8005716:	7ffb      	ldrb	r3, [r7, #31]
 8005718:	e03b      	b.n	8005792 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7ff fdea 	bl	80052f6 <get_fat>
 8005722:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d031      	beq.n	800578e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <remove_chain+0x64>
 8005730:	2302      	movs	r3, #2
 8005732:	e02e      	b.n	8005792 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d101      	bne.n	8005740 <remove_chain+0x70>
 800573c:	2301      	movs	r3, #1
 800573e:	e028      	b.n	8005792 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005740:	2200      	movs	r2, #0
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	69b8      	ldr	r0, [r7, #24]
 8005746:	f7ff fea9 	bl	800549c <put_fat>
 800574a:	4603      	mov	r3, r0
 800574c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800574e:	7ffb      	ldrb	r3, [r7, #31]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <remove_chain+0x88>
 8005754:	7ffb      	ldrb	r3, [r7, #31]
 8005756:	e01c      	b.n	8005792 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	699a      	ldr	r2, [r3, #24]
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	3b02      	subs	r3, #2
 8005762:	429a      	cmp	r2, r3
 8005764:	d20b      	bcs.n	800577e <remove_chain+0xae>
			fs->free_clst++;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	791b      	ldrb	r3, [r3, #4]
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	b2da      	uxtb	r2, r3
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	429a      	cmp	r2, r3
 800578a:	d3c6      	bcc.n	800571a <remove_chain+0x4a>
 800578c:	e000      	b.n	8005790 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800578e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b088      	sub	sp, #32
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
 80057a2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10d      	bne.n	80057cc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <create_chain+0x2c>
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d31b      	bcc.n	80057fe <create_chain+0x64>
 80057c6:	2301      	movs	r3, #1
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e018      	b.n	80057fe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff fd91 	bl	80052f6 <get_fat>
 80057d4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d801      	bhi.n	80057e0 <create_chain+0x46>
 80057dc:	2301      	movs	r3, #1
 80057de:	e070      	b.n	80058c2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	d101      	bne.n	80057ec <create_chain+0x52>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	e06a      	b.n	80058c2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	69db      	ldr	r3, [r3, #28]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d201      	bcs.n	80057fa <create_chain+0x60>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	e063      	b.n	80058c2 <create_chain+0x128>
		scl = clst;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	3301      	adds	r3, #1
 8005806:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	429a      	cmp	r2, r3
 8005810:	d307      	bcc.n	8005822 <create_chain+0x88>
				ncl = 2;
 8005812:	2302      	movs	r3, #2
 8005814:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	429a      	cmp	r2, r3
 800581c:	d901      	bls.n	8005822 <create_chain+0x88>
 800581e:	2300      	movs	r3, #0
 8005820:	e04f      	b.n	80058c2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005822:	69f9      	ldr	r1, [r7, #28]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff fd66 	bl	80052f6 <get_fat>
 800582a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00e      	beq.n	8005850 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d003      	beq.n	8005840 <create_chain+0xa6>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583e:	d101      	bne.n	8005844 <create_chain+0xaa>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	e03e      	b.n	80058c2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	429a      	cmp	r2, r3
 800584a:	d1da      	bne.n	8005802 <create_chain+0x68>
 800584c:	2300      	movs	r3, #0
 800584e:	e038      	b.n	80058c2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005850:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005852:	f04f 32ff 	mov.w	r2, #4294967295
 8005856:	69f9      	ldr	r1, [r7, #28]
 8005858:	6938      	ldr	r0, [r7, #16]
 800585a:	f7ff fe1f 	bl	800549c <put_fat>
 800585e:	4603      	mov	r3, r0
 8005860:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005862:	7dfb      	ldrb	r3, [r7, #23]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d109      	bne.n	800587c <create_chain+0xe2>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d006      	beq.n	800587c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	6938      	ldr	r0, [r7, #16]
 8005874:	f7ff fe12 	bl	800549c <put_fat>
 8005878:	4603      	mov	r3, r0
 800587a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d116      	bne.n	80058b0 <create_chain+0x116>
		fs->last_clst = ncl;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	3b02      	subs	r3, #2
 8005892:	429a      	cmp	r2, r3
 8005894:	d804      	bhi.n	80058a0 <create_chain+0x106>
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	1e5a      	subs	r2, r3, #1
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	791b      	ldrb	r3, [r3, #4]
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	711a      	strb	r2, [r3, #4]
 80058ae:	e007      	b.n	80058c0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d102      	bne.n	80058bc <create_chain+0x122>
 80058b6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ba:	e000      	b.n	80058be <create_chain+0x124>
 80058bc:	2301      	movs	r3, #1
 80058be:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80058c0:	69fb      	ldr	r3, [r7, #28]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	3304      	adds	r3, #4
 80058e0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	899b      	ldrh	r3, [r3, #12]
 80058e6:	461a      	mov	r2, r3
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	8952      	ldrh	r2, [r2, #10]
 80058f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80058f6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1d1a      	adds	r2, r3, #4
 80058fc:	613a      	str	r2, [r7, #16]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <clmt_clust+0x42>
 8005908:	2300      	movs	r3, #0
 800590a:	e010      	b.n	800592e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	429a      	cmp	r2, r3
 8005912:	d307      	bcc.n	8005924 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	3304      	adds	r3, #4
 8005920:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005922:	e7e9      	b.n	80058f8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005924:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	4413      	add	r3, r2
}
 800592e:	4618      	mov	r0, r3
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b086      	sub	sp, #24
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005950:	d204      	bcs.n	800595c <dir_sdi+0x22>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	2b00      	cmp	r3, #0
 800595a:	d001      	beq.n	8005960 <dir_sdi+0x26>
		return FR_INT_ERR;
 800595c:	2302      	movs	r3, #2
 800595e:	e071      	b.n	8005a44 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <dir_sdi+0x46>
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d902      	bls.n	8005980 <dir_sdi+0x46>
		clst = fs->dirbase;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10c      	bne.n	80059a0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	8912      	ldrh	r2, [r2, #8]
 800598e:	4293      	cmp	r3, r2
 8005990:	d301      	bcc.n	8005996 <dir_sdi+0x5c>
 8005992:	2302      	movs	r3, #2
 8005994:	e056      	b.n	8005a44 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	61da      	str	r2, [r3, #28]
 800599e:	e02d      	b.n	80059fc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	895b      	ldrh	r3, [r3, #10]
 80059a4:	461a      	mov	r2, r3
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	899b      	ldrh	r3, [r3, #12]
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80059b0:	e019      	b.n	80059e6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6979      	ldr	r1, [r7, #20]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff fc9d 	bl	80052f6 <get_fat>
 80059bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d101      	bne.n	80059ca <dir_sdi+0x90>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e03c      	b.n	8005a44 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d904      	bls.n	80059da <dir_sdi+0xa0>
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d301      	bcc.n	80059de <dir_sdi+0xa4>
 80059da:	2302      	movs	r3, #2
 80059dc:	e032      	b.n	8005a44 <dir_sdi+0x10a>
			ofs -= csz;
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d2e1      	bcs.n	80059b2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80059ee:	6979      	ldr	r1, [r7, #20]
 80059f0:	6938      	ldr	r0, [r7, #16]
 80059f2:	f7ff fc61 	bl	80052b8 <clust2sect>
 80059f6:	4602      	mov	r2, r0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <dir_sdi+0xd4>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	e01a      	b.n	8005a44 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	899b      	ldrh	r3, [r3, #12]
 8005a16:	4619      	mov	r1, r3
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a1e:	441a      	add	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	899b      	ldrh	r3, [r3, #12]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a36:	fb00 f202 	mul.w	r2, r0, r2
 8005a3a:	1a9b      	subs	r3, r3, r2
 8005a3c:	18ca      	adds	r2, r1, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b086      	sub	sp, #24
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	3320      	adds	r3, #32
 8005a62:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <dir_next+0x28>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a72:	d301      	bcc.n	8005a78 <dir_next+0x2c>
 8005a74:	2304      	movs	r3, #4
 8005a76:	e0bb      	b.n	8005bf0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	899b      	ldrh	r3, [r3, #12]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a84:	fb01 f202 	mul.w	r2, r1, r2
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f040 809d 	bne.w	8005bca <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10b      	bne.n	8005aba <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	8912      	ldrh	r2, [r2, #8]
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	f0c0 808d 	bcc.w	8005bca <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	61da      	str	r2, [r3, #28]
 8005ab6:	2304      	movs	r3, #4
 8005ab8:	e09a      	b.n	8005bf0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	899b      	ldrh	r3, [r3, #12]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	8952      	ldrh	r2, [r2, #10]
 8005aca:	3a01      	subs	r2, #1
 8005acc:	4013      	ands	r3, r2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d17b      	bne.n	8005bca <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4610      	mov	r0, r2
 8005adc:	f7ff fc0b 	bl	80052f6 <get_fat>
 8005ae0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d801      	bhi.n	8005aec <dir_next+0xa0>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e081      	b.n	8005bf0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af2:	d101      	bne.n	8005af8 <dir_next+0xac>
 8005af4:	2301      	movs	r3, #1
 8005af6:	e07b      	b.n	8005bf0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	69db      	ldr	r3, [r3, #28]
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d359      	bcc.n	8005bb6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	61da      	str	r2, [r3, #28]
 8005b0e:	2304      	movs	r3, #4
 8005b10:	e06e      	b.n	8005bf0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	f7ff fe3d 	bl	800579a <create_chain>
 8005b20:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <dir_next+0xe0>
 8005b28:	2307      	movs	r3, #7
 8005b2a:	e061      	b.n	8005bf0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <dir_next+0xea>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e05c      	b.n	8005bf0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3c:	d101      	bne.n	8005b42 <dir_next+0xf6>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e056      	b.n	8005bf0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f7ff fad6 	bl	80050f4 <sync_window>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <dir_next+0x106>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e04e      	b.n	8005bf0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	899b      	ldrh	r3, [r3, #12]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	2100      	movs	r1, #0
 8005b60:	f7ff f8ff 	bl	8004d62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b64:	2300      	movs	r3, #0
 8005b66:	613b      	str	r3, [r7, #16]
 8005b68:	6979      	ldr	r1, [r7, #20]
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff fba4 	bl	80052b8 <clust2sect>
 8005b70:	4602      	mov	r2, r0
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b76:	e012      	b.n	8005b9e <dir_next+0x152>
						fs->wflag = 1;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff fab8 	bl	80050f4 <sync_window>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <dir_next+0x142>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e030      	b.n	8005bf0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	3301      	adds	r3, #1
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	895b      	ldrh	r3, [r3, #10]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d3e6      	bcc.n	8005b78 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad2      	subs	r2, r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005bbc:	6979      	ldr	r1, [r7, #20]
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff fb7a 	bl	80052b8 <clust2sect>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	899b      	ldrh	r3, [r3, #12]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	fbb3 f0f2 	udiv	r0, r3, r2
 8005be2:	fb00 f202 	mul.w	r2, r0, r2
 8005be6:	1a9b      	subs	r3, r3, r2
 8005be8:	18ca      	adds	r2, r1, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005c08:	2100      	movs	r1, #0
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fe95 	bl	800593a <dir_sdi>
 8005c10:	4603      	mov	r3, r0
 8005c12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d12b      	bne.n	8005c72 <dir_alloc+0x7a>
		n = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	4619      	mov	r1, r3
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff faa9 	bl	800517c <move_window>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d11d      	bne.n	8005c70 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2be5      	cmp	r3, #229	@ 0xe5
 8005c3c:	d004      	beq.n	8005c48 <dir_alloc+0x50>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d107      	bne.n	8005c58 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d102      	bne.n	8005c5c <dir_alloc+0x64>
 8005c56:	e00c      	b.n	8005c72 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005c58:	2300      	movs	r3, #0
 8005c5a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff fef4 	bl	8005a4c <dir_next>
 8005c64:	4603      	mov	r3, r0
 8005c66:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0d7      	beq.n	8005c1e <dir_alloc+0x26>
 8005c6e:	e000      	b.n	8005c72 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005c70:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d101      	bne.n	8005c7c <dir_alloc+0x84>
 8005c78:	2307      	movs	r3, #7
 8005c7a:	75fb      	strb	r3, [r7, #23]
	return res;
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	331a      	adds	r3, #26
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe ffc1 	bl	8004c1c <ld_word>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d109      	bne.n	8005cba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	3314      	adds	r3, #20
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe ffb6 	bl	8004c1c <ld_word>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	041b      	lsls	r3, r3, #16
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005cba:	68fb      	ldr	r3, [r7, #12]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	331a      	adds	r3, #26
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	b292      	uxth	r2, r2
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe ffd9 	bl	8004c92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d109      	bne.n	8005cfc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f103 0214 	add.w	r2, r3, #20
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	0c1b      	lsrs	r3, r3, #16
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	f7fe ffcb 	bl	8004c92 <st_word>
	}
}
 8005cfc:	bf00      	nop
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005d04:	b590      	push	{r4, r7, lr}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	331a      	adds	r3, #26
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe ff82 	bl	8004c1c <ld_word>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <cmp_lfn+0x1e>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e059      	b.n	8005dd6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d2a:	1e5a      	subs	r2, r3, #1
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005d38:	2301      	movs	r3, #1
 8005d3a:	81fb      	strh	r3, [r7, #14]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	e033      	b.n	8005daa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005d42:	4a27      	ldr	r2, [pc, #156]	@ (8005de0 <cmp_lfn+0xdc>)
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4413      	add	r3, r2
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	4413      	add	r3, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fe ff63 	bl	8004c1c <ld_word>
 8005d56:	4603      	mov	r3, r0
 8005d58:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005d5a:	89fb      	ldrh	r3, [r7, #14]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01a      	beq.n	8005d96 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2bfe      	cmp	r3, #254	@ 0xfe
 8005d64:	d812      	bhi.n	8005d8c <cmp_lfn+0x88>
 8005d66:	89bb      	ldrh	r3, [r7, #12]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f002 f9cd 	bl	8008108 <ff_wtoupper>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	461c      	mov	r4, r3
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	617a      	str	r2, [r7, #20]
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f002 f9c1 	bl	8008108 <ff_wtoupper>
 8005d86:	4603      	mov	r3, r0
 8005d88:	429c      	cmp	r4, r3
 8005d8a:	d001      	beq.n	8005d90 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e022      	b.n	8005dd6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005d90:	89bb      	ldrh	r3, [r7, #12]
 8005d92:	81fb      	strh	r3, [r7, #14]
 8005d94:	e006      	b.n	8005da4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005d96:	89bb      	ldrh	r3, [r7, #12]
 8005d98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d001      	beq.n	8005da4 <cmp_lfn+0xa0>
 8005da0:	2300      	movs	r3, #0
 8005da2:	e018      	b.n	8005dd6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	3301      	adds	r3, #1
 8005da8:	613b      	str	r3, [r7, #16]
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	2b0c      	cmp	r3, #12
 8005dae:	d9c8      	bls.n	8005d42 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00b      	beq.n	8005dd4 <cmp_lfn+0xd0>
 8005dbc:	89fb      	ldrh	r3, [r7, #14]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d008      	beq.n	8005dd4 <cmp_lfn+0xd0>
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4413      	add	r3, r2
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <cmp_lfn+0xd0>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e000      	b.n	8005dd6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005dd4:	2301      	movs	r3, #1
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd90      	pop	{r4, r7, pc}
 8005dde:	bf00      	nop
 8005de0:	0800ac60 	.word	0x0800ac60

08005de4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	4611      	mov	r1, r2
 8005df0:	461a      	mov	r2, r3
 8005df2:	460b      	mov	r3, r1
 8005df4:	71fb      	strb	r3, [r7, #7]
 8005df6:	4613      	mov	r3, r2
 8005df8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	330d      	adds	r3, #13
 8005dfe:	79ba      	ldrb	r2, [r7, #6]
 8005e00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	330b      	adds	r3, #11
 8005e06:	220f      	movs	r2, #15
 8005e08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	2200      	movs	r2, #0
 8005e10:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	331a      	adds	r3, #26
 8005e16:	2100      	movs	r1, #0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fe ff3a 	bl	8004c92 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	1e5a      	subs	r2, r3, #1
 8005e22:	4613      	mov	r3, r2
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	82fb      	strh	r3, [r7, #22]
 8005e32:	2300      	movs	r3, #0
 8005e34:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005e36:	8afb      	ldrh	r3, [r7, #22]
 8005e38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d007      	beq.n	8005e50 <put_lfn+0x6c>
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	61fa      	str	r2, [r7, #28]
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005e50:	4a17      	ldr	r2, [pc, #92]	@ (8005eb0 <put_lfn+0xcc>)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	4413      	add	r3, r2
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	8afa      	ldrh	r2, [r7, #22]
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fe ff15 	bl	8004c92 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005e68:	8afb      	ldrh	r3, [r7, #22]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d102      	bne.n	8005e74 <put_lfn+0x90>
 8005e6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e72:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	3301      	adds	r3, #1
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b0c      	cmp	r3, #12
 8005e7e:	d9da      	bls.n	8005e36 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005e80:	8afb      	ldrh	r3, [r7, #22]
 8005e82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d006      	beq.n	8005e98 <put_lfn+0xb4>
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d103      	bne.n	8005ea0 <put_lfn+0xbc>
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e9e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	79fa      	ldrb	r2, [r7, #7]
 8005ea4:	701a      	strb	r2, [r3, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	3720      	adds	r7, #32
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	0800ac60 	.word	0x0800ac60

08005eb4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08c      	sub	sp, #48	@ 0x30
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005ec2:	220b      	movs	r2, #11
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7fe ff2a 	bl	8004d20 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b05      	cmp	r3, #5
 8005ed0:	d92b      	bls.n	8005f2a <gen_numname+0x76>
		sr = seq;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005ed6:	e022      	b.n	8005f1e <gen_numname+0x6a>
			wc = *lfn++;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	1c9a      	adds	r2, r3, #2
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ee6:	e017      	b.n	8005f18 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	005a      	lsls	r2, r3, #1
 8005eec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	4413      	add	r3, r2
 8005ef4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005ef6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ef8:	085b      	lsrs	r3, r3, #1
 8005efa:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <gen_numname+0x5e>
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005f0c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005f10:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f14:	3301      	adds	r3, #1
 8005f16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1a:	2b0f      	cmp	r3, #15
 8005f1c:	d9e4      	bls.n	8005ee8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1d8      	bne.n	8005ed8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005f2a:	2307      	movs	r3, #7
 8005f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	3330      	adds	r3, #48	@ 0x30
 8005f3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f42:	2b39      	cmp	r3, #57	@ 0x39
 8005f44:	d904      	bls.n	8005f50 <gen_numname+0x9c>
 8005f46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f4a:	3307      	adds	r3, #7
 8005f4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f52:	1e5a      	subs	r2, r3, #1
 8005f54:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005f56:	3330      	adds	r3, #48	@ 0x30
 8005f58:	443b      	add	r3, r7
 8005f5a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005f5e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	091b      	lsrs	r3, r3, #4
 8005f66:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1df      	bne.n	8005f2e <gen_numname+0x7a>
	ns[i] = '~';
 8005f6e:	f107 0214 	add.w	r2, r7, #20
 8005f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f74:	4413      	add	r3, r2
 8005f76:	227e      	movs	r2, #126	@ 0x7e
 8005f78:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f7e:	e002      	b.n	8005f86 <gen_numname+0xd2>
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	3301      	adds	r3, #1
 8005f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d205      	bcs.n	8005f9a <gen_numname+0xe6>
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	4413      	add	r3, r2
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d1f2      	bne.n	8005f80 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9c:	2b07      	cmp	r3, #7
 8005f9e:	d807      	bhi.n	8005fb0 <gen_numname+0xfc>
 8005fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005fa6:	3330      	adds	r3, #48	@ 0x30
 8005fa8:	443b      	add	r3, r7
 8005faa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005fae:	e000      	b.n	8005fb2 <gen_numname+0xfe>
 8005fb0:	2120      	movs	r1, #32
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	460a      	mov	r2, r1
 8005fbe:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	2b07      	cmp	r3, #7
 8005fc4:	d9e9      	bls.n	8005f9a <gen_numname+0xe6>
}
 8005fc6:	bf00      	nop
 8005fc8:	bf00      	nop
 8005fca:	3730      	adds	r7, #48	@ 0x30
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005fdc:	230b      	movs	r3, #11
 8005fde:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	0852      	lsrs	r2, r2, #1
 8005fe6:	01db      	lsls	r3, r3, #7
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	1c59      	adds	r1, r3, #1
 8005ff0:	6079      	str	r1, [r7, #4]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1ed      	bne.n	8005fe0 <sum_sfn+0x10>
	return sum;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b086      	sub	sp, #24
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006020:	2100      	movs	r1, #0
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff fc89 	bl	800593a <dir_sdi>
 8006028:	4603      	mov	r3, r0
 800602a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800602c:	7dfb      	ldrb	r3, [r7, #23]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d001      	beq.n	8006036 <dir_find+0x24>
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	e0a9      	b.n	800618a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006036:	23ff      	movs	r3, #255	@ 0xff
 8006038:	753b      	strb	r3, [r7, #20]
 800603a:	7d3b      	ldrb	r3, [r7, #20]
 800603c:	757b      	strb	r3, [r7, #21]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f04f 32ff 	mov.w	r2, #4294967295
 8006044:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	4619      	mov	r1, r3
 800604c:	6938      	ldr	r0, [r7, #16]
 800604e:	f7ff f895 	bl	800517c <move_window>
 8006052:	4603      	mov	r3, r0
 8006054:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006056:	7dfb      	ldrb	r3, [r7, #23]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f040 8090 	bne.w	800617e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006066:	7dbb      	ldrb	r3, [r7, #22]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d102      	bne.n	8006072 <dir_find+0x60>
 800606c:	2304      	movs	r3, #4
 800606e:	75fb      	strb	r3, [r7, #23]
 8006070:	e08a      	b.n	8006188 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	330b      	adds	r3, #11
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800607e:	73fb      	strb	r3, [r7, #15]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	7bfa      	ldrb	r2, [r7, #15]
 8006084:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006086:	7dbb      	ldrb	r3, [r7, #22]
 8006088:	2be5      	cmp	r3, #229	@ 0xe5
 800608a:	d007      	beq.n	800609c <dir_find+0x8a>
 800608c:	7bfb      	ldrb	r3, [r7, #15]
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <dir_find+0x98>
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	2b0f      	cmp	r3, #15
 800609a:	d006      	beq.n	80060aa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800609c:	23ff      	movs	r3, #255	@ 0xff
 800609e:	757b      	strb	r3, [r7, #21]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f04f 32ff 	mov.w	r2, #4294967295
 80060a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80060a8:	e05e      	b.n	8006168 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	2b0f      	cmp	r3, #15
 80060ae:	d136      	bne.n	800611e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80060b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d154      	bne.n	8006168 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80060be:	7dbb      	ldrb	r3, [r7, #22]
 80060c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00d      	beq.n	80060e4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	7b5b      	ldrb	r3, [r3, #13]
 80060ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80060d0:	7dbb      	ldrb	r3, [r7, #22]
 80060d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060d6:	75bb      	strb	r3, [r7, #22]
 80060d8:	7dbb      	ldrb	r3, [r7, #22]
 80060da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695a      	ldr	r2, [r3, #20]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80060e4:	7dba      	ldrb	r2, [r7, #22]
 80060e6:	7d7b      	ldrb	r3, [r7, #21]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d115      	bne.n	8006118 <dir_find+0x106>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	330d      	adds	r3, #13
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	7d3a      	ldrb	r2, [r7, #20]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d10e      	bne.n	8006118 <dir_find+0x106>
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f7ff fdfd 	bl	8005d04 <cmp_lfn>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <dir_find+0x106>
 8006110:	7d7b      	ldrb	r3, [r7, #21]
 8006112:	3b01      	subs	r3, #1
 8006114:	b2db      	uxtb	r3, r3
 8006116:	e000      	b.n	800611a <dir_find+0x108>
 8006118:	23ff      	movs	r3, #255	@ 0xff
 800611a:	757b      	strb	r3, [r7, #21]
 800611c:	e024      	b.n	8006168 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800611e:	7d7b      	ldrb	r3, [r7, #21]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d109      	bne.n	8006138 <dir_find+0x126>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff ff51 	bl	8005fd0 <sum_sfn>
 800612e:	4603      	mov	r3, r0
 8006130:	461a      	mov	r2, r3
 8006132:	7d3b      	ldrb	r3, [r7, #20]
 8006134:	4293      	cmp	r3, r2
 8006136:	d024      	beq.n	8006182 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <dir_find+0x14a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a18      	ldr	r0, [r3, #32]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3324      	adds	r3, #36	@ 0x24
 800614e:	220b      	movs	r2, #11
 8006150:	4619      	mov	r1, r3
 8006152:	f7fe fe21 	bl	8004d98 <mem_cmp>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d014      	beq.n	8006186 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800615c:	23ff      	movs	r3, #255	@ 0xff
 800615e:	757b      	strb	r3, [r7, #21]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f04f 32ff 	mov.w	r2, #4294967295
 8006166:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006168:	2100      	movs	r1, #0
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff fc6e 	bl	8005a4c <dir_next>
 8006170:	4603      	mov	r3, r0
 8006172:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	2b00      	cmp	r3, #0
 8006178:	f43f af65 	beq.w	8006046 <dir_find+0x34>
 800617c:	e004      	b.n	8006188 <dir_find+0x176>
		if (res != FR_OK) break;
 800617e:	bf00      	nop
 8006180:	e002      	b.n	8006188 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006182:	bf00      	nop
 8006184:	e000      	b.n	8006188 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006186:	bf00      	nop

	return res;
 8006188:	7dfb      	ldrb	r3, [r7, #23]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	@ 0x30
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80061a8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <dir_register+0x20>
 80061b0:	2306      	movs	r3, #6
 80061b2:	e0e0      	b.n	8006376 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80061b4:	2300      	movs	r3, #0
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061b8:	e002      	b.n	80061c0 <dir_register+0x2c>
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	3301      	adds	r3, #1
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	691a      	ldr	r2, [r3, #16]
 80061c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4413      	add	r3, r2
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f4      	bne.n	80061ba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80061d6:	f107 030c 	add.w	r3, r7, #12
 80061da:	220c      	movs	r2, #12
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe fd9f 	bl	8004d20 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	f003 0301 	and.w	r3, r3, #1
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d032      	beq.n	8006252 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2240      	movs	r2, #64	@ 0x40
 80061f0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80061f4:	2301      	movs	r3, #1
 80061f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061f8:	e016      	b.n	8006228 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	f107 010c 	add.w	r1, r7, #12
 8006208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620a:	f7ff fe53 	bl	8005eb4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7ff feff 	bl	8006012 <dir_find>
 8006214:	4603      	mov	r3, r0
 8006216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800621a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006224:	3301      	adds	r3, #1
 8006226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622a:	2b63      	cmp	r3, #99	@ 0x63
 800622c:	d9e5      	bls.n	80061fa <dir_register+0x66>
 800622e:	e000      	b.n	8006232 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006230:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006234:	2b64      	cmp	r3, #100	@ 0x64
 8006236:	d101      	bne.n	800623c <dir_register+0xa8>
 8006238:	2307      	movs	r3, #7
 800623a:	e09c      	b.n	8006376 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800623c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006240:	2b04      	cmp	r3, #4
 8006242:	d002      	beq.n	800624a <dir_register+0xb6>
 8006244:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006248:	e095      	b.n	8006376 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800624a:	7dfa      	ldrb	r2, [r7, #23]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <dir_register+0xd8>
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	330c      	adds	r3, #12
 8006260:	4a47      	ldr	r2, [pc, #284]	@ (8006380 <dir_register+0x1ec>)
 8006262:	fba2 2303 	umull	r2, r3, r2, r3
 8006266:	089b      	lsrs	r3, r3, #2
 8006268:	3301      	adds	r3, #1
 800626a:	e000      	b.n	800626e <dir_register+0xda>
 800626c:	2301      	movs	r3, #1
 800626e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006270:	6a39      	ldr	r1, [r7, #32]
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff fcc0 	bl	8005bf8 <dir_alloc>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800627e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006282:	2b00      	cmp	r3, #0
 8006284:	d148      	bne.n	8006318 <dir_register+0x184>
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	3b01      	subs	r3, #1
 800628a:	623b      	str	r3, [r7, #32]
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d042      	beq.n	8006318 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695a      	ldr	r2, [r3, #20]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	015b      	lsls	r3, r3, #5
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fb4b 	bl	800593a <dir_sdi>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80062aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d132      	bne.n	8006318 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3324      	adds	r3, #36	@ 0x24
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7ff fe8a 	bl	8005fd0 <sum_sfn>
 80062bc:	4603      	mov	r3, r0
 80062be:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	4619      	mov	r1, r3
 80062c6:	69f8      	ldr	r0, [r7, #28]
 80062c8:	f7fe ff58 	bl	800517c <move_window>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80062d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d11d      	bne.n	8006316 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	6918      	ldr	r0, [r3, #16]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a19      	ldr	r1, [r3, #32]
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	7efb      	ldrb	r3, [r7, #27]
 80062e8:	f7ff fd7c 	bl	8005de4 <put_lfn>
				fs->wflag = 1;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	2201      	movs	r2, #1
 80062f0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80062f2:	2100      	movs	r1, #0
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff fba9 	bl	8005a4c <dir_next>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8006300:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006304:	2b00      	cmp	r3, #0
 8006306:	d107      	bne.n	8006318 <dir_register+0x184>
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	3b01      	subs	r3, #1
 800630c:	623b      	str	r3, [r7, #32]
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1d5      	bne.n	80062c0 <dir_register+0x12c>
 8006314:	e000      	b.n	8006318 <dir_register+0x184>
				if (res != FR_OK) break;
 8006316:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006318:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800631c:	2b00      	cmp	r3, #0
 800631e:	d128      	bne.n	8006372 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	4619      	mov	r1, r3
 8006326:	69f8      	ldr	r0, [r7, #28]
 8006328:	f7fe ff28 	bl	800517c <move_window>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006332:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006336:	2b00      	cmp	r3, #0
 8006338:	d11b      	bne.n	8006372 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	2220      	movs	r2, #32
 8006340:	2100      	movs	r1, #0
 8006342:	4618      	mov	r0, r3
 8006344:	f7fe fd0d 	bl	8004d62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a18      	ldr	r0, [r3, #32]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3324      	adds	r3, #36	@ 0x24
 8006350:	220b      	movs	r2, #11
 8006352:	4619      	mov	r1, r3
 8006354:	f7fe fce4 	bl	8004d20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	330c      	adds	r3, #12
 8006364:	f002 0218 	and.w	r2, r2, #24
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	2201      	movs	r2, #1
 8006370:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006372:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006376:	4618      	mov	r0, r3
 8006378:	3730      	adds	r7, #48	@ 0x30
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	4ec4ec4f 	.word	0x4ec4ec4f

08006384 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	@ 0x28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	61ba      	str	r2, [r7, #24]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4413      	add	r3, r2
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80063b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063b4:	2b1f      	cmp	r3, #31
 80063b6:	d940      	bls.n	800643a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80063b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80063bc:	d006      	beq.n	80063cc <create_name+0x48>
 80063be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80063c2:	d110      	bne.n	80063e6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80063c4:	e002      	b.n	80063cc <create_name+0x48>
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	3301      	adds	r3, #1
 80063ca:	61bb      	str	r3, [r7, #24]
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	4413      	add	r3, r2
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80063d6:	d0f6      	beq.n	80063c6 <create_name+0x42>
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	4413      	add	r3, r2
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80063e2:	d0f0      	beq.n	80063c6 <create_name+0x42>
			break;
 80063e4:	e02a      	b.n	800643c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80063ea:	d901      	bls.n	80063f0 <create_name+0x6c>
 80063ec:	2306      	movs	r3, #6
 80063ee:	e17d      	b.n	80066ec <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80063f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80063f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063f8:	2101      	movs	r1, #1
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fe48 	bl	8008090 <ff_convert>
 8006400:	4603      	mov	r3, r0
 8006402:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006404:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <create_name+0x8a>
 800640a:	2306      	movs	r3, #6
 800640c:	e16e      	b.n	80066ec <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800640e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006410:	2b7f      	cmp	r3, #127	@ 0x7f
 8006412:	d809      	bhi.n	8006428 <create_name+0xa4>
 8006414:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006416:	4619      	mov	r1, r3
 8006418:	488d      	ldr	r0, [pc, #564]	@ (8006650 <create_name+0x2cc>)
 800641a:	f7fe fce4 	bl	8004de6 <chk_chr>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <create_name+0xa4>
 8006424:	2306      	movs	r3, #6
 8006426:	e161      	b.n	80066ec <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	617a      	str	r2, [r7, #20]
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006436:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006438:	e7b4      	b.n	80063a4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800643a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	441a      	add	r2, r3
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006446:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006448:	2b1f      	cmp	r3, #31
 800644a:	d801      	bhi.n	8006450 <create_name+0xcc>
 800644c:	2304      	movs	r3, #4
 800644e:	e000      	b.n	8006452 <create_name+0xce>
 8006450:	2300      	movs	r3, #0
 8006452:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006456:	e011      	b.n	800647c <create_name+0xf8>
		w = lfn[di - 1];
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800645e:	3b01      	subs	r3, #1
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4413      	add	r3, r2
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800646a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800646c:	2b20      	cmp	r3, #32
 800646e:	d002      	beq.n	8006476 <create_name+0xf2>
 8006470:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006472:	2b2e      	cmp	r3, #46	@ 0x2e
 8006474:	d106      	bne.n	8006484 <create_name+0x100>
		di--;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	3b01      	subs	r3, #1
 800647a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1ea      	bne.n	8006458 <create_name+0xd4>
 8006482:	e000      	b.n	8006486 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006484:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	2200      	movs	r2, #0
 8006490:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <create_name+0x118>
 8006498:	2306      	movs	r3, #6
 800649a:	e127      	b.n	80066ec <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3324      	adds	r3, #36	@ 0x24
 80064a0:	220b      	movs	r2, #11
 80064a2:	2120      	movs	r1, #32
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe fc5c 	bl	8004d62 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80064aa:	2300      	movs	r3, #0
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e002      	b.n	80064b6 <create_name+0x132>
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	3301      	adds	r3, #1
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d0f5      	beq.n	80064b0 <create_name+0x12c>
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80064d0:	d0ee      	beq.n	80064b0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d009      	beq.n	80064ec <create_name+0x168>
 80064d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064dc:	f043 0303 	orr.w	r3, r3, #3
 80064e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80064e4:	e002      	b.n	80064ec <create_name+0x168>
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <create_name+0x182>
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80064f8:	3b01      	subs	r3, #1
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	2b2e      	cmp	r3, #46	@ 0x2e
 8006504:	d1ef      	bne.n	80064e6 <create_name+0x162>

	i = b = 0; ni = 8;
 8006506:	2300      	movs	r3, #0
 8006508:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800650c:	2300      	movs	r3, #0
 800650e:	623b      	str	r3, [r7, #32]
 8006510:	2308      	movs	r3, #8
 8006512:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	61ba      	str	r2, [r7, #24]
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4413      	add	r3, r2
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006524:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 8090 	beq.w	800664c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800652c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800652e:	2b20      	cmp	r3, #32
 8006530:	d006      	beq.n	8006540 <create_name+0x1bc>
 8006532:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006534:	2b2e      	cmp	r3, #46	@ 0x2e
 8006536:	d10a      	bne.n	800654e <create_name+0x1ca>
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	429a      	cmp	r2, r3
 800653e:	d006      	beq.n	800654e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006544:	f043 0303 	orr.w	r3, r3, #3
 8006548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800654c:	e07d      	b.n	800664a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800654e:	6a3a      	ldr	r2, [r7, #32]
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	429a      	cmp	r2, r3
 8006554:	d203      	bcs.n	800655e <create_name+0x1da>
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	429a      	cmp	r2, r3
 800655c:	d123      	bne.n	80065a6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	2b0b      	cmp	r3, #11
 8006562:	d106      	bne.n	8006572 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006568:	f043 0303 	orr.w	r3, r3, #3
 800656c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006570:	e075      	b.n	800665e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	429a      	cmp	r2, r3
 8006578:	d005      	beq.n	8006586 <create_name+0x202>
 800657a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800657e:	f043 0303 	orr.w	r3, r3, #3
 8006582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	429a      	cmp	r2, r3
 800658c:	d866      	bhi.n	800665c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	2308      	movs	r3, #8
 8006594:	623b      	str	r3, [r7, #32]
 8006596:	230b      	movs	r3, #11
 8006598:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800659a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80065a4:	e051      	b.n	800664a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80065a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80065aa:	d914      	bls.n	80065d6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80065ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065ae:	2100      	movs	r1, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f001 fd6d 	bl	8008090 <ff_convert>
 80065b6:	4603      	mov	r3, r0
 80065b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80065ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <create_name+0x246>
 80065c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065c2:	3b80      	subs	r3, #128	@ 0x80
 80065c4:	4a23      	ldr	r2, [pc, #140]	@ (8006654 <create_name+0x2d0>)
 80065c6:	5cd3      	ldrb	r3, [r2, r3]
 80065c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80065ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065ce:	f043 0302 	orr.w	r3, r3, #2
 80065d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80065d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <create_name+0x268>
 80065dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065de:	4619      	mov	r1, r3
 80065e0:	481d      	ldr	r0, [pc, #116]	@ (8006658 <create_name+0x2d4>)
 80065e2:	f7fe fc00 	bl	8004de6 <chk_chr>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80065ec:	235f      	movs	r3, #95	@ 0x5f
 80065ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80065f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065f4:	f043 0303 	orr.w	r3, r3, #3
 80065f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80065fc:	e01b      	b.n	8006636 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80065fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006600:	2b40      	cmp	r3, #64	@ 0x40
 8006602:	d909      	bls.n	8006618 <create_name+0x294>
 8006604:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006606:	2b5a      	cmp	r3, #90	@ 0x5a
 8006608:	d806      	bhi.n	8006618 <create_name+0x294>
					b |= 2;
 800660a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800660e:	f043 0302 	orr.w	r3, r3, #2
 8006612:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006616:	e00e      	b.n	8006636 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800661a:	2b60      	cmp	r3, #96	@ 0x60
 800661c:	d90b      	bls.n	8006636 <create_name+0x2b2>
 800661e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006620:	2b7a      	cmp	r3, #122	@ 0x7a
 8006622:	d808      	bhi.n	8006636 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006624:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006630:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006632:	3b20      	subs	r3, #32
 8006634:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	623a      	str	r2, [r7, #32]
 800663c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800663e:	b2d1      	uxtb	r1, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	4413      	add	r3, r2
 8006644:	460a      	mov	r2, r1
 8006646:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800664a:	e763      	b.n	8006514 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800664c:	bf00      	nop
 800664e:	e006      	b.n	800665e <create_name+0x2da>
 8006650:	0800ab74 	.word	0x0800ab74
 8006654:	0800abe0 	.word	0x0800abe0
 8006658:	0800ab80 	.word	0x0800ab80
			if (si > di) break;			/* No extension */
 800665c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006664:	2be5      	cmp	r3, #229	@ 0xe5
 8006666:	d103      	bne.n	8006670 <create_name+0x2ec>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2205      	movs	r2, #5
 800666c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	2b08      	cmp	r3, #8
 8006674:	d104      	bne.n	8006680 <create_name+0x2fc>
 8006676:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006680:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006684:	f003 030c 	and.w	r3, r3, #12
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d005      	beq.n	8006698 <create_name+0x314>
 800668c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006690:	f003 0303 	and.w	r3, r3, #3
 8006694:	2b03      	cmp	r3, #3
 8006696:	d105      	bne.n	80066a4 <create_name+0x320>
 8006698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800669c:	f043 0302 	orr.w	r3, r3, #2
 80066a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80066a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d117      	bne.n	80066e0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80066b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d105      	bne.n	80066c8 <create_name+0x344>
 80066bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066c0:	f043 0310 	orr.w	r3, r3, #16
 80066c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80066c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066cc:	f003 030c 	and.w	r3, r3, #12
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d105      	bne.n	80066e0 <create_name+0x35c>
 80066d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066d8:	f043 0308 	orr.w	r3, r3, #8
 80066dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80066e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80066ea:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3728      	adds	r7, #40	@ 0x28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006708:	e002      	b.n	8006710 <follow_path+0x1c>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	3301      	adds	r3, #1
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b2f      	cmp	r3, #47	@ 0x2f
 8006716:	d0f8      	beq.n	800670a <follow_path+0x16>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b5c      	cmp	r3, #92	@ 0x5c
 800671e:	d0f4      	beq.n	800670a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2200      	movs	r2, #0
 8006724:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b1f      	cmp	r3, #31
 800672c:	d80a      	bhi.n	8006744 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2280      	movs	r2, #128	@ 0x80
 8006732:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8006736:	2100      	movs	r1, #0
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff f8fe 	bl	800593a <dir_sdi>
 800673e:	4603      	mov	r3, r0
 8006740:	75fb      	strb	r3, [r7, #23]
 8006742:	e048      	b.n	80067d6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006744:	463b      	mov	r3, r7
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff fe1b 	bl	8006384 <create_name>
 800674e:	4603      	mov	r3, r0
 8006750:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006752:	7dfb      	ldrb	r3, [r7, #23]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d139      	bne.n	80067cc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff fc5a 	bl	8006012 <dir_find>
 800675e:	4603      	mov	r3, r0
 8006760:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006768:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	2b04      	cmp	r3, #4
 8006774:	d12c      	bne.n	80067d0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006776:	7afb      	ldrb	r3, [r7, #11]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d127      	bne.n	80067d0 <follow_path+0xdc>
 8006780:	2305      	movs	r3, #5
 8006782:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006784:	e024      	b.n	80067d0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006786:	7afb      	ldrb	r3, [r7, #11]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d121      	bne.n	80067d4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	799b      	ldrb	r3, [r3, #6]
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	2b00      	cmp	r3, #0
 800679a:	d102      	bne.n	80067a2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800679c:	2305      	movs	r3, #5
 800679e:	75fb      	strb	r3, [r7, #23]
 80067a0:	e019      	b.n	80067d6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	8992      	ldrh	r2, [r2, #12]
 80067b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80067b4:	fb00 f202 	mul.w	r2, r0, r2
 80067b8:	1a9b      	subs	r3, r3, r2
 80067ba:	440b      	add	r3, r1
 80067bc:	4619      	mov	r1, r3
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7ff fa61 	bl	8005c86 <ld_clust>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067ca:	e7bb      	b.n	8006744 <follow_path+0x50>
			if (res != FR_OK) break;
 80067cc:	bf00      	nop
 80067ce:	e002      	b.n	80067d6 <follow_path+0xe2>
				break;
 80067d0:	bf00      	nop
 80067d2:	e000      	b.n	80067d6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80067d4:	bf00      	nop
			}
		}
	}

	return res;
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80067e8:	f04f 33ff 	mov.w	r3, #4294967295
 80067ec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d031      	beq.n	800685a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e002      	b.n	8006804 <get_ldnumber+0x24>
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	3301      	adds	r3, #1
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b1f      	cmp	r3, #31
 800680a:	d903      	bls.n	8006814 <get_ldnumber+0x34>
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b3a      	cmp	r3, #58	@ 0x3a
 8006812:	d1f4      	bne.n	80067fe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b3a      	cmp	r3, #58	@ 0x3a
 800681a:	d11c      	bne.n	8006856 <get_ldnumber+0x76>
			tp = *path;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	60fa      	str	r2, [r7, #12]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	3b30      	subs	r3, #48	@ 0x30
 800682c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b09      	cmp	r3, #9
 8006832:	d80e      	bhi.n	8006852 <get_ldnumber+0x72>
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	429a      	cmp	r2, r3
 800683a:	d10a      	bne.n	8006852 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d107      	bne.n	8006852 <get_ldnumber+0x72>
					vol = (int)i;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	3301      	adds	r3, #1
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	e002      	b.n	800685c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006856:	2300      	movs	r3, #0
 8006858:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800685a:	693b      	ldr	r3, [r7, #16]
}
 800685c:	4618      	mov	r0, r3
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	70da      	strb	r2, [r3, #3]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f04f 32ff 	mov.w	r2, #4294967295
 800687e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fe fc7a 	bl	800517c <move_window>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <check_fs+0x2a>
 800688e:	2304      	movs	r3, #4
 8006890:	e038      	b.n	8006904 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3338      	adds	r3, #56	@ 0x38
 8006896:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800689a:	4618      	mov	r0, r3
 800689c:	f7fe f9be 	bl	8004c1c <ld_word>
 80068a0:	4603      	mov	r3, r0
 80068a2:	461a      	mov	r2, r3
 80068a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d001      	beq.n	80068b0 <check_fs+0x48>
 80068ac:	2303      	movs	r3, #3
 80068ae:	e029      	b.n	8006904 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068b6:	2be9      	cmp	r3, #233	@ 0xe9
 80068b8:	d009      	beq.n	80068ce <check_fs+0x66>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068c0:	2beb      	cmp	r3, #235	@ 0xeb
 80068c2:	d11e      	bne.n	8006902 <check_fs+0x9a>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80068ca:	2b90      	cmp	r3, #144	@ 0x90
 80068cc:	d119      	bne.n	8006902 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3338      	adds	r3, #56	@ 0x38
 80068d2:	3336      	adds	r3, #54	@ 0x36
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fe f9b9 	bl	8004c4c <ld_dword>
 80068da:	4603      	mov	r3, r0
 80068dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80068e0:	4a0a      	ldr	r2, [pc, #40]	@ (800690c <check_fs+0xa4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d101      	bne.n	80068ea <check_fs+0x82>
 80068e6:	2300      	movs	r3, #0
 80068e8:	e00c      	b.n	8006904 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3338      	adds	r3, #56	@ 0x38
 80068ee:	3352      	adds	r3, #82	@ 0x52
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fe f9ab 	bl	8004c4c <ld_dword>
 80068f6:	4603      	mov	r3, r0
 80068f8:	4a05      	ldr	r2, [pc, #20]	@ (8006910 <check_fs+0xa8>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d101      	bne.n	8006902 <check_fs+0x9a>
 80068fe:	2300      	movs	r3, #0
 8006900:	e000      	b.n	8006904 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006902:	2302      	movs	r3, #2
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	00544146 	.word	0x00544146
 8006910:	33544146 	.word	0x33544146

08006914 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b096      	sub	sp, #88	@ 0x58
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	4613      	mov	r3, r2
 8006920:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f7ff ff59 	bl	80067e0 <get_ldnumber>
 800692e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006932:	2b00      	cmp	r3, #0
 8006934:	da01      	bge.n	800693a <find_volume+0x26>
 8006936:	230b      	movs	r3, #11
 8006938:	e265      	b.n	8006e06 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800693a:	4a9f      	ldr	r2, [pc, #636]	@ (8006bb8 <find_volume+0x2a4>)
 800693c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800693e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006942:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <find_volume+0x3a>
 800694a:	230c      	movs	r3, #12
 800694c:	e25b      	b.n	8006e06 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006952:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006954:	79fb      	ldrb	r3, [r7, #7]
 8006956:	f023 0301 	bic.w	r3, r3, #1
 800695a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800695c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d01a      	beq.n	800699a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006966:	785b      	ldrb	r3, [r3, #1]
 8006968:	4618      	mov	r0, r3
 800696a:	f7fe f8b7 	bl	8004adc <disk_status>
 800696e:	4603      	mov	r3, r0
 8006970:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006974:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10c      	bne.n	800699a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <find_volume+0x82>
 8006986:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006992:	230a      	movs	r3, #10
 8006994:	e237      	b.n	8006e06 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006996:	2300      	movs	r3, #0
 8006998:	e235      	b.n	8006e06 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800699a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699c:	2200      	movs	r2, #0
 800699e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80069a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80069a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069aa:	785b      	ldrb	r3, [r3, #1]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe f8af 	bl	8004b10 <disk_initialize>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80069b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80069c4:	2303      	movs	r3, #3
 80069c6:	e21e      	b.n	8006e06 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80069c8:	79fb      	ldrb	r3, [r7, #7]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d007      	beq.n	80069de <find_volume+0xca>
 80069ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80069da:	230a      	movs	r3, #10
 80069dc:	e213      	b.n	8006e06 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80069de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e0:	7858      	ldrb	r0, [r3, #1]
 80069e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e4:	330c      	adds	r3, #12
 80069e6:	461a      	mov	r2, r3
 80069e8:	2102      	movs	r1, #2
 80069ea:	f7fe f8f9 	bl	8004be0 <disk_ioctl>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <find_volume+0xe4>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e206      	b.n	8006e06 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80069f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fa:	899b      	ldrh	r3, [r3, #12]
 80069fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a00:	d80d      	bhi.n	8006a1e <find_volume+0x10a>
 8006a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a04:	899b      	ldrh	r3, [r3, #12]
 8006a06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a0a:	d308      	bcc.n	8006a1e <find_volume+0x10a>
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0e:	899b      	ldrh	r3, [r3, #12]
 8006a10:	461a      	mov	r2, r3
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	899b      	ldrh	r3, [r3, #12]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	4013      	ands	r3, r2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <find_volume+0x10e>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e1f1      	b.n	8006e06 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006a26:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a28:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a2a:	f7ff ff1d 	bl	8006868 <check_fs>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006a34:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d149      	bne.n	8006ad0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a40:	e01e      	b.n	8006a80 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006a50:	4413      	add	r3, r2
 8006a52:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a56:	3304      	adds	r3, #4
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d006      	beq.n	8006a6c <find_volume+0x158>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	3308      	adds	r3, #8
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe f8f2 	bl	8004c4c <ld_dword>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	e000      	b.n	8006a6e <find_volume+0x15a>
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	3358      	adds	r3, #88	@ 0x58
 8006a74:	443b      	add	r3, r7
 8006a76:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d9dd      	bls.n	8006a42 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006a86:	2300      	movs	r3, #0
 8006a88:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <find_volume+0x182>
 8006a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a92:	3b01      	subs	r3, #1
 8006a94:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	3358      	adds	r3, #88	@ 0x58
 8006a9c:	443b      	add	r3, r7
 8006a9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006aa2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <find_volume+0x1a2>
 8006aaa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006aac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006aae:	f7ff fedb 	bl	8006868 <check_fs>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	e000      	b.n	8006ab8 <find_volume+0x1a4>
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006abc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d905      	bls.n	8006ad0 <find_volume+0x1bc>
 8006ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006acc:	2b03      	cmp	r3, #3
 8006ace:	d9e2      	bls.n	8006a96 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006ad0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d101      	bne.n	8006adc <find_volume+0x1c8>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e194      	b.n	8006e06 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006adc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d901      	bls.n	8006ae8 <find_volume+0x1d4>
 8006ae4:	230d      	movs	r3, #13
 8006ae6:	e18e      	b.n	8006e06 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aea:	3338      	adds	r3, #56	@ 0x38
 8006aec:	330b      	adds	r3, #11
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe f894 	bl	8004c1c <ld_word>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afa:	899b      	ldrh	r3, [r3, #12]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d001      	beq.n	8006b04 <find_volume+0x1f0>
 8006b00:	230d      	movs	r3, #13
 8006b02:	e180      	b.n	8006e06 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b06:	3338      	adds	r3, #56	@ 0x38
 8006b08:	3316      	adds	r3, #22
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe f886 	bl	8004c1c <ld_word>
 8006b10:	4603      	mov	r3, r0
 8006b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <find_volume+0x214>
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1c:	3338      	adds	r3, #56	@ 0x38
 8006b1e:	3324      	adds	r3, #36	@ 0x24
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe f893 	bl	8004c4c <ld_dword>
 8006b26:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b2c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b30:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8006b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3a:	789b      	ldrb	r3, [r3, #2]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d005      	beq.n	8006b4c <find_volume+0x238>
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	789b      	ldrb	r3, [r3, #2]
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d001      	beq.n	8006b4c <find_volume+0x238>
 8006b48:	230d      	movs	r3, #13
 8006b4a:	e15c      	b.n	8006e06 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4e:	789b      	ldrb	r3, [r3, #2]
 8006b50:	461a      	mov	r2, r3
 8006b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b54:	fb02 f303 	mul.w	r3, r2, r3
 8006b58:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b60:	461a      	mov	r2, r3
 8006b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b68:	895b      	ldrh	r3, [r3, #10]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d008      	beq.n	8006b80 <find_volume+0x26c>
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b70:	895b      	ldrh	r3, [r3, #10]
 8006b72:	461a      	mov	r2, r3
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	895b      	ldrh	r3, [r3, #10]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <find_volume+0x270>
 8006b80:	230d      	movs	r3, #13
 8006b82:	e140      	b.n	8006e06 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b86:	3338      	adds	r3, #56	@ 0x38
 8006b88:	3311      	adds	r3, #17
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fe f846 	bl	8004c1c <ld_word>
 8006b90:	4603      	mov	r3, r0
 8006b92:	461a      	mov	r2, r3
 8006b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9a:	891b      	ldrh	r3, [r3, #8]
 8006b9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b9e:	8992      	ldrh	r2, [r2, #12]
 8006ba0:	0952      	lsrs	r2, r2, #5
 8006ba2:	b292      	uxth	r2, r2
 8006ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ba8:	fb01 f202 	mul.w	r2, r1, r2
 8006bac:	1a9b      	subs	r3, r3, r2
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <find_volume+0x2a8>
 8006bb4:	230d      	movs	r3, #13
 8006bb6:	e126      	b.n	8006e06 <find_volume+0x4f2>
 8006bb8:	200007e8 	.word	0x200007e8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbe:	3338      	adds	r3, #56	@ 0x38
 8006bc0:	3313      	adds	r3, #19
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe f82a 	bl	8004c1c <ld_word>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <find_volume+0x2cc>
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd4:	3338      	adds	r3, #56	@ 0x38
 8006bd6:	3320      	adds	r3, #32
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fe f837 	bl	8004c4c <ld_dword>
 8006bde:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be2:	3338      	adds	r3, #56	@ 0x38
 8006be4:	330e      	adds	r3, #14
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe f818 	bl	8004c1c <ld_word>
 8006bec:	4603      	mov	r3, r0
 8006bee:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006bf0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <find_volume+0x2e6>
 8006bf6:	230d      	movs	r3, #13
 8006bf8:	e105      	b.n	8006e06 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006bfa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bfe:	4413      	add	r3, r2
 8006c00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c02:	8911      	ldrh	r1, [r2, #8]
 8006c04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c06:	8992      	ldrh	r2, [r2, #12]
 8006c08:	0952      	lsrs	r2, r2, #5
 8006c0a:	b292      	uxth	r2, r2
 8006c0c:	fbb1 f2f2 	udiv	r2, r1, r2
 8006c10:	b292      	uxth	r2, r2
 8006c12:	4413      	add	r3, r2
 8006c14:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006c16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d201      	bcs.n	8006c22 <find_volume+0x30e>
 8006c1e:	230d      	movs	r3, #13
 8006c20:	e0f1      	b.n	8006e06 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c2a:	8952      	ldrh	r2, [r2, #10]
 8006c2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <find_volume+0x328>
 8006c38:	230d      	movs	r3, #13
 8006c3a:	e0e4      	b.n	8006e06 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d802      	bhi.n	8006c52 <find_volume+0x33e>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c54:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d802      	bhi.n	8006c62 <find_volume+0x34e>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	1c9a      	adds	r2, r3, #2
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c6e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006c70:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c74:	441a      	add	r2, r3
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006c7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7e:	441a      	add	r2, r3
 8006c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c82:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006c84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d11e      	bne.n	8006cca <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8e:	3338      	adds	r3, #56	@ 0x38
 8006c90:	332a      	adds	r3, #42	@ 0x2a
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fd ffc2 	bl	8004c1c <ld_word>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <find_volume+0x38e>
 8006c9e:	230d      	movs	r3, #13
 8006ca0:	e0b1      	b.n	8006e06 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	891b      	ldrh	r3, [r3, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <find_volume+0x39a>
 8006caa:	230d      	movs	r3, #13
 8006cac:	e0ab      	b.n	8006e06 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb0:	3338      	adds	r3, #56	@ 0x38
 8006cb2:	332c      	adds	r3, #44	@ 0x2c
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fd ffc9 	bl	8004c4c <ld_dword>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cc8:	e01f      	b.n	8006d0a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	891b      	ldrh	r3, [r3, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <find_volume+0x3c2>
 8006cd2:	230d      	movs	r3, #13
 8006cd4:	e097      	b.n	8006e06 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cdc:	441a      	add	r2, r3
 8006cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d103      	bne.n	8006cf2 <find_volume+0x3de>
 8006cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	005b      	lsls	r3, r3, #1
 8006cf0:	e00a      	b.n	8006d08 <find_volume+0x3f4>
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf4:	69da      	ldr	r2, [r3, #28]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	4413      	add	r3, r2
 8006cfc:	085a      	lsrs	r2, r3, #1
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006d08:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0c:	6a1a      	ldr	r2, [r3, #32]
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d10:	899b      	ldrh	r3, [r3, #12]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d16:	440b      	add	r3, r1
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d1c:	8989      	ldrh	r1, [r1, #12]
 8006d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d201      	bcs.n	8006d2a <find_volume+0x416>
 8006d26:	230d      	movs	r3, #13
 8006d28:	e06d      	b.n	8006e06 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d30:	619a      	str	r2, [r3, #24]
 8006d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d34:	699a      	ldr	r2, [r3, #24]
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3c:	2280      	movs	r2, #128	@ 0x80
 8006d3e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006d40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d149      	bne.n	8006ddc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4a:	3338      	adds	r3, #56	@ 0x38
 8006d4c:	3330      	adds	r3, #48	@ 0x30
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fd ff64 	bl	8004c1c <ld_word>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d140      	bne.n	8006ddc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d62:	f7fe fa0b 	bl	800517c <move_window>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d137      	bne.n	8006ddc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6e:	2200      	movs	r2, #0
 8006d70:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d74:	3338      	adds	r3, #56	@ 0x38
 8006d76:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fd ff4e 	bl	8004c1c <ld_word>
 8006d80:	4603      	mov	r3, r0
 8006d82:	461a      	mov	r2, r3
 8006d84:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d127      	bne.n	8006ddc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8e:	3338      	adds	r3, #56	@ 0x38
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fd ff5b 	bl	8004c4c <ld_dword>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <find_volume+0x4fc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d11e      	bne.n	8006ddc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da0:	3338      	adds	r3, #56	@ 0x38
 8006da2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fd ff50 	bl	8004c4c <ld_dword>
 8006dac:	4603      	mov	r3, r0
 8006dae:	4a19      	ldr	r2, [pc, #100]	@ (8006e14 <find_volume+0x500>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d113      	bne.n	8006ddc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db6:	3338      	adds	r3, #56	@ 0x38
 8006db8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fd ff45 	bl	8004c4c <ld_dword>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	3338      	adds	r3, #56	@ 0x38
 8006dcc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fd ff3b 	bl	8004c4c <ld_dword>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dda:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dde:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006de2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006de4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e18 <find_volume+0x504>)
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	3301      	adds	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	4b0a      	ldr	r3, [pc, #40]	@ (8006e18 <find_volume+0x504>)
 8006dee:	801a      	strh	r2, [r3, #0]
 8006df0:	4b09      	ldr	r3, [pc, #36]	@ (8006e18 <find_volume+0x504>)
 8006df2:	881a      	ldrh	r2, [r3, #0]
 8006df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfa:	4a08      	ldr	r2, [pc, #32]	@ (8006e1c <find_volume+0x508>)
 8006dfc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006dfe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e00:	f7fe f954 	bl	80050ac <clear_lock>
#endif
	return FR_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3758      	adds	r7, #88	@ 0x58
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	41615252 	.word	0x41615252
 8006e14:	61417272 	.word	0x61417272
 8006e18:	200007ec 	.word	0x200007ec
 8006e1c:	20000810 	.word	0x20000810

08006e20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006e2a:	2309      	movs	r3, #9
 8006e2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d01c      	beq.n	8006e6e <validate+0x4e>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d018      	beq.n	8006e6e <validate+0x4e>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d013      	beq.n	8006e6e <validate+0x4e>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	889a      	ldrh	r2, [r3, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	88db      	ldrh	r3, [r3, #6]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d10c      	bne.n	8006e6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	785b      	ldrb	r3, [r3, #1]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fd fe3e 	bl	8004adc <disk_status>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <validate+0x4e>
			res = FR_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d102      	bne.n	8006e7a <validate+0x5a>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	e000      	b.n	8006e7c <validate+0x5c>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	6013      	str	r3, [r2, #0]
	return res;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006e9e:	f107 0310 	add.w	r3, r7, #16
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fc9c 	bl	80067e0 <get_ldnumber>
 8006ea8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	da01      	bge.n	8006eb4 <f_mount+0x28>
 8006eb0:	230b      	movs	r3, #11
 8006eb2:	e02b      	b.n	8006f0c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006eb4:	4a17      	ldr	r2, [pc, #92]	@ (8006f14 <f_mount+0x88>)
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ebc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d005      	beq.n	8006ed0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006ec4:	69b8      	ldr	r0, [r7, #24]
 8006ec6:	f7fe f8f1 	bl	80050ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	490d      	ldr	r1, [pc, #52]	@ (8006f14 <f_mount+0x88>)
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <f_mount+0x66>
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d001      	beq.n	8006ef6 <f_mount+0x6a>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e00a      	b.n	8006f0c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006ef6:	f107 010c 	add.w	r1, r7, #12
 8006efa:	f107 0308 	add.w	r3, r7, #8
 8006efe:	2200      	movs	r2, #0
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff fd07 	bl	8006914 <find_volume>
 8006f06:	4603      	mov	r3, r0
 8006f08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3720      	adds	r7, #32
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	200007e8 	.word	0x200007e8

08006f18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b09a      	sub	sp, #104	@ 0x68
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4613      	mov	r3, r2
 8006f24:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <f_open+0x18>
 8006f2c:	2309      	movs	r3, #9
 8006f2e:	e1b7      	b.n	80072a0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006f30:	79fb      	ldrb	r3, [r7, #7]
 8006f32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f36:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006f38:	79fa      	ldrb	r2, [r7, #7]
 8006f3a:	f107 0114 	add.w	r1, r7, #20
 8006f3e:	f107 0308 	add.w	r3, r7, #8
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff fce6 	bl	8006914 <find_volume>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006f4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f040 819b 	bne.w	800728e <f_open+0x376>
		dj.obj.fs = fs;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	f107 0318 	add.w	r3, r7, #24
 8006f62:	4611      	mov	r1, r2
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff fbc5 	bl	80066f4 <follow_path>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006f70:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d118      	bne.n	8006faa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006f78:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006f7c:	b25b      	sxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	da03      	bge.n	8006f8a <f_open+0x72>
				res = FR_INVALID_NAME;
 8006f82:	2306      	movs	r3, #6
 8006f84:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006f88:	e00f      	b.n	8006faa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	bf8c      	ite	hi
 8006f90:	2301      	movhi	r3, #1
 8006f92:	2300      	movls	r3, #0
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	461a      	mov	r2, r3
 8006f98:	f107 0318 	add.w	r3, r7, #24
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fd ff3c 	bl	8004e1c <chk_lock>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	f003 031c 	and.w	r3, r3, #28
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d07f      	beq.n	80070b4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006fb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d017      	beq.n	8006fec <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006fbc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	d10e      	bne.n	8006fe2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006fc4:	f7fd ff86 	bl	8004ed4 <enq_lock>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d006      	beq.n	8006fdc <f_open+0xc4>
 8006fce:	f107 0318 	add.w	r3, r7, #24
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7ff f8de 	bl	8006194 <dir_register>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	e000      	b.n	8006fde <f_open+0xc6>
 8006fdc:	2312      	movs	r3, #18
 8006fde:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	f043 0308 	orr.w	r3, r3, #8
 8006fe8:	71fb      	strb	r3, [r7, #7]
 8006fea:	e010      	b.n	800700e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006fec:	7fbb      	ldrb	r3, [r7, #30]
 8006fee:	f003 0311 	and.w	r3, r3, #17
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <f_open+0xe6>
					res = FR_DENIED;
 8006ff6:	2307      	movs	r3, #7
 8006ff8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006ffc:	e007      	b.n	800700e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <f_open+0xf6>
 8007008:	2308      	movs	r3, #8
 800700a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800700e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007012:	2b00      	cmp	r3, #0
 8007014:	d168      	bne.n	80070e8 <f_open+0x1d0>
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	f003 0308 	and.w	r3, r3, #8
 800701c:	2b00      	cmp	r3, #0
 800701e:	d063      	beq.n	80070e8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007020:	f7fd f83a 	bl	8004098 <get_fattime>
 8007024:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007028:	330e      	adds	r3, #14
 800702a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800702c:	4618      	mov	r0, r3
 800702e:	f7fd fe4b 	bl	8004cc8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007034:	3316      	adds	r3, #22
 8007036:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007038:	4618      	mov	r0, r3
 800703a:	f7fd fe45 	bl	8004cc8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800703e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007040:	330b      	adds	r3, #11
 8007042:	2220      	movs	r2, #32
 8007044:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800704a:	4611      	mov	r1, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fe1a 	bl	8005c86 <ld_clust>
 8007052:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007058:	2200      	movs	r2, #0
 800705a:	4618      	mov	r0, r3
 800705c:	f7fe fe32 	bl	8005cc4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007062:	331c      	adds	r3, #28
 8007064:	2100      	movs	r1, #0
 8007066:	4618      	mov	r0, r3
 8007068:	f7fd fe2e 	bl	8004cc8 <st_dword>
					fs->wflag = 1;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2201      	movs	r2, #1
 8007070:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007074:	2b00      	cmp	r3, #0
 8007076:	d037      	beq.n	80070e8 <f_open+0x1d0>
						dw = fs->winsect;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800707c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800707e:	f107 0318 	add.w	r3, r7, #24
 8007082:	2200      	movs	r2, #0
 8007084:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fb22 	bl	80056d0 <remove_chain>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8007092:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007096:	2b00      	cmp	r3, #0
 8007098:	d126      	bne.n	80070e8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe f86c 	bl	800517c <move_window>
 80070a4:	4603      	mov	r3, r0
 80070a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80070ae:	3a01      	subs	r2, #1
 80070b0:	615a      	str	r2, [r3, #20]
 80070b2:	e019      	b.n	80070e8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80070b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d115      	bne.n	80070e8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80070bc:	7fbb      	ldrb	r3, [r7, #30]
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <f_open+0x1b6>
					res = FR_NO_FILE;
 80070c6:	2304      	movs	r3, #4
 80070c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80070cc:	e00c      	b.n	80070e8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d007      	beq.n	80070e8 <f_open+0x1d0>
 80070d8:	7fbb      	ldrb	r3, [r7, #30]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <f_open+0x1d0>
						res = FR_DENIED;
 80070e2:	2307      	movs	r3, #7
 80070e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80070e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d126      	bne.n	800713e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	f003 0308 	and.w	r3, r3, #8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007100:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800710a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	2b01      	cmp	r3, #1
 8007114:	bf8c      	ite	hi
 8007116:	2301      	movhi	r3, #1
 8007118:	2300      	movls	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	461a      	mov	r2, r3
 800711e:	f107 0318 	add.w	r3, r7, #24
 8007122:	4611      	mov	r1, r2
 8007124:	4618      	mov	r0, r3
 8007126:	f7fd fef7 	bl	8004f18 <inc_lock>
 800712a:	4602      	mov	r2, r0
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d102      	bne.n	800713e <f_open+0x226>
 8007138:	2302      	movs	r3, #2
 800713a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800713e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007142:	2b00      	cmp	r3, #0
 8007144:	f040 80a3 	bne.w	800728e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800714c:	4611      	mov	r1, r2
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fd99 	bl	8005c86 <ld_clust>
 8007154:	4602      	mov	r2, r0
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800715a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715c:	331c      	adds	r3, #28
 800715e:	4618      	mov	r0, r3
 8007160:	f7fd fd74 	bl	8004c4c <ld_dword>
 8007164:	4602      	mov	r2, r0
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	88da      	ldrh	r2, [r3, #6]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	79fa      	ldrb	r2, [r7, #7]
 8007182:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3330      	adds	r3, #48	@ 0x30
 800719a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800719e:	2100      	movs	r1, #0
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fd fdde 	bl	8004d62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80071a6:	79fb      	ldrb	r3, [r7, #7]
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d06e      	beq.n	800728e <f_open+0x376>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d06a      	beq.n	800728e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	895b      	ldrh	r3, [r3, #10]
 80071c4:	461a      	mov	r2, r3
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	899b      	ldrh	r3, [r3, #12]
 80071ca:	fb02 f303 	mul.w	r3, r2, r3
 80071ce:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071dc:	e016      	b.n	800720c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe f887 	bl	80052f6 <get_fat>
 80071e8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80071ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d802      	bhi.n	80071f6 <f_open+0x2de>
 80071f0:	2302      	movs	r3, #2
 80071f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80071f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d102      	bne.n	8007204 <f_open+0x2ec>
 80071fe:	2301      	movs	r3, #1
 8007200:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007204:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800720c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <f_open+0x304>
 8007214:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007216:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007218:	429a      	cmp	r2, r3
 800721a:	d8e0      	bhi.n	80071de <f_open+0x2c6>
				}
				fp->clust = clst;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007220:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007222:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007226:	2b00      	cmp	r3, #0
 8007228:	d131      	bne.n	800728e <f_open+0x376>
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	899b      	ldrh	r3, [r3, #12]
 800722e:	461a      	mov	r2, r3
 8007230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007232:	fbb3 f1f2 	udiv	r1, r3, r2
 8007236:	fb01 f202 	mul.w	r2, r1, r2
 800723a:	1a9b      	subs	r3, r3, r2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d026      	beq.n	800728e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe f837 	bl	80052b8 <clust2sect>
 800724a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800724c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d103      	bne.n	800725a <f_open+0x342>
						res = FR_INT_ERR;
 8007252:	2302      	movs	r3, #2
 8007254:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007258:	e019      	b.n	800728e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	899b      	ldrh	r3, [r3, #12]
 800725e:	461a      	mov	r2, r3
 8007260:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007262:	fbb3 f2f2 	udiv	r2, r3, r2
 8007266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007268:	441a      	add	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	7858      	ldrb	r0, [r3, #1]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a1a      	ldr	r2, [r3, #32]
 800727c:	2301      	movs	r3, #1
 800727e:	f7fd fc6f 	bl	8004b60 <disk_read>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <f_open+0x376>
 8007288:	2301      	movs	r3, #1
 800728a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800728e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <f_open+0x384>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800729c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3768      	adds	r7, #104	@ 0x68
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08e      	sub	sp, #56	@ 0x38
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f107 0214 	add.w	r2, r7, #20
 80072c6:	4611      	mov	r1, r2
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff fda9 	bl	8006e20 <validate>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80072d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d107      	bne.n	80072ec <f_read+0x44>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	7d5b      	ldrb	r3, [r3, #21]
 80072e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80072e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <f_read+0x4a>
 80072ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80072f0:	e135      	b.n	800755e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	7d1b      	ldrb	r3, [r3, #20]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <f_read+0x5a>
 80072fe:	2307      	movs	r3, #7
 8007300:	e12d      	b.n	800755e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	429a      	cmp	r2, r3
 8007314:	f240 811e 	bls.w	8007554 <f_read+0x2ac>
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800731c:	e11a      	b.n	8007554 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	8992      	ldrh	r2, [r2, #12]
 8007326:	fbb3 f1f2 	udiv	r1, r3, r2
 800732a:	fb01 f202 	mul.w	r2, r1, r2
 800732e:	1a9b      	subs	r3, r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	f040 80d5 	bne.w	80074e0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	8992      	ldrh	r2, [r2, #12]
 800733e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	8952      	ldrh	r2, [r2, #10]
 8007346:	3a01      	subs	r2, #1
 8007348:	4013      	ands	r3, r2
 800734a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d12f      	bne.n	80073b2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d103      	bne.n	8007362 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007360:	e013      	b.n	800738a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007366:	2b00      	cmp	r3, #0
 8007368:	d007      	beq.n	800737a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	4619      	mov	r1, r3
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f7fe faaa 	bl	80058ca <clmt_clust>
 8007376:	6338      	str	r0, [r7, #48]	@ 0x30
 8007378:	e007      	b.n	800738a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f7fd ffb7 	bl	80052f6 <get_fat>
 8007388:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800738a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738c:	2b01      	cmp	r3, #1
 800738e:	d804      	bhi.n	800739a <f_read+0xf2>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2202      	movs	r2, #2
 8007394:	755a      	strb	r2, [r3, #21]
 8007396:	2302      	movs	r3, #2
 8007398:	e0e1      	b.n	800755e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800739a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a0:	d104      	bne.n	80073ac <f_read+0x104>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	755a      	strb	r2, [r3, #21]
 80073a8:	2301      	movs	r3, #1
 80073aa:	e0d8      	b.n	800755e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073b0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	69db      	ldr	r3, [r3, #28]
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f7fd ff7c 	bl	80052b8 <clust2sect>
 80073c0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d104      	bne.n	80073d2 <f_read+0x12a>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2202      	movs	r2, #2
 80073cc:	755a      	strb	r2, [r3, #21]
 80073ce:	2302      	movs	r3, #2
 80073d0:	e0c5      	b.n	800755e <f_read+0x2b6>
			sect += csect;
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	4413      	add	r3, r2
 80073d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	899b      	ldrh	r3, [r3, #12]
 80073de:	461a      	mov	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80073e6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80073e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d041      	beq.n	8007472 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80073ee:	69fa      	ldr	r2, [r7, #28]
 80073f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f2:	4413      	add	r3, r2
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	8952      	ldrh	r2, [r2, #10]
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d905      	bls.n	8007408 <f_read+0x160>
					cc = fs->csize - csect;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	895b      	ldrh	r3, [r3, #10]
 8007400:	461a      	mov	r2, r3
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	7858      	ldrb	r0, [r3, #1]
 800740c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007412:	f7fd fba5 	bl	8004b60 <disk_read>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <f_read+0x17e>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2201      	movs	r2, #1
 8007420:	755a      	strb	r2, [r3, #21]
 8007422:	2301      	movs	r3, #1
 8007424:	e09b      	b.n	800755e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	7d1b      	ldrb	r3, [r3, #20]
 800742a:	b25b      	sxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	da18      	bge.n	8007462 <f_read+0x1ba>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a1a      	ldr	r2, [r3, #32]
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800743a:	429a      	cmp	r2, r3
 800743c:	d911      	bls.n	8007462 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6a1a      	ldr	r2, [r3, #32]
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	8992      	ldrh	r2, [r2, #12]
 800744a:	fb02 f303 	mul.w	r3, r2, r3
 800744e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007450:	18d0      	adds	r0, r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	899b      	ldrh	r3, [r3, #12]
 800745c:	461a      	mov	r2, r3
 800745e:	f7fd fc5f 	bl	8004d20 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	899b      	ldrh	r3, [r3, #12]
 8007466:	461a      	mov	r2, r3
 8007468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746a:	fb02 f303 	mul.w	r3, r2, r3
 800746e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007470:	e05c      	b.n	800752c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	429a      	cmp	r2, r3
 800747a:	d02e      	beq.n	80074da <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	7d1b      	ldrb	r3, [r3, #20]
 8007480:	b25b      	sxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	da18      	bge.n	80074b8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	7858      	ldrb	r0, [r3, #1]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a1a      	ldr	r2, [r3, #32]
 8007494:	2301      	movs	r3, #1
 8007496:	f7fd fb83 	bl	8004ba0 <disk_write>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d004      	beq.n	80074aa <f_read+0x202>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2201      	movs	r2, #1
 80074a4:	755a      	strb	r2, [r3, #21]
 80074a6:	2301      	movs	r3, #1
 80074a8:	e059      	b.n	800755e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	7d1b      	ldrb	r3, [r3, #20]
 80074ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	7858      	ldrb	r0, [r3, #1]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80074c2:	2301      	movs	r3, #1
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	f7fd fb4b 	bl	8004b60 <disk_read>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d004      	beq.n	80074da <f_read+0x232>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2201      	movs	r2, #1
 80074d4:	755a      	strb	r2, [r3, #21]
 80074d6:	2301      	movs	r3, #1
 80074d8:	e041      	b.n	800755e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	899b      	ldrh	r3, [r3, #12]
 80074e4:	4618      	mov	r0, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	8992      	ldrh	r2, [r2, #12]
 80074ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80074f2:	fb01 f202 	mul.w	r2, r1, r2
 80074f6:	1a9b      	subs	r3, r3, r2
 80074f8:	1ac3      	subs	r3, r0, r3
 80074fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80074fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	429a      	cmp	r2, r3
 8007502:	d901      	bls.n	8007508 <f_read+0x260>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	8992      	ldrh	r2, [r2, #12]
 8007516:	fbb3 f0f2 	udiv	r0, r3, r2
 800751a:	fb00 f202 	mul.w	r2, r0, r2
 800751e:	1a9b      	subs	r3, r3, r2
 8007520:	440b      	add	r3, r1
 8007522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007524:	4619      	mov	r1, r3
 8007526:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007528:	f7fd fbfa 	bl	8004d20 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800752c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800752e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007530:	4413      	add	r3, r2
 8007532:	627b      	str	r3, [r7, #36]	@ 0x24
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	699a      	ldr	r2, [r3, #24]
 8007538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753a:	441a      	add	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	619a      	str	r2, [r3, #24]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007546:	441a      	add	r2, r3
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f47f aee1 	bne.w	800731e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3738      	adds	r7, #56	@ 0x38
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b08c      	sub	sp, #48	@ 0x30
 800756a:	af00      	add	r7, sp, #0
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	607a      	str	r2, [r7, #4]
 8007572:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f107 0210 	add.w	r2, r7, #16
 8007584:	4611      	mov	r1, r2
 8007586:	4618      	mov	r0, r3
 8007588:	f7ff fc4a 	bl	8006e20 <validate>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007592:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007596:	2b00      	cmp	r3, #0
 8007598:	d107      	bne.n	80075aa <f_write+0x44>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	7d5b      	ldrb	r3, [r3, #21]
 800759e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80075a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <f_write+0x4a>
 80075aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075ae:	e16a      	b.n	8007886 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	7d1b      	ldrb	r3, [r3, #20]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <f_write+0x5a>
 80075bc:	2307      	movs	r3, #7
 80075be:	e162      	b.n	8007886 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	699a      	ldr	r2, [r3, #24]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	441a      	add	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	f080 814c 	bcs.w	800786a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	43db      	mvns	r3, r3
 80075d8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80075da:	e146      	b.n	800786a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	8992      	ldrh	r2, [r2, #12]
 80075e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80075e8:	fb01 f202 	mul.w	r2, r1, r2
 80075ec:	1a9b      	subs	r3, r3, r2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f040 80f1 	bne.w	80077d6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	8992      	ldrh	r2, [r2, #12]
 80075fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	8952      	ldrh	r2, [r2, #10]
 8007604:	3a01      	subs	r2, #1
 8007606:	4013      	ands	r3, r2
 8007608:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d143      	bne.n	8007698 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10c      	bne.n	8007632 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800761e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007620:	2b00      	cmp	r3, #0
 8007622:	d11a      	bne.n	800765a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2100      	movs	r1, #0
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe f8b6 	bl	800579a <create_chain>
 800762e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007630:	e013      	b.n	800765a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	4619      	mov	r1, r3
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7fe f942 	bl	80058ca <clmt_clust>
 8007646:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007648:	e007      	b.n	800765a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	4619      	mov	r1, r3
 8007652:	4610      	mov	r0, r2
 8007654:	f7fe f8a1 	bl	800579a <create_chain>
 8007658:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800765a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 8109 	beq.w	8007874 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007664:	2b01      	cmp	r3, #1
 8007666:	d104      	bne.n	8007672 <f_write+0x10c>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2202      	movs	r2, #2
 800766c:	755a      	strb	r2, [r3, #21]
 800766e:	2302      	movs	r3, #2
 8007670:	e109      	b.n	8007886 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007678:	d104      	bne.n	8007684 <f_write+0x11e>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	755a      	strb	r2, [r3, #21]
 8007680:	2301      	movs	r3, #1
 8007682:	e100      	b.n	8007886 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007688:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d102      	bne.n	8007698 <f_write+0x132>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007696:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	7d1b      	ldrb	r3, [r3, #20]
 800769c:	b25b      	sxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	da18      	bge.n	80076d4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	7858      	ldrb	r0, [r3, #1]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a1a      	ldr	r2, [r3, #32]
 80076b0:	2301      	movs	r3, #1
 80076b2:	f7fd fa75 	bl	8004ba0 <disk_write>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <f_write+0x160>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2201      	movs	r2, #1
 80076c0:	755a      	strb	r2, [r3, #21]
 80076c2:	2301      	movs	r3, #1
 80076c4:	e0df      	b.n	8007886 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	7d1b      	ldrb	r3, [r3, #20]
 80076ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	4619      	mov	r1, r3
 80076dc:	4610      	mov	r0, r2
 80076de:	f7fd fdeb 	bl	80052b8 <clust2sect>
 80076e2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d104      	bne.n	80076f4 <f_write+0x18e>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2202      	movs	r2, #2
 80076ee:	755a      	strb	r2, [r3, #21]
 80076f0:	2302      	movs	r3, #2
 80076f2:	e0c8      	b.n	8007886 <f_write+0x320>
			sect += csect;
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	4413      	add	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	899b      	ldrh	r3, [r3, #12]
 8007700:	461a      	mov	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	fbb3 f3f2 	udiv	r3, r3, r2
 8007708:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d043      	beq.n	8007798 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	4413      	add	r3, r2
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	8952      	ldrh	r2, [r2, #10]
 800771a:	4293      	cmp	r3, r2
 800771c:	d905      	bls.n	800772a <f_write+0x1c4>
					cc = fs->csize - csect;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	895b      	ldrh	r3, [r3, #10]
 8007722:	461a      	mov	r2, r3
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	7858      	ldrb	r0, [r3, #1]
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	69f9      	ldr	r1, [r7, #28]
 8007734:	f7fd fa34 	bl	8004ba0 <disk_write>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d004      	beq.n	8007748 <f_write+0x1e2>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	755a      	strb	r2, [r3, #21]
 8007744:	2301      	movs	r3, #1
 8007746:	e09e      	b.n	8007886 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a1a      	ldr	r2, [r3, #32]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	6a3a      	ldr	r2, [r7, #32]
 8007752:	429a      	cmp	r2, r3
 8007754:	d918      	bls.n	8007788 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6a1a      	ldr	r2, [r3, #32]
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	8992      	ldrh	r2, [r2, #12]
 8007768:	fb02 f303 	mul.w	r3, r2, r3
 800776c:	69fa      	ldr	r2, [r7, #28]
 800776e:	18d1      	adds	r1, r2, r3
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	899b      	ldrh	r3, [r3, #12]
 8007774:	461a      	mov	r2, r3
 8007776:	f7fd fad3 	bl	8004d20 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	7d1b      	ldrb	r3, [r3, #20]
 800777e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007782:	b2da      	uxtb	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	899b      	ldrh	r3, [r3, #12]
 800778c:	461a      	mov	r2, r3
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	fb02 f303 	mul.w	r3, r2, r3
 8007794:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007796:	e04b      	b.n	8007830 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d016      	beq.n	80077d0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d210      	bcs.n	80077d0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	7858      	ldrb	r0, [r3, #1]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80077b8:	2301      	movs	r3, #1
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	f7fd f9d0 	bl	8004b60 <disk_read>
 80077c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	755a      	strb	r2, [r3, #21]
 80077cc:	2301      	movs	r3, #1
 80077ce:	e05a      	b.n	8007886 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	899b      	ldrh	r3, [r3, #12]
 80077da:	4618      	mov	r0, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	8992      	ldrh	r2, [r2, #12]
 80077e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80077e8:	fb01 f202 	mul.w	r2, r1, r2
 80077ec:	1a9b      	subs	r3, r3, r2
 80077ee:	1ac3      	subs	r3, r0, r3
 80077f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80077f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d901      	bls.n	80077fe <f_write+0x298>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	8992      	ldrh	r2, [r2, #12]
 800780c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007810:	fb00 f202 	mul.w	r2, r0, r2
 8007814:	1a9b      	subs	r3, r3, r2
 8007816:	440b      	add	r3, r1
 8007818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800781a:	69f9      	ldr	r1, [r7, #28]
 800781c:	4618      	mov	r0, r3
 800781e:	f7fd fa7f 	bl	8004d20 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	7d1b      	ldrb	r3, [r3, #20]
 8007826:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800782a:	b2da      	uxtb	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007830:	69fa      	ldr	r2, [r7, #28]
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	4413      	add	r3, r2
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	699a      	ldr	r2, [r3, #24]
 800783c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783e:	441a      	add	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	619a      	str	r2, [r3, #24]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	429a      	cmp	r2, r3
 800784e:	bf38      	it	cc
 8007850:	461a      	movcc	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	60da      	str	r2, [r3, #12]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	441a      	add	r2, r3
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f47f aeb5 	bne.w	80075dc <f_write+0x76>
 8007872:	e000      	b.n	8007876 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007874:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	7d1b      	ldrb	r3, [r3, #20]
 800787a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800787e:	b2da      	uxtb	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3730      	adds	r7, #48	@ 0x30
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b086      	sub	sp, #24
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f107 0208 	add.w	r2, r7, #8
 800789c:	4611      	mov	r1, r2
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff fabe 	bl	8006e20 <validate>
 80078a4:	4603      	mov	r3, r0
 80078a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d168      	bne.n	8007980 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	7d1b      	ldrb	r3, [r3, #20]
 80078b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d062      	beq.n	8007980 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	7d1b      	ldrb	r3, [r3, #20]
 80078be:	b25b      	sxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	da15      	bge.n	80078f0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	7858      	ldrb	r0, [r3, #1]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1a      	ldr	r2, [r3, #32]
 80078d2:	2301      	movs	r3, #1
 80078d4:	f7fd f964 	bl	8004ba0 <disk_write>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <f_sync+0x54>
 80078de:	2301      	movs	r3, #1
 80078e0:	e04f      	b.n	8007982 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	7d1b      	ldrb	r3, [r3, #20]
 80078e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80078f0:	f7fc fbd2 	bl	8004098 <get_fattime>
 80078f4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	f7fd fc3c 	bl	800517c <move_window>
 8007904:	4603      	mov	r3, r0
 8007906:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007908:	7dfb      	ldrb	r3, [r7, #23]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d138      	bne.n	8007980 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007912:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	330b      	adds	r3, #11
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	330b      	adds	r3, #11
 800791e:	f042 0220 	orr.w	r2, r2, #32
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	461a      	mov	r2, r3
 8007930:	68f9      	ldr	r1, [r7, #12]
 8007932:	f7fe f9c7 	bl	8005cc4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f103 021c 	add.w	r2, r3, #28
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f7fd f9c0 	bl	8004cc8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3316      	adds	r3, #22
 800794c:	6939      	ldr	r1, [r7, #16]
 800794e:	4618      	mov	r0, r3
 8007950:	f7fd f9ba 	bl	8004cc8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	3312      	adds	r3, #18
 8007958:	2100      	movs	r1, #0
 800795a:	4618      	mov	r0, r3
 800795c:	f7fd f999 	bl	8004c92 <st_word>
					fs->wflag = 1;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2201      	movs	r2, #1
 8007964:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	4618      	mov	r0, r3
 800796a:	f7fd fc35 	bl	80051d8 <sync_fs>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7d1b      	ldrb	r3, [r3, #20]
 8007976:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800797a:	b2da      	uxtb	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007980:	7dfb      	ldrb	r3, [r7, #23]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff ff7b 	bl	800788e <f_sync>
 8007998:	4603      	mov	r3, r0
 800799a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d118      	bne.n	80079d4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f107 0208 	add.w	r2, r7, #8
 80079a8:	4611      	mov	r1, r2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff fa38 	bl	8006e20 <validate>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10c      	bne.n	80079d4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd fb38 	bl	8005034 <dec_lock>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d102      	bne.n	80079d4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b090      	sub	sp, #64	@ 0x40
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f107 0208 	add.w	r2, r7, #8
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff fa15 	bl	8006e20 <validate>
 80079f6:	4603      	mov	r3, r0
 80079f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80079fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d103      	bne.n	8007a0c <f_lseek+0x2e>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7d5b      	ldrb	r3, [r3, #21]
 8007a08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007a0c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <f_lseek+0x3c>
 8007a14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a18:	e201      	b.n	8007e1e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 80d9 	beq.w	8007bd6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2a:	d15a      	bne.n	8007ae2 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a30:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a34:	1d1a      	adds	r2, r3, #4
 8007a36:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	617b      	str	r3, [r7, #20]
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8007a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d03a      	beq.n	8007ac2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4e:	613b      	str	r3, [r7, #16]
 8007a50:	2300      	movs	r3, #0
 8007a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a56:	3302      	adds	r3, #2
 8007a58:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a60:	3301      	adds	r3, #1
 8007a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fd fc44 	bl	80052f6 <get_fat>
 8007a6e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d804      	bhi.n	8007a80 <f_lseek+0xa2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	755a      	strb	r2, [r3, #21]
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e1ce      	b.n	8007e1e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a86:	d104      	bne.n	8007a92 <f_lseek+0xb4>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	755a      	strb	r2, [r3, #21]
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e1c5      	b.n	8007e1e <f_lseek+0x440>
					} while (cl == pcl + 1);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3301      	adds	r3, #1
 8007a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d0de      	beq.n	8007a5a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007a9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d809      	bhi.n	8007ab8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa6:	1d1a      	adds	r2, r3, #4
 8007aa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8007aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab0:	1d1a      	adds	r2, r3, #4
 8007ab2:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d3c4      	bcc.n	8007a4c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ac8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007aca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d803      	bhi.n	8007ada <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	e19f      	b.n	8007e1a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007ada:	2311      	movs	r3, #17
 8007adc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007ae0:	e19b      	b.n	8007e1a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d902      	bls.n	8007af2 <f_lseek+0x114>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 818d 	beq.w	8007e1a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7fd fedf 	bl	80058ca <clmt_clust>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	f7fd fbcc 	bl	80052b8 <clust2sect>
 8007b20:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d104      	bne.n	8007b32 <f_lseek+0x154>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	755a      	strb	r2, [r3, #21]
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e175      	b.n	8007e1e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	8992      	ldrh	r2, [r2, #12]
 8007b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	8952      	ldrh	r2, [r2, #10]
 8007b42:	3a01      	subs	r2, #1
 8007b44:	4013      	ands	r3, r2
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	4413      	add	r3, r2
 8007b4a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	8992      	ldrh	r2, [r2, #12]
 8007b54:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b58:	fb01 f202 	mul.w	r2, r1, r2
 8007b5c:	1a9b      	subs	r3, r3, r2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 815b 	beq.w	8007e1a <f_lseek+0x43c>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	f000 8155 	beq.w	8007e1a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	7d1b      	ldrb	r3, [r3, #20]
 8007b74:	b25b      	sxtb	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	da18      	bge.n	8007bac <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	7858      	ldrb	r0, [r3, #1]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1a      	ldr	r2, [r3, #32]
 8007b88:	2301      	movs	r3, #1
 8007b8a:	f7fd f809 	bl	8004ba0 <disk_write>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d004      	beq.n	8007b9e <f_lseek+0x1c0>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	755a      	strb	r2, [r3, #21]
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e13f      	b.n	8007e1e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	7d1b      	ldrb	r3, [r3, #20]
 8007ba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	7858      	ldrb	r0, [r3, #1]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	f7fc ffd1 	bl	8004b60 <disk_read>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <f_lseek+0x1f0>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	755a      	strb	r2, [r3, #21]
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e127      	b.n	8007e1e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	69ba      	ldr	r2, [r7, #24]
 8007bd2:	621a      	str	r2, [r3, #32]
 8007bd4:	e121      	b.n	8007e1a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d908      	bls.n	8007bf2 <f_lseek+0x214>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	7d1b      	ldrb	r3, [r3, #20]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d102      	bne.n	8007bf2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c00:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80b5 	beq.w	8007d74 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	895b      	ldrh	r3, [r3, #10]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	899b      	ldrh	r3, [r3, #12]
 8007c14:	fb02 f303 	mul.w	r3, r2, r3
 8007c18:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d01b      	beq.n	8007c58 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	1e5a      	subs	r2, r3, #1
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	1e59      	subs	r1, r3, #1
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d30f      	bcc.n	8007c58 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	1e5a      	subs	r2, r3, #1
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	425b      	negs	r3, r3
 8007c40:	401a      	ands	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007c56:	e022      	b.n	8007c9e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d119      	bne.n	8007c98 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2100      	movs	r1, #0
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fd fd96 	bl	800579a <create_chain>
 8007c6e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d104      	bne.n	8007c80 <f_lseek+0x2a2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	755a      	strb	r2, [r3, #21]
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e0ce      	b.n	8007e1e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c86:	d104      	bne.n	8007c92 <f_lseek+0x2b4>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	755a      	strb	r2, [r3, #21]
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e0c5      	b.n	8007e1e <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c96:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c9c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d067      	beq.n	8007d74 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007ca4:	e03a      	b.n	8007d1c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	603b      	str	r3, [r7, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	441a      	add	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	7d1b      	ldrb	r3, [r3, #20]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00b      	beq.n	8007cde <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fd fd65 	bl	800579a <create_chain>
 8007cd0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d108      	bne.n	8007cea <f_lseek+0x30c>
							ofs = 0; break;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	603b      	str	r3, [r7, #0]
 8007cdc:	e022      	b.n	8007d24 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fd fb07 	bl	80052f6 <get_fat>
 8007ce8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf0:	d104      	bne.n	8007cfc <f_lseek+0x31e>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	755a      	strb	r2, [r3, #21]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e090      	b.n	8007e1e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d904      	bls.n	8007d0c <f_lseek+0x32e>
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d304      	bcc.n	8007d16 <f_lseek+0x338>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	755a      	strb	r2, [r3, #21]
 8007d12:	2302      	movs	r3, #2
 8007d14:	e083      	b.n	8007e1e <f_lseek+0x440>
					fp->clust = clst;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d1a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d8c0      	bhi.n	8007ca6 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	699a      	ldr	r2, [r3, #24]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	441a      	add	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	899b      	ldrh	r3, [r3, #12]
 8007d34:	461a      	mov	r2, r3
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d3c:	fb01 f202 	mul.w	r2, r1, r2
 8007d40:	1a9b      	subs	r3, r3, r2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d016      	beq.n	8007d74 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fd fab4 	bl	80052b8 <clust2sect>
 8007d50:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <f_lseek+0x384>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	755a      	strb	r2, [r3, #21]
 8007d5e:	2302      	movs	r3, #2
 8007d60:	e05d      	b.n	8007e1e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	899b      	ldrh	r3, [r3, #12]
 8007d66:	461a      	mov	r2, r3
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d70:	4413      	add	r3, r2
 8007d72:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	699a      	ldr	r2, [r3, #24]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d90a      	bls.n	8007d96 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699a      	ldr	r2, [r3, #24]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	7d1b      	ldrb	r3, [r3, #20]
 8007d8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	8992      	ldrh	r2, [r2, #12]
 8007d9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007da2:	fb01 f202 	mul.w	r2, r1, r2
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d036      	beq.n	8007e1a <f_lseek+0x43c>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d031      	beq.n	8007e1a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	7d1b      	ldrb	r3, [r3, #20]
 8007dba:	b25b      	sxtb	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	da18      	bge.n	8007df2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	7858      	ldrb	r0, [r3, #1]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1a      	ldr	r2, [r3, #32]
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f7fc fee6 	bl	8004ba0 <disk_write>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d004      	beq.n	8007de4 <f_lseek+0x406>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	755a      	strb	r2, [r3, #21]
 8007de0:	2301      	movs	r3, #1
 8007de2:	e01c      	b.n	8007e1e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	7d1b      	ldrb	r3, [r3, #20]
 8007de8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	7858      	ldrb	r0, [r3, #1]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e00:	f7fc feae 	bl	8004b60 <disk_read>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <f_lseek+0x436>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	755a      	strb	r2, [r3, #21]
 8007e10:	2301      	movs	r3, #1
 8007e12:	e004      	b.n	8007e1e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e18:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007e1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3740      	adds	r7, #64	@ 0x40
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b088      	sub	sp, #32
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	60f8      	str	r0, [r7, #12]
 8007e2e:	60b9      	str	r1, [r7, #8]
 8007e30:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007e32:	2300      	movs	r3, #0
 8007e34:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007e3a:	e01c      	b.n	8007e76 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007e3c:	f107 0310 	add.w	r3, r7, #16
 8007e40:	f107 0114 	add.w	r1, r7, #20
 8007e44:	2201      	movs	r2, #1
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff fa2e 	bl	80072a8 <f_read>
		if (rc != 1) break;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d117      	bne.n	8007e82 <f_gets+0x5c>
		c = s[0];
 8007e52:	7d3b      	ldrb	r3, [r7, #20]
 8007e54:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	2b0d      	cmp	r3, #13
 8007e5a:	d00b      	beq.n	8007e74 <f_gets+0x4e>
		*p++ = c;
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	61ba      	str	r2, [r7, #24]
 8007e62:	7dfa      	ldrb	r2, [r7, #23]
 8007e64:	701a      	strb	r2, [r3, #0]
		n++;
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	2b0a      	cmp	r3, #10
 8007e70:	d009      	beq.n	8007e86 <f_gets+0x60>
 8007e72:	e000      	b.n	8007e76 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007e74:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	dbdd      	blt.n	8007e3c <f_gets+0x16>
 8007e80:	e002      	b.n	8007e88 <f_gets+0x62>
		if (rc != 1) break;
 8007e82:	bf00      	nop
 8007e84:	e000      	b.n	8007e88 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8007e86:	bf00      	nop
	}
	*p = 0;
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <f_gets+0x72>
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	e000      	b.n	8007e9a <f_gets+0x74>
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	2b0a      	cmp	r3, #10
 8007eb2:	d103      	bne.n	8007ebc <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007eb4:	210d      	movs	r1, #13
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff fff3 	bl	8007ea2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	db25      	blt.n	8007f14 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	60fa      	str	r2, [r7, #12]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	78fa      	ldrb	r2, [r7, #3]
 8007ed4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b3c      	cmp	r3, #60	@ 0x3c
 8007eda:	dd12      	ble.n	8007f02 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6818      	ldr	r0, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f103 010c 	add.w	r1, r3, #12
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	f107 0308 	add.w	r3, r7, #8
 8007eec:	f7ff fb3b 	bl	8007566 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d101      	bne.n	8007efc <putc_bfd+0x5a>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e001      	b.n	8007f00 <putc_bfd+0x5e>
 8007efc:	f04f 33ff 	mov.w	r3, #4294967295
 8007f00:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	609a      	str	r2, [r3, #8]
 8007f12:	e000      	b.n	8007f16 <putc_bfd+0x74>
	if (i < 0) return;
 8007f14:	bf00      	nop
}
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	db16      	blt.n	8007f5a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f103 010c 	add.w	r1, r3, #12
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f107 030c 	add.w	r3, r7, #12
 8007f40:	f7ff fb11 	bl	8007566 <f_write>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d107      	bne.n	8007f5a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d102      	bne.n	8007f5a <putc_flush+0x3e>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	e001      	b.n	8007f5e <putc_flush+0x42>
	return EOF;
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	605a      	str	r2, [r3, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	609a      	str	r2, [r3, #8]
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b096      	sub	sp, #88	@ 0x58
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007f9a:	f107 030c 	add.w	r3, r7, #12
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff ffe0 	bl	8007f66 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007fa6:	e009      	b.n	8007fbc <f_puts+0x2c>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	781a      	ldrb	r2, [r3, #0]
 8007fb0:	f107 030c 	add.w	r3, r7, #12
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7ff ff73 	bl	8007ea2 <putc_bfd>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1f1      	bne.n	8007fa8 <f_puts+0x18>
	return putc_flush(&pb);
 8007fc4:	f107 030c 	add.w	r3, r7, #12
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff ffa7 	bl	8007f1c <putc_flush>
 8007fce:	4603      	mov	r3, r0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3758      	adds	r7, #88	@ 0x58
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007fee:	4b1f      	ldr	r3, [pc, #124]	@ (800806c <FATFS_LinkDriverEx+0x94>)
 8007ff0:	7a5b      	ldrb	r3, [r3, #9]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d131      	bne.n	800805c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800806c <FATFS_LinkDriverEx+0x94>)
 8007ffa:	7a5b      	ldrb	r3, [r3, #9]
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	461a      	mov	r2, r3
 8008000:	4b1a      	ldr	r3, [pc, #104]	@ (800806c <FATFS_LinkDriverEx+0x94>)
 8008002:	2100      	movs	r1, #0
 8008004:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008006:	4b19      	ldr	r3, [pc, #100]	@ (800806c <FATFS_LinkDriverEx+0x94>)
 8008008:	7a5b      	ldrb	r3, [r3, #9]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	4a17      	ldr	r2, [pc, #92]	@ (800806c <FATFS_LinkDriverEx+0x94>)
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008016:	4b15      	ldr	r3, [pc, #84]	@ (800806c <FATFS_LinkDriverEx+0x94>)
 8008018:	7a5b      	ldrb	r3, [r3, #9]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	461a      	mov	r2, r3
 800801e:	4b13      	ldr	r3, [pc, #76]	@ (800806c <FATFS_LinkDriverEx+0x94>)
 8008020:	4413      	add	r3, r2
 8008022:	79fa      	ldrb	r2, [r7, #7]
 8008024:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008026:	4b11      	ldr	r3, [pc, #68]	@ (800806c <FATFS_LinkDriverEx+0x94>)
 8008028:	7a5b      	ldrb	r3, [r3, #9]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	b2d1      	uxtb	r1, r2
 8008030:	4a0e      	ldr	r2, [pc, #56]	@ (800806c <FATFS_LinkDriverEx+0x94>)
 8008032:	7251      	strb	r1, [r2, #9]
 8008034:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008036:	7dbb      	ldrb	r3, [r7, #22]
 8008038:	3330      	adds	r3, #48	@ 0x30
 800803a:	b2da      	uxtb	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	3301      	adds	r3, #1
 8008044:	223a      	movs	r2, #58	@ 0x3a
 8008046:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	3302      	adds	r3, #2
 800804c:	222f      	movs	r2, #47	@ 0x2f
 800804e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	3303      	adds	r3, #3
 8008054:	2200      	movs	r2, #0
 8008056:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008058:	2300      	movs	r3, #0
 800805a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
}
 800805e:	4618      	mov	r0, r3
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20000a10 	.word	0x20000a10

08008070 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800807a:	2200      	movs	r2, #0
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f7ff ffaa 	bl	8007fd8 <FATFS_LinkDriverEx>
 8008084:	4603      	mov	r3, r0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	6039      	str	r1, [r7, #0]
 800809a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800809c:	88fb      	ldrh	r3, [r7, #6]
 800809e:	2b7f      	cmp	r3, #127	@ 0x7f
 80080a0:	d802      	bhi.n	80080a8 <ff_convert+0x18>
		c = chr;
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	81fb      	strh	r3, [r7, #14]
 80080a6:	e025      	b.n	80080f4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00b      	beq.n	80080c6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80080ae:	88fb      	ldrh	r3, [r7, #6]
 80080b0:	2bff      	cmp	r3, #255	@ 0xff
 80080b2:	d805      	bhi.n	80080c0 <ff_convert+0x30>
 80080b4:	88fb      	ldrh	r3, [r7, #6]
 80080b6:	3b80      	subs	r3, #128	@ 0x80
 80080b8:	4a12      	ldr	r2, [pc, #72]	@ (8008104 <ff_convert+0x74>)
 80080ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080be:	e000      	b.n	80080c2 <ff_convert+0x32>
 80080c0:	2300      	movs	r3, #0
 80080c2:	81fb      	strh	r3, [r7, #14]
 80080c4:	e016      	b.n	80080f4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80080c6:	2300      	movs	r3, #0
 80080c8:	81fb      	strh	r3, [r7, #14]
 80080ca:	e009      	b.n	80080e0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80080cc:	89fb      	ldrh	r3, [r7, #14]
 80080ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008104 <ff_convert+0x74>)
 80080d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080d4:	88fa      	ldrh	r2, [r7, #6]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d006      	beq.n	80080e8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80080da:	89fb      	ldrh	r3, [r7, #14]
 80080dc:	3301      	adds	r3, #1
 80080de:	81fb      	strh	r3, [r7, #14]
 80080e0:	89fb      	ldrh	r3, [r7, #14]
 80080e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80080e4:	d9f2      	bls.n	80080cc <ff_convert+0x3c>
 80080e6:	e000      	b.n	80080ea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80080e8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80080ea:	89fb      	ldrh	r3, [r7, #14]
 80080ec:	3380      	adds	r3, #128	@ 0x80
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80080f4:	89fb      	ldrh	r3, [r7, #14]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	0800ac70 	.word	0x0800ac70

08008108 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008108:	b480      	push	{r7}
 800810a:	b087      	sub	sp, #28
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008112:	88fb      	ldrh	r3, [r7, #6]
 8008114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008118:	d201      	bcs.n	800811e <ff_wtoupper+0x16>
 800811a:	4b3e      	ldr	r3, [pc, #248]	@ (8008214 <ff_wtoupper+0x10c>)
 800811c:	e000      	b.n	8008120 <ff_wtoupper+0x18>
 800811e:	4b3e      	ldr	r3, [pc, #248]	@ (8008218 <ff_wtoupper+0x110>)
 8008120:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	1c9a      	adds	r2, r3, #2
 8008126:	617a      	str	r2, [r7, #20]
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800812c:	8a7b      	ldrh	r3, [r7, #18]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d068      	beq.n	8008204 <ff_wtoupper+0xfc>
 8008132:	88fa      	ldrh	r2, [r7, #6]
 8008134:	8a7b      	ldrh	r3, [r7, #18]
 8008136:	429a      	cmp	r2, r3
 8008138:	d364      	bcc.n	8008204 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	1c9a      	adds	r2, r3, #2
 800813e:	617a      	str	r2, [r7, #20]
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	823b      	strh	r3, [r7, #16]
 8008144:	8a3b      	ldrh	r3, [r7, #16]
 8008146:	0a1b      	lsrs	r3, r3, #8
 8008148:	81fb      	strh	r3, [r7, #14]
 800814a:	8a3b      	ldrh	r3, [r7, #16]
 800814c:	b2db      	uxtb	r3, r3
 800814e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008150:	88fa      	ldrh	r2, [r7, #6]
 8008152:	8a79      	ldrh	r1, [r7, #18]
 8008154:	8a3b      	ldrh	r3, [r7, #16]
 8008156:	440b      	add	r3, r1
 8008158:	429a      	cmp	r2, r3
 800815a:	da49      	bge.n	80081f0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800815c:	89fb      	ldrh	r3, [r7, #14]
 800815e:	2b08      	cmp	r3, #8
 8008160:	d84f      	bhi.n	8008202 <ff_wtoupper+0xfa>
 8008162:	a201      	add	r2, pc, #4	@ (adr r2, 8008168 <ff_wtoupper+0x60>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	0800818d 	.word	0x0800818d
 800816c:	0800819f 	.word	0x0800819f
 8008170:	080081b5 	.word	0x080081b5
 8008174:	080081bd 	.word	0x080081bd
 8008178:	080081c5 	.word	0x080081c5
 800817c:	080081cd 	.word	0x080081cd
 8008180:	080081d5 	.word	0x080081d5
 8008184:	080081dd 	.word	0x080081dd
 8008188:	080081e5 	.word	0x080081e5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800818c:	88fa      	ldrh	r2, [r7, #6]
 800818e:	8a7b      	ldrh	r3, [r7, #18]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	697a      	ldr	r2, [r7, #20]
 8008196:	4413      	add	r3, r2
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	80fb      	strh	r3, [r7, #6]
 800819c:	e027      	b.n	80081ee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800819e:	88fa      	ldrh	r2, [r7, #6]
 80081a0:	8a7b      	ldrh	r3, [r7, #18]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	88fa      	ldrh	r2, [r7, #6]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	80fb      	strh	r3, [r7, #6]
 80081b2:	e01c      	b.n	80081ee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80081b4:	88fb      	ldrh	r3, [r7, #6]
 80081b6:	3b10      	subs	r3, #16
 80081b8:	80fb      	strh	r3, [r7, #6]
 80081ba:	e018      	b.n	80081ee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	3b20      	subs	r3, #32
 80081c0:	80fb      	strh	r3, [r7, #6]
 80081c2:	e014      	b.n	80081ee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80081c4:	88fb      	ldrh	r3, [r7, #6]
 80081c6:	3b30      	subs	r3, #48	@ 0x30
 80081c8:	80fb      	strh	r3, [r7, #6]
 80081ca:	e010      	b.n	80081ee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80081cc:	88fb      	ldrh	r3, [r7, #6]
 80081ce:	3b1a      	subs	r3, #26
 80081d0:	80fb      	strh	r3, [r7, #6]
 80081d2:	e00c      	b.n	80081ee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80081d4:	88fb      	ldrh	r3, [r7, #6]
 80081d6:	3308      	adds	r3, #8
 80081d8:	80fb      	strh	r3, [r7, #6]
 80081da:	e008      	b.n	80081ee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	3b50      	subs	r3, #80	@ 0x50
 80081e0:	80fb      	strh	r3, [r7, #6]
 80081e2:	e004      	b.n	80081ee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80081e4:	88fb      	ldrh	r3, [r7, #6]
 80081e6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80081ea:	80fb      	strh	r3, [r7, #6]
 80081ec:	bf00      	nop
			}
			break;
 80081ee:	e008      	b.n	8008202 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80081f0:	89fb      	ldrh	r3, [r7, #14]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d195      	bne.n	8008122 <ff_wtoupper+0x1a>
 80081f6:	8a3b      	ldrh	r3, [r7, #16]
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4413      	add	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008200:	e78f      	b.n	8008122 <ff_wtoupper+0x1a>
			break;
 8008202:	bf00      	nop
	}

	return chr;
 8008204:	88fb      	ldrh	r3, [r7, #6]
}
 8008206:	4618      	mov	r0, r3
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	0800ad70 	.word	0x0800ad70
 8008218:	0800af64 	.word	0x0800af64

0800821c <std>:
 800821c:	2300      	movs	r3, #0
 800821e:	b510      	push	{r4, lr}
 8008220:	4604      	mov	r4, r0
 8008222:	e9c0 3300 	strd	r3, r3, [r0]
 8008226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800822a:	6083      	str	r3, [r0, #8]
 800822c:	8181      	strh	r1, [r0, #12]
 800822e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008230:	81c2      	strh	r2, [r0, #14]
 8008232:	6183      	str	r3, [r0, #24]
 8008234:	4619      	mov	r1, r3
 8008236:	2208      	movs	r2, #8
 8008238:	305c      	adds	r0, #92	@ 0x5c
 800823a:	f000 f94a 	bl	80084d2 <memset>
 800823e:	4b0d      	ldr	r3, [pc, #52]	@ (8008274 <std+0x58>)
 8008240:	6263      	str	r3, [r4, #36]	@ 0x24
 8008242:	4b0d      	ldr	r3, [pc, #52]	@ (8008278 <std+0x5c>)
 8008244:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008246:	4b0d      	ldr	r3, [pc, #52]	@ (800827c <std+0x60>)
 8008248:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800824a:	4b0d      	ldr	r3, [pc, #52]	@ (8008280 <std+0x64>)
 800824c:	6323      	str	r3, [r4, #48]	@ 0x30
 800824e:	4b0d      	ldr	r3, [pc, #52]	@ (8008284 <std+0x68>)
 8008250:	6224      	str	r4, [r4, #32]
 8008252:	429c      	cmp	r4, r3
 8008254:	d006      	beq.n	8008264 <std+0x48>
 8008256:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800825a:	4294      	cmp	r4, r2
 800825c:	d002      	beq.n	8008264 <std+0x48>
 800825e:	33d0      	adds	r3, #208	@ 0xd0
 8008260:	429c      	cmp	r4, r3
 8008262:	d105      	bne.n	8008270 <std+0x54>
 8008264:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800826c:	f000 bdc2 	b.w	8008df4 <__retarget_lock_init_recursive>
 8008270:	bd10      	pop	{r4, pc}
 8008272:	bf00      	nop
 8008274:	08008449 	.word	0x08008449
 8008278:	0800846f 	.word	0x0800846f
 800827c:	080084a7 	.word	0x080084a7
 8008280:	080084cb 	.word	0x080084cb
 8008284:	20000a1c 	.word	0x20000a1c

08008288 <stdio_exit_handler>:
 8008288:	4a02      	ldr	r2, [pc, #8]	@ (8008294 <stdio_exit_handler+0xc>)
 800828a:	4903      	ldr	r1, [pc, #12]	@ (8008298 <stdio_exit_handler+0x10>)
 800828c:	4803      	ldr	r0, [pc, #12]	@ (800829c <stdio_exit_handler+0x14>)
 800828e:	f000 b869 	b.w	8008364 <_fwalk_sglue>
 8008292:	bf00      	nop
 8008294:	20000028 	.word	0x20000028
 8008298:	080098ad 	.word	0x080098ad
 800829c:	20000040 	.word	0x20000040

080082a0 <cleanup_stdio>:
 80082a0:	6841      	ldr	r1, [r0, #4]
 80082a2:	4b0c      	ldr	r3, [pc, #48]	@ (80082d4 <cleanup_stdio+0x34>)
 80082a4:	4299      	cmp	r1, r3
 80082a6:	b510      	push	{r4, lr}
 80082a8:	4604      	mov	r4, r0
 80082aa:	d001      	beq.n	80082b0 <cleanup_stdio+0x10>
 80082ac:	f001 fafe 	bl	80098ac <_fflush_r>
 80082b0:	68a1      	ldr	r1, [r4, #8]
 80082b2:	4b09      	ldr	r3, [pc, #36]	@ (80082d8 <cleanup_stdio+0x38>)
 80082b4:	4299      	cmp	r1, r3
 80082b6:	d002      	beq.n	80082be <cleanup_stdio+0x1e>
 80082b8:	4620      	mov	r0, r4
 80082ba:	f001 faf7 	bl	80098ac <_fflush_r>
 80082be:	68e1      	ldr	r1, [r4, #12]
 80082c0:	4b06      	ldr	r3, [pc, #24]	@ (80082dc <cleanup_stdio+0x3c>)
 80082c2:	4299      	cmp	r1, r3
 80082c4:	d004      	beq.n	80082d0 <cleanup_stdio+0x30>
 80082c6:	4620      	mov	r0, r4
 80082c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082cc:	f001 baee 	b.w	80098ac <_fflush_r>
 80082d0:	bd10      	pop	{r4, pc}
 80082d2:	bf00      	nop
 80082d4:	20000a1c 	.word	0x20000a1c
 80082d8:	20000a84 	.word	0x20000a84
 80082dc:	20000aec 	.word	0x20000aec

080082e0 <global_stdio_init.part.0>:
 80082e0:	b510      	push	{r4, lr}
 80082e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008310 <global_stdio_init.part.0+0x30>)
 80082e4:	4c0b      	ldr	r4, [pc, #44]	@ (8008314 <global_stdio_init.part.0+0x34>)
 80082e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008318 <global_stdio_init.part.0+0x38>)
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	4620      	mov	r0, r4
 80082ec:	2200      	movs	r2, #0
 80082ee:	2104      	movs	r1, #4
 80082f0:	f7ff ff94 	bl	800821c <std>
 80082f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80082f8:	2201      	movs	r2, #1
 80082fa:	2109      	movs	r1, #9
 80082fc:	f7ff ff8e 	bl	800821c <std>
 8008300:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008304:	2202      	movs	r2, #2
 8008306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800830a:	2112      	movs	r1, #18
 800830c:	f7ff bf86 	b.w	800821c <std>
 8008310:	20000b54 	.word	0x20000b54
 8008314:	20000a1c 	.word	0x20000a1c
 8008318:	08008289 	.word	0x08008289

0800831c <__sfp_lock_acquire>:
 800831c:	4801      	ldr	r0, [pc, #4]	@ (8008324 <__sfp_lock_acquire+0x8>)
 800831e:	f000 bd6b 	b.w	8008df8 <__retarget_lock_acquire_recursive>
 8008322:	bf00      	nop
 8008324:	20000b83 	.word	0x20000b83

08008328 <__sfp_lock_release>:
 8008328:	4801      	ldr	r0, [pc, #4]	@ (8008330 <__sfp_lock_release+0x8>)
 800832a:	f000 bd67 	b.w	8008dfc <__retarget_lock_release_recursive>
 800832e:	bf00      	nop
 8008330:	20000b83 	.word	0x20000b83

08008334 <__sinit>:
 8008334:	b510      	push	{r4, lr}
 8008336:	4604      	mov	r4, r0
 8008338:	f7ff fff0 	bl	800831c <__sfp_lock_acquire>
 800833c:	6a23      	ldr	r3, [r4, #32]
 800833e:	b11b      	cbz	r3, 8008348 <__sinit+0x14>
 8008340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008344:	f7ff bff0 	b.w	8008328 <__sfp_lock_release>
 8008348:	4b04      	ldr	r3, [pc, #16]	@ (800835c <__sinit+0x28>)
 800834a:	6223      	str	r3, [r4, #32]
 800834c:	4b04      	ldr	r3, [pc, #16]	@ (8008360 <__sinit+0x2c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f5      	bne.n	8008340 <__sinit+0xc>
 8008354:	f7ff ffc4 	bl	80082e0 <global_stdio_init.part.0>
 8008358:	e7f2      	b.n	8008340 <__sinit+0xc>
 800835a:	bf00      	nop
 800835c:	080082a1 	.word	0x080082a1
 8008360:	20000b54 	.word	0x20000b54

08008364 <_fwalk_sglue>:
 8008364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008368:	4607      	mov	r7, r0
 800836a:	4688      	mov	r8, r1
 800836c:	4614      	mov	r4, r2
 800836e:	2600      	movs	r6, #0
 8008370:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008374:	f1b9 0901 	subs.w	r9, r9, #1
 8008378:	d505      	bpl.n	8008386 <_fwalk_sglue+0x22>
 800837a:	6824      	ldr	r4, [r4, #0]
 800837c:	2c00      	cmp	r4, #0
 800837e:	d1f7      	bne.n	8008370 <_fwalk_sglue+0xc>
 8008380:	4630      	mov	r0, r6
 8008382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008386:	89ab      	ldrh	r3, [r5, #12]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d907      	bls.n	800839c <_fwalk_sglue+0x38>
 800838c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008390:	3301      	adds	r3, #1
 8008392:	d003      	beq.n	800839c <_fwalk_sglue+0x38>
 8008394:	4629      	mov	r1, r5
 8008396:	4638      	mov	r0, r7
 8008398:	47c0      	blx	r8
 800839a:	4306      	orrs	r6, r0
 800839c:	3568      	adds	r5, #104	@ 0x68
 800839e:	e7e9      	b.n	8008374 <_fwalk_sglue+0x10>

080083a0 <sniprintf>:
 80083a0:	b40c      	push	{r2, r3}
 80083a2:	b530      	push	{r4, r5, lr}
 80083a4:	4b17      	ldr	r3, [pc, #92]	@ (8008404 <sniprintf+0x64>)
 80083a6:	1e0c      	subs	r4, r1, #0
 80083a8:	681d      	ldr	r5, [r3, #0]
 80083aa:	b09d      	sub	sp, #116	@ 0x74
 80083ac:	da08      	bge.n	80083c0 <sniprintf+0x20>
 80083ae:	238b      	movs	r3, #139	@ 0x8b
 80083b0:	602b      	str	r3, [r5, #0]
 80083b2:	f04f 30ff 	mov.w	r0, #4294967295
 80083b6:	b01d      	add	sp, #116	@ 0x74
 80083b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083bc:	b002      	add	sp, #8
 80083be:	4770      	bx	lr
 80083c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80083c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80083c8:	bf14      	ite	ne
 80083ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083ce:	4623      	moveq	r3, r4
 80083d0:	9304      	str	r3, [sp, #16]
 80083d2:	9307      	str	r3, [sp, #28]
 80083d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80083d8:	9002      	str	r0, [sp, #8]
 80083da:	9006      	str	r0, [sp, #24]
 80083dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80083e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80083e2:	ab21      	add	r3, sp, #132	@ 0x84
 80083e4:	a902      	add	r1, sp, #8
 80083e6:	4628      	mov	r0, r5
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	f000 ff51 	bl	8009290 <_svfiprintf_r>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	bfbc      	itt	lt
 80083f2:	238b      	movlt	r3, #139	@ 0x8b
 80083f4:	602b      	strlt	r3, [r5, #0]
 80083f6:	2c00      	cmp	r4, #0
 80083f8:	d0dd      	beq.n	80083b6 <sniprintf+0x16>
 80083fa:	9b02      	ldr	r3, [sp, #8]
 80083fc:	2200      	movs	r2, #0
 80083fe:	701a      	strb	r2, [r3, #0]
 8008400:	e7d9      	b.n	80083b6 <sniprintf+0x16>
 8008402:	bf00      	nop
 8008404:	2000003c 	.word	0x2000003c

08008408 <siprintf>:
 8008408:	b40e      	push	{r1, r2, r3}
 800840a:	b500      	push	{lr}
 800840c:	b09c      	sub	sp, #112	@ 0x70
 800840e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008410:	9002      	str	r0, [sp, #8]
 8008412:	9006      	str	r0, [sp, #24]
 8008414:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008418:	4809      	ldr	r0, [pc, #36]	@ (8008440 <siprintf+0x38>)
 800841a:	9107      	str	r1, [sp, #28]
 800841c:	9104      	str	r1, [sp, #16]
 800841e:	4909      	ldr	r1, [pc, #36]	@ (8008444 <siprintf+0x3c>)
 8008420:	f853 2b04 	ldr.w	r2, [r3], #4
 8008424:	9105      	str	r1, [sp, #20]
 8008426:	6800      	ldr	r0, [r0, #0]
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	a902      	add	r1, sp, #8
 800842c:	f000 ff30 	bl	8009290 <_svfiprintf_r>
 8008430:	9b02      	ldr	r3, [sp, #8]
 8008432:	2200      	movs	r2, #0
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	b01c      	add	sp, #112	@ 0x70
 8008438:	f85d eb04 	ldr.w	lr, [sp], #4
 800843c:	b003      	add	sp, #12
 800843e:	4770      	bx	lr
 8008440:	2000003c 	.word	0x2000003c
 8008444:	ffff0208 	.word	0xffff0208

08008448 <__sread>:
 8008448:	b510      	push	{r4, lr}
 800844a:	460c      	mov	r4, r1
 800844c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008450:	f000 fc82 	bl	8008d58 <_read_r>
 8008454:	2800      	cmp	r0, #0
 8008456:	bfab      	itete	ge
 8008458:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800845a:	89a3      	ldrhlt	r3, [r4, #12]
 800845c:	181b      	addge	r3, r3, r0
 800845e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008462:	bfac      	ite	ge
 8008464:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008466:	81a3      	strhlt	r3, [r4, #12]
 8008468:	bd10      	pop	{r4, pc}

0800846a <__seofread>:
 800846a:	2000      	movs	r0, #0
 800846c:	4770      	bx	lr

0800846e <__swrite>:
 800846e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008472:	461f      	mov	r7, r3
 8008474:	898b      	ldrh	r3, [r1, #12]
 8008476:	05db      	lsls	r3, r3, #23
 8008478:	4605      	mov	r5, r0
 800847a:	460c      	mov	r4, r1
 800847c:	4616      	mov	r6, r2
 800847e:	d505      	bpl.n	800848c <__swrite+0x1e>
 8008480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008484:	2302      	movs	r3, #2
 8008486:	2200      	movs	r2, #0
 8008488:	f000 fc54 	bl	8008d34 <_lseek_r>
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008492:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	4632      	mov	r2, r6
 800849a:	463b      	mov	r3, r7
 800849c:	4628      	mov	r0, r5
 800849e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084a2:	f000 bc6b 	b.w	8008d7c <_write_r>

080084a6 <__sseek>:
 80084a6:	b510      	push	{r4, lr}
 80084a8:	460c      	mov	r4, r1
 80084aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ae:	f000 fc41 	bl	8008d34 <_lseek_r>
 80084b2:	1c43      	adds	r3, r0, #1
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	bf15      	itete	ne
 80084b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80084ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80084be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80084c2:	81a3      	strheq	r3, [r4, #12]
 80084c4:	bf18      	it	ne
 80084c6:	81a3      	strhne	r3, [r4, #12]
 80084c8:	bd10      	pop	{r4, pc}

080084ca <__sclose>:
 80084ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ce:	f000 bc0f 	b.w	8008cf0 <_close_r>

080084d2 <memset>:
 80084d2:	4402      	add	r2, r0
 80084d4:	4603      	mov	r3, r0
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d100      	bne.n	80084dc <memset+0xa>
 80084da:	4770      	bx	lr
 80084dc:	f803 1b01 	strb.w	r1, [r3], #1
 80084e0:	e7f9      	b.n	80084d6 <memset+0x4>
	...

080084e4 <localtime>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008514 <localtime+0x30>)
 80084e8:	681d      	ldr	r5, [r3, #0]
 80084ea:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80084ec:	4604      	mov	r4, r0
 80084ee:	b953      	cbnz	r3, 8008506 <localtime+0x22>
 80084f0:	2024      	movs	r0, #36	@ 0x24
 80084f2:	f000 fd39 	bl	8008f68 <malloc>
 80084f6:	4602      	mov	r2, r0
 80084f8:	6368      	str	r0, [r5, #52]	@ 0x34
 80084fa:	b920      	cbnz	r0, 8008506 <localtime+0x22>
 80084fc:	4b06      	ldr	r3, [pc, #24]	@ (8008518 <localtime+0x34>)
 80084fe:	4807      	ldr	r0, [pc, #28]	@ (800851c <localtime+0x38>)
 8008500:	2132      	movs	r1, #50	@ 0x32
 8008502:	f000 fc85 	bl	8008e10 <__assert_func>
 8008506:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8008508:	4620      	mov	r0, r4
 800850a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800850e:	f000 b807 	b.w	8008520 <localtime_r>
 8008512:	bf00      	nop
 8008514:	2000003c 	.word	0x2000003c
 8008518:	0800b020 	.word	0x0800b020
 800851c:	0800b037 	.word	0x0800b037

08008520 <localtime_r>:
 8008520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008524:	460c      	mov	r4, r1
 8008526:	4680      	mov	r8, r0
 8008528:	f001 fa50 	bl	80099cc <__gettzinfo>
 800852c:	4621      	mov	r1, r4
 800852e:	4605      	mov	r5, r0
 8008530:	4640      	mov	r0, r8
 8008532:	f001 fa4f 	bl	80099d4 <gmtime_r>
 8008536:	6943      	ldr	r3, [r0, #20]
 8008538:	0799      	lsls	r1, r3, #30
 800853a:	4604      	mov	r4, r0
 800853c:	f203 776c 	addw	r7, r3, #1900	@ 0x76c
 8008540:	d106      	bne.n	8008550 <localtime_r+0x30>
 8008542:	2264      	movs	r2, #100	@ 0x64
 8008544:	fb97 f3f2 	sdiv	r3, r7, r2
 8008548:	fb02 7313 	mls	r3, r2, r3, r7
 800854c:	2b00      	cmp	r3, #0
 800854e:	d170      	bne.n	8008632 <localtime_r+0x112>
 8008550:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008554:	fb97 f3f2 	sdiv	r3, r7, r2
 8008558:	fb02 7313 	mls	r3, r2, r3, r7
 800855c:	fab3 f383 	clz	r3, r3
 8008560:	095b      	lsrs	r3, r3, #5
 8008562:	4e64      	ldr	r6, [pc, #400]	@ (80086f4 <localtime_r+0x1d4>)
 8008564:	2230      	movs	r2, #48	@ 0x30
 8008566:	fb02 6603 	mla	r6, r2, r3, r6
 800856a:	f000 f98d 	bl	8008888 <__tz_lock>
 800856e:	f000 f997 	bl	80088a0 <_tzset_unlocked>
 8008572:	4b61      	ldr	r3, [pc, #388]	@ (80086f8 <localtime_r+0x1d8>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d06a      	beq.n	8008650 <localtime_r+0x130>
 800857a:	686b      	ldr	r3, [r5, #4]
 800857c:	42bb      	cmp	r3, r7
 800857e:	d15a      	bne.n	8008636 <localtime_r+0x116>
 8008580:	682f      	ldr	r7, [r5, #0]
 8008582:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008586:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800858a:	2f00      	cmp	r7, #0
 800858c:	d15b      	bne.n	8008646 <localtime_r+0x126>
 800858e:	4282      	cmp	r2, r0
 8008590:	eb73 0101 	sbcs.w	r1, r3, r1
 8008594:	db5e      	blt.n	8008654 <localtime_r+0x134>
 8008596:	2301      	movs	r3, #1
 8008598:	6223      	str	r3, [r4, #32]
 800859a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800859c:	6861      	ldr	r1, [r4, #4]
 800859e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80085a2:	fb93 f0f2 	sdiv	r0, r3, r2
 80085a6:	fb02 3310 	mls	r3, r2, r0, r3
 80085aa:	223c      	movs	r2, #60	@ 0x3c
 80085ac:	fb93 f5f2 	sdiv	r5, r3, r2
 80085b0:	fb02 3215 	mls	r2, r2, r5, r3
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	1a9b      	subs	r3, r3, r2
 80085b8:	68a2      	ldr	r2, [r4, #8]
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	1b49      	subs	r1, r1, r5
 80085be:	1a12      	subs	r2, r2, r0
 80085c0:	2b3b      	cmp	r3, #59	@ 0x3b
 80085c2:	6061      	str	r1, [r4, #4]
 80085c4:	60a2      	str	r2, [r4, #8]
 80085c6:	dd51      	ble.n	800866c <localtime_r+0x14c>
 80085c8:	3101      	adds	r1, #1
 80085ca:	6061      	str	r1, [r4, #4]
 80085cc:	3b3c      	subs	r3, #60	@ 0x3c
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	6863      	ldr	r3, [r4, #4]
 80085d2:	2b3b      	cmp	r3, #59	@ 0x3b
 80085d4:	dd50      	ble.n	8008678 <localtime_r+0x158>
 80085d6:	3201      	adds	r2, #1
 80085d8:	60a2      	str	r2, [r4, #8]
 80085da:	3b3c      	subs	r3, #60	@ 0x3c
 80085dc:	6063      	str	r3, [r4, #4]
 80085de:	68a3      	ldr	r3, [r4, #8]
 80085e0:	2b17      	cmp	r3, #23
 80085e2:	dd4f      	ble.n	8008684 <localtime_r+0x164>
 80085e4:	69e2      	ldr	r2, [r4, #28]
 80085e6:	3201      	adds	r2, #1
 80085e8:	61e2      	str	r2, [r4, #28]
 80085ea:	69a2      	ldr	r2, [r4, #24]
 80085ec:	3201      	adds	r2, #1
 80085ee:	2a07      	cmp	r2, #7
 80085f0:	bfa8      	it	ge
 80085f2:	2200      	movge	r2, #0
 80085f4:	61a2      	str	r2, [r4, #24]
 80085f6:	68e2      	ldr	r2, [r4, #12]
 80085f8:	3b18      	subs	r3, #24
 80085fa:	3201      	adds	r2, #1
 80085fc:	60a3      	str	r3, [r4, #8]
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	60e2      	str	r2, [r4, #12]
 8008602:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8008606:	428a      	cmp	r2, r1
 8008608:	dd0e      	ble.n	8008628 <localtime_r+0x108>
 800860a:	2b0b      	cmp	r3, #11
 800860c:	eba2 0201 	sub.w	r2, r2, r1
 8008610:	60e2      	str	r2, [r4, #12]
 8008612:	f103 0201 	add.w	r2, r3, #1
 8008616:	bf09      	itett	eq
 8008618:	6963      	ldreq	r3, [r4, #20]
 800861a:	6122      	strne	r2, [r4, #16]
 800861c:	2200      	moveq	r2, #0
 800861e:	3301      	addeq	r3, #1
 8008620:	bf02      	ittt	eq
 8008622:	6122      	streq	r2, [r4, #16]
 8008624:	6163      	streq	r3, [r4, #20]
 8008626:	61e2      	streq	r2, [r4, #28]
 8008628:	f000 f934 	bl	8008894 <__tz_unlock>
 800862c:	4620      	mov	r0, r4
 800862e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008632:	2301      	movs	r3, #1
 8008634:	e795      	b.n	8008562 <localtime_r+0x42>
 8008636:	4638      	mov	r0, r7
 8008638:	f000 f87c 	bl	8008734 <__tzcalc_limits>
 800863c:	2800      	cmp	r0, #0
 800863e:	d19f      	bne.n	8008580 <localtime_r+0x60>
 8008640:	f04f 33ff 	mov.w	r3, #4294967295
 8008644:	e004      	b.n	8008650 <localtime_r+0x130>
 8008646:	4282      	cmp	r2, r0
 8008648:	eb73 0101 	sbcs.w	r1, r3, r1
 800864c:	da02      	bge.n	8008654 <localtime_r+0x134>
 800864e:	2300      	movs	r3, #0
 8008650:	6223      	str	r3, [r4, #32]
 8008652:	e009      	b.n	8008668 <localtime_r+0x148>
 8008654:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	@ 0x48
 8008658:	4282      	cmp	r2, r0
 800865a:	418b      	sbcs	r3, r1
 800865c:	bfb4      	ite	lt
 800865e:	2301      	movlt	r3, #1
 8008660:	2300      	movge	r3, #0
 8008662:	6223      	str	r3, [r4, #32]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d198      	bne.n	800859a <localtime_r+0x7a>
 8008668:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800866a:	e797      	b.n	800859c <localtime_r+0x7c>
 800866c:	2b00      	cmp	r3, #0
 800866e:	daaf      	bge.n	80085d0 <localtime_r+0xb0>
 8008670:	3901      	subs	r1, #1
 8008672:	6061      	str	r1, [r4, #4]
 8008674:	333c      	adds	r3, #60	@ 0x3c
 8008676:	e7aa      	b.n	80085ce <localtime_r+0xae>
 8008678:	2b00      	cmp	r3, #0
 800867a:	dab0      	bge.n	80085de <localtime_r+0xbe>
 800867c:	3a01      	subs	r2, #1
 800867e:	60a2      	str	r2, [r4, #8]
 8008680:	333c      	adds	r3, #60	@ 0x3c
 8008682:	e7ab      	b.n	80085dc <localtime_r+0xbc>
 8008684:	2b00      	cmp	r3, #0
 8008686:	dacf      	bge.n	8008628 <localtime_r+0x108>
 8008688:	69e2      	ldr	r2, [r4, #28]
 800868a:	3a01      	subs	r2, #1
 800868c:	61e2      	str	r2, [r4, #28]
 800868e:	69a2      	ldr	r2, [r4, #24]
 8008690:	3a01      	subs	r2, #1
 8008692:	bf48      	it	mi
 8008694:	2206      	movmi	r2, #6
 8008696:	61a2      	str	r2, [r4, #24]
 8008698:	68e2      	ldr	r2, [r4, #12]
 800869a:	3318      	adds	r3, #24
 800869c:	3a01      	subs	r2, #1
 800869e:	60e2      	str	r2, [r4, #12]
 80086a0:	60a3      	str	r3, [r4, #8]
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	d1c0      	bne.n	8008628 <localtime_r+0x108>
 80086a6:	6923      	ldr	r3, [r4, #16]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	d405      	bmi.n	80086b8 <localtime_r+0x198>
 80086ac:	6123      	str	r3, [r4, #16]
 80086ae:	6923      	ldr	r3, [r4, #16]
 80086b0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80086b4:	60e3      	str	r3, [r4, #12]
 80086b6:	e7b7      	b.n	8008628 <localtime_r+0x108>
 80086b8:	230b      	movs	r3, #11
 80086ba:	6123      	str	r3, [r4, #16]
 80086bc:	6963      	ldr	r3, [r4, #20]
 80086be:	1e5a      	subs	r2, r3, #1
 80086c0:	6162      	str	r2, [r4, #20]
 80086c2:	0792      	lsls	r2, r2, #30
 80086c4:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 80086c8:	d105      	bne.n	80086d6 <localtime_r+0x1b6>
 80086ca:	2164      	movs	r1, #100	@ 0x64
 80086cc:	fb93 f2f1 	sdiv	r2, r3, r1
 80086d0:	fb01 3212 	mls	r2, r1, r2, r3
 80086d4:	b962      	cbnz	r2, 80086f0 <localtime_r+0x1d0>
 80086d6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80086da:	fb93 f1f2 	sdiv	r1, r3, r2
 80086de:	fb02 3311 	mls	r3, r2, r1, r3
 80086e2:	fab3 f383 	clz	r3, r3
 80086e6:	095b      	lsrs	r3, r3, #5
 80086e8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80086ec:	61e3      	str	r3, [r4, #28]
 80086ee:	e7de      	b.n	80086ae <localtime_r+0x18e>
 80086f0:	2301      	movs	r3, #1
 80086f2:	e7f9      	b.n	80086e8 <localtime_r+0x1c8>
 80086f4:	0800b090 	.word	0x0800b090
 80086f8:	20000b78 	.word	0x20000b78

080086fc <time>:
 80086fc:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80086fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008730 <time+0x34>)
 8008700:	f04f 36ff 	mov.w	r6, #4294967295
 8008704:	f04f 37ff 	mov.w	r7, #4294967295
 8008708:	4669      	mov	r1, sp
 800870a:	4604      	mov	r4, r0
 800870c:	2200      	movs	r2, #0
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	e9cd 6700 	strd	r6, r7, [sp]
 8008714:	f000 fafc 	bl	8008d10 <_gettimeofday_r>
 8008718:	2800      	cmp	r0, #0
 800871a:	bfb8      	it	lt
 800871c:	e9cd 6700 	strdlt	r6, r7, [sp]
 8008720:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008724:	b10c      	cbz	r4, 800872a <time+0x2e>
 8008726:	e9c4 0100 	strd	r0, r1, [r4]
 800872a:	b004      	add	sp, #16
 800872c:	bdd0      	pop	{r4, r6, r7, pc}
 800872e:	bf00      	nop
 8008730:	2000003c 	.word	0x2000003c

08008734 <__tzcalc_limits>:
 8008734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008738:	4604      	mov	r4, r0
 800873a:	f001 f947 	bl	80099cc <__gettzinfo>
 800873e:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 8008742:	429c      	cmp	r4, r3
 8008744:	f340 8099 	ble.w	800887a <__tzcalc_limits+0x146>
 8008748:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800874c:	19e5      	adds	r5, r4, r7
 800874e:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 8008752:	f240 126d 	movw	r2, #365	@ 0x16d
 8008756:	10ad      	asrs	r5, r5, #2
 8008758:	fb02 5503 	mla	r5, r2, r3, r5
 800875c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 8008760:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8008764:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8008768:	4f45      	ldr	r7, [pc, #276]	@ (8008880 <__tzcalc_limits+0x14c>)
 800876a:	fb93 f3f2 	sdiv	r3, r3, r2
 800876e:	441d      	add	r5, r3
 8008770:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008774:	eb04 030c 	add.w	r3, r4, ip
 8008778:	6044      	str	r4, [r0, #4]
 800877a:	fbb3 f3f2 	udiv	r3, r3, r2
 800877e:	4601      	mov	r1, r0
 8008780:	441d      	add	r5, r3
 8008782:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8008786:	7a0b      	ldrb	r3, [r1, #8]
 8008788:	694a      	ldr	r2, [r1, #20]
 800878a:	2b4a      	cmp	r3, #74	@ 0x4a
 800878c:	d133      	bne.n	80087f6 <__tzcalc_limits+0xc2>
 800878e:	07a6      	lsls	r6, r4, #30
 8008790:	eb05 0302 	add.w	r3, r5, r2
 8008794:	d106      	bne.n	80087a4 <__tzcalc_limits+0x70>
 8008796:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800879a:	fb94 f6fe 	sdiv	r6, r4, lr
 800879e:	fb0e 4616 	mls	r6, lr, r6, r4
 80087a2:	b936      	cbnz	r6, 80087b2 <__tzcalc_limits+0x7e>
 80087a4:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 80087a8:	fb94 f6fe 	sdiv	r6, r4, lr
 80087ac:	fb0e 4616 	mls	r6, lr, r6, r4
 80087b0:	b9fe      	cbnz	r6, 80087f2 <__tzcalc_limits+0xbe>
 80087b2:	2a3b      	cmp	r2, #59	@ 0x3b
 80087b4:	bfd4      	ite	le
 80087b6:	2200      	movle	r2, #0
 80087b8:	2201      	movgt	r2, #1
 80087ba:	4413      	add	r3, r2
 80087bc:	3b01      	subs	r3, #1
 80087be:	698a      	ldr	r2, [r1, #24]
 80087c0:	17d6      	asrs	r6, r2, #31
 80087c2:	fbc3 2607 	smlal	r2, r6, r3, r7
 80087c6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80087c8:	18d2      	adds	r2, r2, r3
 80087ca:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 80087ce:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80087d2:	3128      	adds	r1, #40	@ 0x28
 80087d4:	458c      	cmp	ip, r1
 80087d6:	d1d6      	bne.n	8008786 <__tzcalc_limits+0x52>
 80087d8:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80087dc:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 80087e0:	428c      	cmp	r4, r1
 80087e2:	4193      	sbcs	r3, r2
 80087e4:	bfb4      	ite	lt
 80087e6:	2301      	movlt	r3, #1
 80087e8:	2300      	movge	r3, #0
 80087ea:	6003      	str	r3, [r0, #0]
 80087ec:	2001      	movs	r0, #1
 80087ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f2:	2200      	movs	r2, #0
 80087f4:	e7e1      	b.n	80087ba <__tzcalc_limits+0x86>
 80087f6:	2b44      	cmp	r3, #68	@ 0x44
 80087f8:	d101      	bne.n	80087fe <__tzcalc_limits+0xca>
 80087fa:	18ab      	adds	r3, r5, r2
 80087fc:	e7df      	b.n	80087be <__tzcalc_limits+0x8a>
 80087fe:	07a3      	lsls	r3, r4, #30
 8008800:	d105      	bne.n	800880e <__tzcalc_limits+0xda>
 8008802:	2664      	movs	r6, #100	@ 0x64
 8008804:	fb94 f3f6 	sdiv	r3, r4, r6
 8008808:	fb06 4313 	mls	r3, r6, r3, r4
 800880c:	bb7b      	cbnz	r3, 800886e <__tzcalc_limits+0x13a>
 800880e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8008812:	fb94 f6f3 	sdiv	r6, r4, r3
 8008816:	fb03 4616 	mls	r6, r3, r6, r4
 800881a:	fab6 f686 	clz	r6, r6
 800881e:	0976      	lsrs	r6, r6, #5
 8008820:	f8df e060 	ldr.w	lr, [pc, #96]	@ 8008884 <__tzcalc_limits+0x150>
 8008824:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8008828:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800882c:	462b      	mov	r3, r5
 800882e:	f04f 0800 	mov.w	r8, #0
 8008832:	fb0a e606 	mla	r6, sl, r6, lr
 8008836:	f108 0801 	add.w	r8, r8, #1
 800883a:	45c1      	cmp	r9, r8
 800883c:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 8008840:	dc17      	bgt.n	8008872 <__tzcalc_limits+0x13e>
 8008842:	f103 0804 	add.w	r8, r3, #4
 8008846:	2607      	movs	r6, #7
 8008848:	fb98 f6f6 	sdiv	r6, r8, r6
 800884c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008850:	eba8 0606 	sub.w	r6, r8, r6
 8008854:	1b92      	subs	r2, r2, r6
 8008856:	690e      	ldr	r6, [r1, #16]
 8008858:	f106 36ff 	add.w	r6, r6, #4294967295
 800885c:	bf48      	it	mi
 800885e:	3207      	addmi	r2, #7
 8008860:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8008864:	4432      	add	r2, r6
 8008866:	4572      	cmp	r2, lr
 8008868:	da05      	bge.n	8008876 <__tzcalc_limits+0x142>
 800886a:	4413      	add	r3, r2
 800886c:	e7a7      	b.n	80087be <__tzcalc_limits+0x8a>
 800886e:	2601      	movs	r6, #1
 8008870:	e7d6      	b.n	8008820 <__tzcalc_limits+0xec>
 8008872:	4473      	add	r3, lr
 8008874:	e7df      	b.n	8008836 <__tzcalc_limits+0x102>
 8008876:	3a07      	subs	r2, #7
 8008878:	e7f5      	b.n	8008866 <__tzcalc_limits+0x132>
 800887a:	2000      	movs	r0, #0
 800887c:	e7b7      	b.n	80087ee <__tzcalc_limits+0xba>
 800887e:	bf00      	nop
 8008880:	00015180 	.word	0x00015180
 8008884:	0800b08c 	.word	0x0800b08c

08008888 <__tz_lock>:
 8008888:	4801      	ldr	r0, [pc, #4]	@ (8008890 <__tz_lock+0x8>)
 800888a:	f000 bab4 	b.w	8008df6 <__retarget_lock_acquire>
 800888e:	bf00      	nop
 8008890:	20000b80 	.word	0x20000b80

08008894 <__tz_unlock>:
 8008894:	4801      	ldr	r0, [pc, #4]	@ (800889c <__tz_unlock+0x8>)
 8008896:	f000 bab0 	b.w	8008dfa <__retarget_lock_release>
 800889a:	bf00      	nop
 800889c:	20000b80 	.word	0x20000b80

080088a0 <_tzset_unlocked>:
 80088a0:	4b01      	ldr	r3, [pc, #4]	@ (80088a8 <_tzset_unlocked+0x8>)
 80088a2:	6818      	ldr	r0, [r3, #0]
 80088a4:	f000 b802 	b.w	80088ac <_tzset_unlocked_r>
 80088a8:	2000003c 	.word	0x2000003c

080088ac <_tzset_unlocked_r>:
 80088ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	b08d      	sub	sp, #52	@ 0x34
 80088b2:	4607      	mov	r7, r0
 80088b4:	f001 f88a 	bl	80099cc <__gettzinfo>
 80088b8:	49bc      	ldr	r1, [pc, #752]	@ (8008bac <_tzset_unlocked_r+0x300>)
 80088ba:	4dbd      	ldr	r5, [pc, #756]	@ (8008bb0 <_tzset_unlocked_r+0x304>)
 80088bc:	4604      	mov	r4, r0
 80088be:	4638      	mov	r0, r7
 80088c0:	f000 fb4a 	bl	8008f58 <_getenv_r>
 80088c4:	4606      	mov	r6, r0
 80088c6:	bb10      	cbnz	r0, 800890e <_tzset_unlocked_r+0x62>
 80088c8:	4bba      	ldr	r3, [pc, #744]	@ (8008bb4 <_tzset_unlocked_r+0x308>)
 80088ca:	4abb      	ldr	r2, [pc, #748]	@ (8008bb8 <_tzset_unlocked_r+0x30c>)
 80088cc:	6018      	str	r0, [r3, #0]
 80088ce:	4bbb      	ldr	r3, [pc, #748]	@ (8008bbc <_tzset_unlocked_r+0x310>)
 80088d0:	62a0      	str	r0, [r4, #40]	@ 0x28
 80088d2:	6018      	str	r0, [r3, #0]
 80088d4:	4bba      	ldr	r3, [pc, #744]	@ (8008bc0 <_tzset_unlocked_r+0x314>)
 80088d6:	6520      	str	r0, [r4, #80]	@ 0x50
 80088d8:	e9c3 2200 	strd	r2, r2, [r3]
 80088dc:	214a      	movs	r1, #74	@ 0x4a
 80088de:	2200      	movs	r2, #0
 80088e0:	2300      	movs	r3, #0
 80088e2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80088e6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 80088ea:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 80088ee:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80088f2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80088f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80088fa:	6828      	ldr	r0, [r5, #0]
 80088fc:	7221      	strb	r1, [r4, #8]
 80088fe:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8008902:	f000 fb39 	bl	8008f78 <free>
 8008906:	602e      	str	r6, [r5, #0]
 8008908:	b00d      	add	sp, #52	@ 0x34
 800890a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890e:	6829      	ldr	r1, [r5, #0]
 8008910:	2900      	cmp	r1, #0
 8008912:	f040 808e 	bne.w	8008a32 <_tzset_unlocked_r+0x186>
 8008916:	6828      	ldr	r0, [r5, #0]
 8008918:	f000 fb2e 	bl	8008f78 <free>
 800891c:	4630      	mov	r0, r6
 800891e:	f7f7 fc81 	bl	8000224 <strlen>
 8008922:	1c41      	adds	r1, r0, #1
 8008924:	4638      	mov	r0, r7
 8008926:	f000 fb51 	bl	8008fcc <_malloc_r>
 800892a:	6028      	str	r0, [r5, #0]
 800892c:	2800      	cmp	r0, #0
 800892e:	f040 8086 	bne.w	8008a3e <_tzset_unlocked_r+0x192>
 8008932:	4aa2      	ldr	r2, [pc, #648]	@ (8008bbc <_tzset_unlocked_r+0x310>)
 8008934:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 8008bc0 <_tzset_unlocked_r+0x314>
 8008938:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8008bb4 <_tzset_unlocked_r+0x308>
 800893c:	2300      	movs	r3, #0
 800893e:	6013      	str	r3, [r2, #0]
 8008940:	4aa0      	ldr	r2, [pc, #640]	@ (8008bc4 <_tzset_unlocked_r+0x318>)
 8008942:	f8ca 3000 	str.w	r3, [sl]
 8008946:	2000      	movs	r0, #0
 8008948:	2100      	movs	r1, #0
 800894a:	e9c8 2200 	strd	r2, r2, [r8]
 800894e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008952:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8008956:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800895a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800895e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8008962:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8008966:	224a      	movs	r2, #74	@ 0x4a
 8008968:	7222      	strb	r2, [r4, #8]
 800896a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800896c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8008970:	6523      	str	r3, [r4, #80]	@ 0x50
 8008972:	7833      	ldrb	r3, [r6, #0]
 8008974:	2b3a      	cmp	r3, #58	@ 0x3a
 8008976:	bf08      	it	eq
 8008978:	3601      	addeq	r6, #1
 800897a:	7833      	ldrb	r3, [r6, #0]
 800897c:	2b3c      	cmp	r3, #60	@ 0x3c
 800897e:	d162      	bne.n	8008a46 <_tzset_unlocked_r+0x19a>
 8008980:	1c75      	adds	r5, r6, #1
 8008982:	4a91      	ldr	r2, [pc, #580]	@ (8008bc8 <_tzset_unlocked_r+0x31c>)
 8008984:	4991      	ldr	r1, [pc, #580]	@ (8008bcc <_tzset_unlocked_r+0x320>)
 8008986:	ab0a      	add	r3, sp, #40	@ 0x28
 8008988:	4628      	mov	r0, r5
 800898a:	f000 ffc9 	bl	8009920 <siscanf>
 800898e:	2800      	cmp	r0, #0
 8008990:	ddba      	ble.n	8008908 <_tzset_unlocked_r+0x5c>
 8008992:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008994:	1eda      	subs	r2, r3, #3
 8008996:	2a07      	cmp	r2, #7
 8008998:	d8b6      	bhi.n	8008908 <_tzset_unlocked_r+0x5c>
 800899a:	5ceb      	ldrb	r3, [r5, r3]
 800899c:	2b3e      	cmp	r3, #62	@ 0x3e
 800899e:	d1b3      	bne.n	8008908 <_tzset_unlocked_r+0x5c>
 80089a0:	3602      	adds	r6, #2
 80089a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089a4:	18f5      	adds	r5, r6, r3
 80089a6:	5cf3      	ldrb	r3, [r6, r3]
 80089a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80089aa:	d15a      	bne.n	8008a62 <_tzset_unlocked_r+0x1b6>
 80089ac:	3501      	adds	r5, #1
 80089ae:	f04f 39ff 	mov.w	r9, #4294967295
 80089b2:	2300      	movs	r3, #0
 80089b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80089b8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80089bc:	af08      	add	r7, sp, #32
 80089be:	ab0a      	add	r3, sp, #40	@ 0x28
 80089c0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80089c4:	9303      	str	r3, [sp, #12]
 80089c6:	f10d 031e 	add.w	r3, sp, #30
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	4980      	ldr	r1, [pc, #512]	@ (8008bd0 <_tzset_unlocked_r+0x324>)
 80089ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80089d0:	aa07      	add	r2, sp, #28
 80089d2:	4628      	mov	r0, r5
 80089d4:	f000 ffa4 	bl	8009920 <siscanf>
 80089d8:	2800      	cmp	r0, #0
 80089da:	dd95      	ble.n	8008908 <_tzset_unlocked_r+0x5c>
 80089dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80089e0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80089e4:	223c      	movs	r2, #60	@ 0x3c
 80089e6:	fb02 6603 	mla	r6, r2, r3, r6
 80089ea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80089ee:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80089f2:	fb02 6603 	mla	r6, r2, r3, r6
 80089f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089f8:	fb09 f606 	mul.w	r6, r9, r6
 80089fc:	eb05 0903 	add.w	r9, r5, r3
 8008a00:	5ceb      	ldrb	r3, [r5, r3]
 8008a02:	2b3c      	cmp	r3, #60	@ 0x3c
 8008a04:	f040 80ee 	bne.w	8008be4 <_tzset_unlocked_r+0x338>
 8008a08:	f109 0501 	add.w	r5, r9, #1
 8008a0c:	4a71      	ldr	r2, [pc, #452]	@ (8008bd4 <_tzset_unlocked_r+0x328>)
 8008a0e:	496f      	ldr	r1, [pc, #444]	@ (8008bcc <_tzset_unlocked_r+0x320>)
 8008a10:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a12:	4628      	mov	r0, r5
 8008a14:	f000 ff84 	bl	8009920 <siscanf>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	dc28      	bgt.n	8008a6e <_tzset_unlocked_r+0x1c2>
 8008a1c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008a20:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a22:	d124      	bne.n	8008a6e <_tzset_unlocked_r+0x1c2>
 8008a24:	4b68      	ldr	r3, [pc, #416]	@ (8008bc8 <_tzset_unlocked_r+0x31c>)
 8008a26:	62a6      	str	r6, [r4, #40]	@ 0x28
 8008a28:	e9c8 3300 	strd	r3, r3, [r8]
 8008a2c:	f8ca 6000 	str.w	r6, [sl]
 8008a30:	e76a      	b.n	8008908 <_tzset_unlocked_r+0x5c>
 8008a32:	f7f7 fbed 	bl	8000210 <strcmp>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	f47f af6d 	bne.w	8008916 <_tzset_unlocked_r+0x6a>
 8008a3c:	e764      	b.n	8008908 <_tzset_unlocked_r+0x5c>
 8008a3e:	4631      	mov	r1, r6
 8008a40:	f000 f9dd 	bl	8008dfe <strcpy>
 8008a44:	e775      	b.n	8008932 <_tzset_unlocked_r+0x86>
 8008a46:	4a60      	ldr	r2, [pc, #384]	@ (8008bc8 <_tzset_unlocked_r+0x31c>)
 8008a48:	4963      	ldr	r1, [pc, #396]	@ (8008bd8 <_tzset_unlocked_r+0x32c>)
 8008a4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f000 ff67 	bl	8009920 <siscanf>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	f77f af58 	ble.w	8008908 <_tzset_unlocked_r+0x5c>
 8008a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a5a:	3b03      	subs	r3, #3
 8008a5c:	2b07      	cmp	r3, #7
 8008a5e:	d9a0      	bls.n	80089a2 <_tzset_unlocked_r+0xf6>
 8008a60:	e752      	b.n	8008908 <_tzset_unlocked_r+0x5c>
 8008a62:	2b2b      	cmp	r3, #43	@ 0x2b
 8008a64:	bf08      	it	eq
 8008a66:	3501      	addeq	r5, #1
 8008a68:	f04f 0901 	mov.w	r9, #1
 8008a6c:	e7a1      	b.n	80089b2 <_tzset_unlocked_r+0x106>
 8008a6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a70:	1eda      	subs	r2, r3, #3
 8008a72:	2a07      	cmp	r2, #7
 8008a74:	f63f af48 	bhi.w	8008908 <_tzset_unlocked_r+0x5c>
 8008a78:	5ceb      	ldrb	r3, [r5, r3]
 8008a7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a7c:	f47f af44 	bne.w	8008908 <_tzset_unlocked_r+0x5c>
 8008a80:	f109 0902 	add.w	r9, r9, #2
 8008a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a86:	eb09 0503 	add.w	r5, r9, r3
 8008a8a:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008a8e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008a90:	f040 80b7 	bne.w	8008c02 <_tzset_unlocked_r+0x356>
 8008a94:	3501      	adds	r5, #1
 8008a96:	f04f 39ff 	mov.w	r9, #4294967295
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008aa0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008aa4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008aa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aaa:	ab0a      	add	r3, sp, #40	@ 0x28
 8008aac:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	f10d 031e 	add.w	r3, sp, #30
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	4945      	ldr	r1, [pc, #276]	@ (8008bd0 <_tzset_unlocked_r+0x324>)
 8008aba:	ab0a      	add	r3, sp, #40	@ 0x28
 8008abc:	aa07      	add	r2, sp, #28
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f000 ff2e 	bl	8009920 <siscanf>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	f300 80a2 	bgt.w	8008c0e <_tzset_unlocked_r+0x362>
 8008aca:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 8008ace:	9304      	str	r3, [sp, #16]
 8008ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ad2:	4627      	mov	r7, r4
 8008ad4:	441d      	add	r5, r3
 8008ad6:	f04f 0b00 	mov.w	fp, #0
 8008ada:	782b      	ldrb	r3, [r5, #0]
 8008adc:	2b2c      	cmp	r3, #44	@ 0x2c
 8008ade:	bf08      	it	eq
 8008ae0:	3501      	addeq	r5, #1
 8008ae2:	f895 9000 	ldrb.w	r9, [r5]
 8008ae6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 8008aea:	f040 80a3 	bne.w	8008c34 <_tzset_unlocked_r+0x388>
 8008aee:	ab0a      	add	r3, sp, #40	@ 0x28
 8008af0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8008af4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008af8:	aa09      	add	r2, sp, #36	@ 0x24
 8008afa:	9200      	str	r2, [sp, #0]
 8008afc:	4937      	ldr	r1, [pc, #220]	@ (8008bdc <_tzset_unlocked_r+0x330>)
 8008afe:	9303      	str	r3, [sp, #12]
 8008b00:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8008b04:	4628      	mov	r0, r5
 8008b06:	f000 ff0b 	bl	8009920 <siscanf>
 8008b0a:	2803      	cmp	r0, #3
 8008b0c:	f47f aefc 	bne.w	8008908 <_tzset_unlocked_r+0x5c>
 8008b10:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8008b14:	1e4b      	subs	r3, r1, #1
 8008b16:	2b0b      	cmp	r3, #11
 8008b18:	f63f aef6 	bhi.w	8008908 <_tzset_unlocked_r+0x5c>
 8008b1c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8008b20:	1e53      	subs	r3, r2, #1
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	f63f aef0 	bhi.w	8008908 <_tzset_unlocked_r+0x5c>
 8008b28:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8008b2c:	2b06      	cmp	r3, #6
 8008b2e:	f63f aeeb 	bhi.w	8008908 <_tzset_unlocked_r+0x5c>
 8008b32:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8008b36:	f887 9008 	strb.w	r9, [r7, #8]
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b3e:	eb05 0903 	add.w	r9, r5, r3
 8008b42:	2500      	movs	r5, #0
 8008b44:	f04f 0302 	mov.w	r3, #2
 8008b48:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008b4c:	f8ad 501e 	strh.w	r5, [sp, #30]
 8008b50:	f8ad 5020 	strh.w	r5, [sp, #32]
 8008b54:	950a      	str	r5, [sp, #40]	@ 0x28
 8008b56:	f899 3000 	ldrb.w	r3, [r9]
 8008b5a:	2b2f      	cmp	r3, #47	@ 0x2f
 8008b5c:	f040 8096 	bne.w	8008c8c <_tzset_unlocked_r+0x3e0>
 8008b60:	ab0a      	add	r3, sp, #40	@ 0x28
 8008b62:	aa08      	add	r2, sp, #32
 8008b64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008b68:	f10d 021e 	add.w	r2, sp, #30
 8008b6c:	9200      	str	r2, [sp, #0]
 8008b6e:	491c      	ldr	r1, [pc, #112]	@ (8008be0 <_tzset_unlocked_r+0x334>)
 8008b70:	9303      	str	r3, [sp, #12]
 8008b72:	aa07      	add	r2, sp, #28
 8008b74:	4648      	mov	r0, r9
 8008b76:	f000 fed3 	bl	8009920 <siscanf>
 8008b7a:	42a8      	cmp	r0, r5
 8008b7c:	f300 8086 	bgt.w	8008c8c <_tzset_unlocked_r+0x3e0>
 8008b80:	214a      	movs	r1, #74	@ 0x4a
 8008b82:	2200      	movs	r2, #0
 8008b84:	2300      	movs	r3, #0
 8008b86:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8008b8a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008b8e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008b92:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8008b96:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 8008b9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 8008b9e:	7221      	strb	r1, [r4, #8]
 8008ba0:	62a5      	str	r5, [r4, #40]	@ 0x28
 8008ba2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8008ba6:	6525      	str	r5, [r4, #80]	@ 0x50
 8008ba8:	e6ae      	b.n	8008908 <_tzset_unlocked_r+0x5c>
 8008baa:	bf00      	nop
 8008bac:	0800b0f0 	.word	0x0800b0f0
 8008bb0:	20000b58 	.word	0x20000b58
 8008bb4:	20000b74 	.word	0x20000b74
 8008bb8:	0800b0f3 	.word	0x0800b0f3
 8008bbc:	20000b78 	.word	0x20000b78
 8008bc0:	20000034 	.word	0x20000034
 8008bc4:	0800b179 	.word	0x0800b179
 8008bc8:	20000b68 	.word	0x20000b68
 8008bcc:	0800b0f7 	.word	0x0800b0f7
 8008bd0:	0800b12c 	.word	0x0800b12c
 8008bd4:	20000b5c 	.word	0x20000b5c
 8008bd8:	0800b10a 	.word	0x0800b10a
 8008bdc:	0800b118 	.word	0x0800b118
 8008be0:	0800b12b 	.word	0x0800b12b
 8008be4:	4a3e      	ldr	r2, [pc, #248]	@ (8008ce0 <_tzset_unlocked_r+0x434>)
 8008be6:	493f      	ldr	r1, [pc, #252]	@ (8008ce4 <_tzset_unlocked_r+0x438>)
 8008be8:	ab0a      	add	r3, sp, #40	@ 0x28
 8008bea:	4648      	mov	r0, r9
 8008bec:	f000 fe98 	bl	8009920 <siscanf>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f77f af17 	ble.w	8008a24 <_tzset_unlocked_r+0x178>
 8008bf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bf8:	3b03      	subs	r3, #3
 8008bfa:	2b07      	cmp	r3, #7
 8008bfc:	f67f af42 	bls.w	8008a84 <_tzset_unlocked_r+0x1d8>
 8008c00:	e682      	b.n	8008908 <_tzset_unlocked_r+0x5c>
 8008c02:	2b2b      	cmp	r3, #43	@ 0x2b
 8008c04:	bf08      	it	eq
 8008c06:	3501      	addeq	r5, #1
 8008c08:	f04f 0901 	mov.w	r9, #1
 8008c0c:	e745      	b.n	8008a9a <_tzset_unlocked_r+0x1ee>
 8008c0e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008c12:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008c16:	213c      	movs	r1, #60	@ 0x3c
 8008c18:	fb01 3302 	mla	r3, r1, r2, r3
 8008c1c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008c20:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008c24:	fb01 3302 	mla	r3, r1, r2, r3
 8008c28:	fb09 f303 	mul.w	r3, r9, r3
 8008c2c:	e74f      	b.n	8008ace <_tzset_unlocked_r+0x222>
 8008c2e:	f04f 0b01 	mov.w	fp, #1
 8008c32:	e752      	b.n	8008ada <_tzset_unlocked_r+0x22e>
 8008c34:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8008c38:	bf06      	itte	eq
 8008c3a:	3501      	addeq	r5, #1
 8008c3c:	464b      	moveq	r3, r9
 8008c3e:	2344      	movne	r3, #68	@ 0x44
 8008c40:	220a      	movs	r2, #10
 8008c42:	a90b      	add	r1, sp, #44	@ 0x2c
 8008c44:	4628      	mov	r0, r5
 8008c46:	9305      	str	r3, [sp, #20]
 8008c48:	f000 fabc 	bl	80091c4 <strtoul>
 8008c4c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8008c50:	9b05      	ldr	r3, [sp, #20]
 8008c52:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8008c56:	45a9      	cmp	r9, r5
 8008c58:	d114      	bne.n	8008c84 <_tzset_unlocked_r+0x3d8>
 8008c5a:	234d      	movs	r3, #77	@ 0x4d
 8008c5c:	f1bb 0f00 	cmp.w	fp, #0
 8008c60:	d107      	bne.n	8008c72 <_tzset_unlocked_r+0x3c6>
 8008c62:	7223      	strb	r3, [r4, #8]
 8008c64:	2103      	movs	r1, #3
 8008c66:	2302      	movs	r3, #2
 8008c68:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8008c6c:	f8c4 b014 	str.w	fp, [r4, #20]
 8008c70:	e767      	b.n	8008b42 <_tzset_unlocked_r+0x296>
 8008c72:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8008c76:	220b      	movs	r2, #11
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 8008c7e:	2300      	movs	r3, #0
 8008c80:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008c82:	e75e      	b.n	8008b42 <_tzset_unlocked_r+0x296>
 8008c84:	b280      	uxth	r0, r0
 8008c86:	723b      	strb	r3, [r7, #8]
 8008c88:	6178      	str	r0, [r7, #20]
 8008c8a:	e75a      	b.n	8008b42 <_tzset_unlocked_r+0x296>
 8008c8c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008c90:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008c94:	213c      	movs	r1, #60	@ 0x3c
 8008c96:	fb01 3302 	mla	r3, r1, r2, r3
 8008c9a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008c9e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008ca2:	fb01 3302 	mla	r3, r1, r2, r3
 8008ca6:	61bb      	str	r3, [r7, #24]
 8008ca8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008caa:	3728      	adds	r7, #40	@ 0x28
 8008cac:	444d      	add	r5, r9
 8008cae:	f1bb 0f00 	cmp.w	fp, #0
 8008cb2:	d0bc      	beq.n	8008c2e <_tzset_unlocked_r+0x382>
 8008cb4:	9b04      	ldr	r3, [sp, #16]
 8008cb6:	6523      	str	r3, [r4, #80]	@ 0x50
 8008cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ce8 <_tzset_unlocked_r+0x43c>)
 8008cba:	f8c8 3000 	str.w	r3, [r8]
 8008cbe:	6860      	ldr	r0, [r4, #4]
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <_tzset_unlocked_r+0x434>)
 8008cc2:	62a6      	str	r6, [r4, #40]	@ 0x28
 8008cc4:	f8c8 3004 	str.w	r3, [r8, #4]
 8008cc8:	f7ff fd34 	bl	8008734 <__tzcalc_limits>
 8008ccc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8008cce:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008cd0:	f8ca 2000 	str.w	r2, [sl]
 8008cd4:	1a9b      	subs	r3, r3, r2
 8008cd6:	4a05      	ldr	r2, [pc, #20]	@ (8008cec <_tzset_unlocked_r+0x440>)
 8008cd8:	bf18      	it	ne
 8008cda:	2301      	movne	r3, #1
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	e613      	b.n	8008908 <_tzset_unlocked_r+0x5c>
 8008ce0:	20000b5c 	.word	0x20000b5c
 8008ce4:	0800b10a 	.word	0x0800b10a
 8008ce8:	20000b68 	.word	0x20000b68
 8008cec:	20000b78 	.word	0x20000b78

08008cf0 <_close_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4d06      	ldr	r5, [pc, #24]	@ (8008d0c <_close_r+0x1c>)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	602b      	str	r3, [r5, #0]
 8008cfc:	f7f8 fae6 	bl	80012cc <_close>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	d102      	bne.n	8008d0a <_close_r+0x1a>
 8008d04:	682b      	ldr	r3, [r5, #0]
 8008d06:	b103      	cbz	r3, 8008d0a <_close_r+0x1a>
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	20000b7c 	.word	0x20000b7c

08008d10 <_gettimeofday_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4d07      	ldr	r5, [pc, #28]	@ (8008d30 <_gettimeofday_r+0x20>)
 8008d14:	2300      	movs	r3, #0
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	602b      	str	r3, [r5, #0]
 8008d1e:	f001 fe0f 	bl	800a940 <_gettimeofday>
 8008d22:	1c43      	adds	r3, r0, #1
 8008d24:	d102      	bne.n	8008d2c <_gettimeofday_r+0x1c>
 8008d26:	682b      	ldr	r3, [r5, #0]
 8008d28:	b103      	cbz	r3, 8008d2c <_gettimeofday_r+0x1c>
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	bd38      	pop	{r3, r4, r5, pc}
 8008d2e:	bf00      	nop
 8008d30:	20000b7c 	.word	0x20000b7c

08008d34 <_lseek_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4d07      	ldr	r5, [pc, #28]	@ (8008d54 <_lseek_r+0x20>)
 8008d38:	4604      	mov	r4, r0
 8008d3a:	4608      	mov	r0, r1
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	2200      	movs	r2, #0
 8008d40:	602a      	str	r2, [r5, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	f7f8 fae9 	bl	800131a <_lseek>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_lseek_r+0x1e>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_lseek_r+0x1e>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	20000b7c 	.word	0x20000b7c

08008d58 <_read_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d07      	ldr	r5, [pc, #28]	@ (8008d78 <_read_r+0x20>)
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	4608      	mov	r0, r1
 8008d60:	4611      	mov	r1, r2
 8008d62:	2200      	movs	r2, #0
 8008d64:	602a      	str	r2, [r5, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f7f8 fa77 	bl	800125a <_read>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_read_r+0x1e>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_read_r+0x1e>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	20000b7c 	.word	0x20000b7c

08008d7c <_write_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d07      	ldr	r5, [pc, #28]	@ (8008d9c <_write_r+0x20>)
 8008d80:	4604      	mov	r4, r0
 8008d82:	4608      	mov	r0, r1
 8008d84:	4611      	mov	r1, r2
 8008d86:	2200      	movs	r2, #0
 8008d88:	602a      	str	r2, [r5, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	f7f8 fa82 	bl	8001294 <_write>
 8008d90:	1c43      	adds	r3, r0, #1
 8008d92:	d102      	bne.n	8008d9a <_write_r+0x1e>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	b103      	cbz	r3, 8008d9a <_write_r+0x1e>
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}
 8008d9c:	20000b7c 	.word	0x20000b7c

08008da0 <__errno>:
 8008da0:	4b01      	ldr	r3, [pc, #4]	@ (8008da8 <__errno+0x8>)
 8008da2:	6818      	ldr	r0, [r3, #0]
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	2000003c 	.word	0x2000003c

08008dac <__libc_init_array>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	4d0d      	ldr	r5, [pc, #52]	@ (8008de4 <__libc_init_array+0x38>)
 8008db0:	4c0d      	ldr	r4, [pc, #52]	@ (8008de8 <__libc_init_array+0x3c>)
 8008db2:	1b64      	subs	r4, r4, r5
 8008db4:	10a4      	asrs	r4, r4, #2
 8008db6:	2600      	movs	r6, #0
 8008db8:	42a6      	cmp	r6, r4
 8008dba:	d109      	bne.n	8008dd0 <__libc_init_array+0x24>
 8008dbc:	4d0b      	ldr	r5, [pc, #44]	@ (8008dec <__libc_init_array+0x40>)
 8008dbe:	4c0c      	ldr	r4, [pc, #48]	@ (8008df0 <__libc_init_array+0x44>)
 8008dc0:	f001 fdc6 	bl	800a950 <_init>
 8008dc4:	1b64      	subs	r4, r4, r5
 8008dc6:	10a4      	asrs	r4, r4, #2
 8008dc8:	2600      	movs	r6, #0
 8008dca:	42a6      	cmp	r6, r4
 8008dcc:	d105      	bne.n	8008dda <__libc_init_array+0x2e>
 8008dce:	bd70      	pop	{r4, r5, r6, pc}
 8008dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd4:	4798      	blx	r3
 8008dd6:	3601      	adds	r6, #1
 8008dd8:	e7ee      	b.n	8008db8 <__libc_init_array+0xc>
 8008dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dde:	4798      	blx	r3
 8008de0:	3601      	adds	r6, #1
 8008de2:	e7f2      	b.n	8008dca <__libc_init_array+0x1e>
 8008de4:	0800b2d4 	.word	0x0800b2d4
 8008de8:	0800b2d4 	.word	0x0800b2d4
 8008dec:	0800b2d4 	.word	0x0800b2d4
 8008df0:	0800b2d8 	.word	0x0800b2d8

08008df4 <__retarget_lock_init_recursive>:
 8008df4:	4770      	bx	lr

08008df6 <__retarget_lock_acquire>:
 8008df6:	4770      	bx	lr

08008df8 <__retarget_lock_acquire_recursive>:
 8008df8:	4770      	bx	lr

08008dfa <__retarget_lock_release>:
 8008dfa:	4770      	bx	lr

08008dfc <__retarget_lock_release_recursive>:
 8008dfc:	4770      	bx	lr

08008dfe <strcpy>:
 8008dfe:	4603      	mov	r3, r0
 8008e00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e04:	f803 2b01 	strb.w	r2, [r3], #1
 8008e08:	2a00      	cmp	r2, #0
 8008e0a:	d1f9      	bne.n	8008e00 <strcpy+0x2>
 8008e0c:	4770      	bx	lr
	...

08008e10 <__assert_func>:
 8008e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e12:	4614      	mov	r4, r2
 8008e14:	461a      	mov	r2, r3
 8008e16:	4b09      	ldr	r3, [pc, #36]	@ (8008e3c <__assert_func+0x2c>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	68d8      	ldr	r0, [r3, #12]
 8008e1e:	b954      	cbnz	r4, 8008e36 <__assert_func+0x26>
 8008e20:	4b07      	ldr	r3, [pc, #28]	@ (8008e40 <__assert_func+0x30>)
 8008e22:	461c      	mov	r4, r3
 8008e24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e28:	9100      	str	r1, [sp, #0]
 8008e2a:	462b      	mov	r3, r5
 8008e2c:	4905      	ldr	r1, [pc, #20]	@ (8008e44 <__assert_func+0x34>)
 8008e2e:	f000 fd65 	bl	80098fc <fiprintf>
 8008e32:	f000 fe93 	bl	8009b5c <abort>
 8008e36:	4b04      	ldr	r3, [pc, #16]	@ (8008e48 <__assert_func+0x38>)
 8008e38:	e7f4      	b.n	8008e24 <__assert_func+0x14>
 8008e3a:	bf00      	nop
 8008e3c:	2000003c 	.word	0x2000003c
 8008e40:	0800b179 	.word	0x0800b179
 8008e44:	0800b14b 	.word	0x0800b14b
 8008e48:	0800b13e 	.word	0x0800b13e

08008e4c <_free_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4605      	mov	r5, r0
 8008e50:	2900      	cmp	r1, #0
 8008e52:	d041      	beq.n	8008ed8 <_free_r+0x8c>
 8008e54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e58:	1f0c      	subs	r4, r1, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	bfb8      	it	lt
 8008e5e:	18e4      	addlt	r4, r4, r3
 8008e60:	f000 f934 	bl	80090cc <__malloc_lock>
 8008e64:	4a1d      	ldr	r2, [pc, #116]	@ (8008edc <_free_r+0x90>)
 8008e66:	6813      	ldr	r3, [r2, #0]
 8008e68:	b933      	cbnz	r3, 8008e78 <_free_r+0x2c>
 8008e6a:	6063      	str	r3, [r4, #4]
 8008e6c:	6014      	str	r4, [r2, #0]
 8008e6e:	4628      	mov	r0, r5
 8008e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e74:	f000 b930 	b.w	80090d8 <__malloc_unlock>
 8008e78:	42a3      	cmp	r3, r4
 8008e7a:	d908      	bls.n	8008e8e <_free_r+0x42>
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	1821      	adds	r1, r4, r0
 8008e80:	428b      	cmp	r3, r1
 8008e82:	bf01      	itttt	eq
 8008e84:	6819      	ldreq	r1, [r3, #0]
 8008e86:	685b      	ldreq	r3, [r3, #4]
 8008e88:	1809      	addeq	r1, r1, r0
 8008e8a:	6021      	streq	r1, [r4, #0]
 8008e8c:	e7ed      	b.n	8008e6a <_free_r+0x1e>
 8008e8e:	461a      	mov	r2, r3
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	b10b      	cbz	r3, 8008e98 <_free_r+0x4c>
 8008e94:	42a3      	cmp	r3, r4
 8008e96:	d9fa      	bls.n	8008e8e <_free_r+0x42>
 8008e98:	6811      	ldr	r1, [r2, #0]
 8008e9a:	1850      	adds	r0, r2, r1
 8008e9c:	42a0      	cmp	r0, r4
 8008e9e:	d10b      	bne.n	8008eb8 <_free_r+0x6c>
 8008ea0:	6820      	ldr	r0, [r4, #0]
 8008ea2:	4401      	add	r1, r0
 8008ea4:	1850      	adds	r0, r2, r1
 8008ea6:	4283      	cmp	r3, r0
 8008ea8:	6011      	str	r1, [r2, #0]
 8008eaa:	d1e0      	bne.n	8008e6e <_free_r+0x22>
 8008eac:	6818      	ldr	r0, [r3, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	6053      	str	r3, [r2, #4]
 8008eb2:	4408      	add	r0, r1
 8008eb4:	6010      	str	r0, [r2, #0]
 8008eb6:	e7da      	b.n	8008e6e <_free_r+0x22>
 8008eb8:	d902      	bls.n	8008ec0 <_free_r+0x74>
 8008eba:	230c      	movs	r3, #12
 8008ebc:	602b      	str	r3, [r5, #0]
 8008ebe:	e7d6      	b.n	8008e6e <_free_r+0x22>
 8008ec0:	6820      	ldr	r0, [r4, #0]
 8008ec2:	1821      	adds	r1, r4, r0
 8008ec4:	428b      	cmp	r3, r1
 8008ec6:	bf04      	itt	eq
 8008ec8:	6819      	ldreq	r1, [r3, #0]
 8008eca:	685b      	ldreq	r3, [r3, #4]
 8008ecc:	6063      	str	r3, [r4, #4]
 8008ece:	bf04      	itt	eq
 8008ed0:	1809      	addeq	r1, r1, r0
 8008ed2:	6021      	streq	r1, [r4, #0]
 8008ed4:	6054      	str	r4, [r2, #4]
 8008ed6:	e7ca      	b.n	8008e6e <_free_r+0x22>
 8008ed8:	bd38      	pop	{r3, r4, r5, pc}
 8008eda:	bf00      	nop
 8008edc:	20000b88 	.word	0x20000b88

08008ee0 <_findenv_r>:
 8008ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8008f54 <_findenv_r+0x74>
 8008ee8:	4606      	mov	r6, r0
 8008eea:	4689      	mov	r9, r1
 8008eec:	4617      	mov	r7, r2
 8008eee:	f000 fe3d 	bl	8009b6c <__env_lock>
 8008ef2:	f8da 4000 	ldr.w	r4, [sl]
 8008ef6:	b134      	cbz	r4, 8008f06 <_findenv_r+0x26>
 8008ef8:	464b      	mov	r3, r9
 8008efa:	4698      	mov	r8, r3
 8008efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f00:	b13a      	cbz	r2, 8008f12 <_findenv_r+0x32>
 8008f02:	2a3d      	cmp	r2, #61	@ 0x3d
 8008f04:	d1f9      	bne.n	8008efa <_findenv_r+0x1a>
 8008f06:	4630      	mov	r0, r6
 8008f08:	f000 fe36 	bl	8009b78 <__env_unlock>
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f12:	eba8 0809 	sub.w	r8, r8, r9
 8008f16:	46a3      	mov	fp, r4
 8008f18:	f854 0b04 	ldr.w	r0, [r4], #4
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d0f2      	beq.n	8008f06 <_findenv_r+0x26>
 8008f20:	4642      	mov	r2, r8
 8008f22:	4649      	mov	r1, r9
 8008f24:	f000 fd40 	bl	80099a8 <strncmp>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d1f4      	bne.n	8008f16 <_findenv_r+0x36>
 8008f2c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008f30:	eb03 0508 	add.w	r5, r3, r8
 8008f34:	f813 3008 	ldrb.w	r3, [r3, r8]
 8008f38:	2b3d      	cmp	r3, #61	@ 0x3d
 8008f3a:	d1ec      	bne.n	8008f16 <_findenv_r+0x36>
 8008f3c:	f8da 3000 	ldr.w	r3, [sl]
 8008f40:	ebab 0303 	sub.w	r3, fp, r3
 8008f44:	109b      	asrs	r3, r3, #2
 8008f46:	4630      	mov	r0, r6
 8008f48:	603b      	str	r3, [r7, #0]
 8008f4a:	f000 fe15 	bl	8009b78 <__env_unlock>
 8008f4e:	1c68      	adds	r0, r5, #1
 8008f50:	e7dd      	b.n	8008f0e <_findenv_r+0x2e>
 8008f52:	bf00      	nop
 8008f54:	20000000 	.word	0x20000000

08008f58 <_getenv_r>:
 8008f58:	b507      	push	{r0, r1, r2, lr}
 8008f5a:	aa01      	add	r2, sp, #4
 8008f5c:	f7ff ffc0 	bl	8008ee0 <_findenv_r>
 8008f60:	b003      	add	sp, #12
 8008f62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008f68 <malloc>:
 8008f68:	4b02      	ldr	r3, [pc, #8]	@ (8008f74 <malloc+0xc>)
 8008f6a:	4601      	mov	r1, r0
 8008f6c:	6818      	ldr	r0, [r3, #0]
 8008f6e:	f000 b82d 	b.w	8008fcc <_malloc_r>
 8008f72:	bf00      	nop
 8008f74:	2000003c 	.word	0x2000003c

08008f78 <free>:
 8008f78:	4b02      	ldr	r3, [pc, #8]	@ (8008f84 <free+0xc>)
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	f7ff bf65 	b.w	8008e4c <_free_r>
 8008f82:	bf00      	nop
 8008f84:	2000003c 	.word	0x2000003c

08008f88 <sbrk_aligned>:
 8008f88:	b570      	push	{r4, r5, r6, lr}
 8008f8a:	4e0f      	ldr	r6, [pc, #60]	@ (8008fc8 <sbrk_aligned+0x40>)
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	6831      	ldr	r1, [r6, #0]
 8008f90:	4605      	mov	r5, r0
 8008f92:	b911      	cbnz	r1, 8008f9a <sbrk_aligned+0x12>
 8008f94:	f000 fdc4 	bl	8009b20 <_sbrk_r>
 8008f98:	6030      	str	r0, [r6, #0]
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f000 fdbf 	bl	8009b20 <_sbrk_r>
 8008fa2:	1c43      	adds	r3, r0, #1
 8008fa4:	d103      	bne.n	8008fae <sbrk_aligned+0x26>
 8008fa6:	f04f 34ff 	mov.w	r4, #4294967295
 8008faa:	4620      	mov	r0, r4
 8008fac:	bd70      	pop	{r4, r5, r6, pc}
 8008fae:	1cc4      	adds	r4, r0, #3
 8008fb0:	f024 0403 	bic.w	r4, r4, #3
 8008fb4:	42a0      	cmp	r0, r4
 8008fb6:	d0f8      	beq.n	8008faa <sbrk_aligned+0x22>
 8008fb8:	1a21      	subs	r1, r4, r0
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f000 fdb0 	bl	8009b20 <_sbrk_r>
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d1f2      	bne.n	8008faa <sbrk_aligned+0x22>
 8008fc4:	e7ef      	b.n	8008fa6 <sbrk_aligned+0x1e>
 8008fc6:	bf00      	nop
 8008fc8:	20000b84 	.word	0x20000b84

08008fcc <_malloc_r>:
 8008fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd0:	1ccd      	adds	r5, r1, #3
 8008fd2:	f025 0503 	bic.w	r5, r5, #3
 8008fd6:	3508      	adds	r5, #8
 8008fd8:	2d0c      	cmp	r5, #12
 8008fda:	bf38      	it	cc
 8008fdc:	250c      	movcc	r5, #12
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	db01      	blt.n	8008fe8 <_malloc_r+0x1c>
 8008fe4:	42a9      	cmp	r1, r5
 8008fe6:	d904      	bls.n	8008ff2 <_malloc_r+0x26>
 8008fe8:	230c      	movs	r3, #12
 8008fea:	6033      	str	r3, [r6, #0]
 8008fec:	2000      	movs	r0, #0
 8008fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090c8 <_malloc_r+0xfc>
 8008ff6:	f000 f869 	bl	80090cc <__malloc_lock>
 8008ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8008ffe:	461c      	mov	r4, r3
 8009000:	bb44      	cbnz	r4, 8009054 <_malloc_r+0x88>
 8009002:	4629      	mov	r1, r5
 8009004:	4630      	mov	r0, r6
 8009006:	f7ff ffbf 	bl	8008f88 <sbrk_aligned>
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	4604      	mov	r4, r0
 800900e:	d158      	bne.n	80090c2 <_malloc_r+0xf6>
 8009010:	f8d8 4000 	ldr.w	r4, [r8]
 8009014:	4627      	mov	r7, r4
 8009016:	2f00      	cmp	r7, #0
 8009018:	d143      	bne.n	80090a2 <_malloc_r+0xd6>
 800901a:	2c00      	cmp	r4, #0
 800901c:	d04b      	beq.n	80090b6 <_malloc_r+0xea>
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	4639      	mov	r1, r7
 8009022:	4630      	mov	r0, r6
 8009024:	eb04 0903 	add.w	r9, r4, r3
 8009028:	f000 fd7a 	bl	8009b20 <_sbrk_r>
 800902c:	4581      	cmp	r9, r0
 800902e:	d142      	bne.n	80090b6 <_malloc_r+0xea>
 8009030:	6821      	ldr	r1, [r4, #0]
 8009032:	1a6d      	subs	r5, r5, r1
 8009034:	4629      	mov	r1, r5
 8009036:	4630      	mov	r0, r6
 8009038:	f7ff ffa6 	bl	8008f88 <sbrk_aligned>
 800903c:	3001      	adds	r0, #1
 800903e:	d03a      	beq.n	80090b6 <_malloc_r+0xea>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	442b      	add	r3, r5
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	f8d8 3000 	ldr.w	r3, [r8]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	bb62      	cbnz	r2, 80090a8 <_malloc_r+0xdc>
 800904e:	f8c8 7000 	str.w	r7, [r8]
 8009052:	e00f      	b.n	8009074 <_malloc_r+0xa8>
 8009054:	6822      	ldr	r2, [r4, #0]
 8009056:	1b52      	subs	r2, r2, r5
 8009058:	d420      	bmi.n	800909c <_malloc_r+0xd0>
 800905a:	2a0b      	cmp	r2, #11
 800905c:	d917      	bls.n	800908e <_malloc_r+0xc2>
 800905e:	1961      	adds	r1, r4, r5
 8009060:	42a3      	cmp	r3, r4
 8009062:	6025      	str	r5, [r4, #0]
 8009064:	bf18      	it	ne
 8009066:	6059      	strne	r1, [r3, #4]
 8009068:	6863      	ldr	r3, [r4, #4]
 800906a:	bf08      	it	eq
 800906c:	f8c8 1000 	streq.w	r1, [r8]
 8009070:	5162      	str	r2, [r4, r5]
 8009072:	604b      	str	r3, [r1, #4]
 8009074:	4630      	mov	r0, r6
 8009076:	f000 f82f 	bl	80090d8 <__malloc_unlock>
 800907a:	f104 000b 	add.w	r0, r4, #11
 800907e:	1d23      	adds	r3, r4, #4
 8009080:	f020 0007 	bic.w	r0, r0, #7
 8009084:	1ac2      	subs	r2, r0, r3
 8009086:	bf1c      	itt	ne
 8009088:	1a1b      	subne	r3, r3, r0
 800908a:	50a3      	strne	r3, [r4, r2]
 800908c:	e7af      	b.n	8008fee <_malloc_r+0x22>
 800908e:	6862      	ldr	r2, [r4, #4]
 8009090:	42a3      	cmp	r3, r4
 8009092:	bf0c      	ite	eq
 8009094:	f8c8 2000 	streq.w	r2, [r8]
 8009098:	605a      	strne	r2, [r3, #4]
 800909a:	e7eb      	b.n	8009074 <_malloc_r+0xa8>
 800909c:	4623      	mov	r3, r4
 800909e:	6864      	ldr	r4, [r4, #4]
 80090a0:	e7ae      	b.n	8009000 <_malloc_r+0x34>
 80090a2:	463c      	mov	r4, r7
 80090a4:	687f      	ldr	r7, [r7, #4]
 80090a6:	e7b6      	b.n	8009016 <_malloc_r+0x4a>
 80090a8:	461a      	mov	r2, r3
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	42a3      	cmp	r3, r4
 80090ae:	d1fb      	bne.n	80090a8 <_malloc_r+0xdc>
 80090b0:	2300      	movs	r3, #0
 80090b2:	6053      	str	r3, [r2, #4]
 80090b4:	e7de      	b.n	8009074 <_malloc_r+0xa8>
 80090b6:	230c      	movs	r3, #12
 80090b8:	6033      	str	r3, [r6, #0]
 80090ba:	4630      	mov	r0, r6
 80090bc:	f000 f80c 	bl	80090d8 <__malloc_unlock>
 80090c0:	e794      	b.n	8008fec <_malloc_r+0x20>
 80090c2:	6005      	str	r5, [r0, #0]
 80090c4:	e7d6      	b.n	8009074 <_malloc_r+0xa8>
 80090c6:	bf00      	nop
 80090c8:	20000b88 	.word	0x20000b88

080090cc <__malloc_lock>:
 80090cc:	4801      	ldr	r0, [pc, #4]	@ (80090d4 <__malloc_lock+0x8>)
 80090ce:	f7ff be93 	b.w	8008df8 <__retarget_lock_acquire_recursive>
 80090d2:	bf00      	nop
 80090d4:	20000b82 	.word	0x20000b82

080090d8 <__malloc_unlock>:
 80090d8:	4801      	ldr	r0, [pc, #4]	@ (80090e0 <__malloc_unlock+0x8>)
 80090da:	f7ff be8f 	b.w	8008dfc <__retarget_lock_release_recursive>
 80090de:	bf00      	nop
 80090e0:	20000b82 	.word	0x20000b82

080090e4 <_strtoul_l.constprop.0>:
 80090e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090e8:	4e34      	ldr	r6, [pc, #208]	@ (80091bc <_strtoul_l.constprop.0+0xd8>)
 80090ea:	4686      	mov	lr, r0
 80090ec:	460d      	mov	r5, r1
 80090ee:	4628      	mov	r0, r5
 80090f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090f4:	5d37      	ldrb	r7, [r6, r4]
 80090f6:	f017 0708 	ands.w	r7, r7, #8
 80090fa:	d1f8      	bne.n	80090ee <_strtoul_l.constprop.0+0xa>
 80090fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80090fe:	d12f      	bne.n	8009160 <_strtoul_l.constprop.0+0x7c>
 8009100:	782c      	ldrb	r4, [r5, #0]
 8009102:	2701      	movs	r7, #1
 8009104:	1c85      	adds	r5, r0, #2
 8009106:	f033 0010 	bics.w	r0, r3, #16
 800910a:	d109      	bne.n	8009120 <_strtoul_l.constprop.0+0x3c>
 800910c:	2c30      	cmp	r4, #48	@ 0x30
 800910e:	d12c      	bne.n	800916a <_strtoul_l.constprop.0+0x86>
 8009110:	7828      	ldrb	r0, [r5, #0]
 8009112:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009116:	2858      	cmp	r0, #88	@ 0x58
 8009118:	d127      	bne.n	800916a <_strtoul_l.constprop.0+0x86>
 800911a:	786c      	ldrb	r4, [r5, #1]
 800911c:	2310      	movs	r3, #16
 800911e:	3502      	adds	r5, #2
 8009120:	f04f 38ff 	mov.w	r8, #4294967295
 8009124:	2600      	movs	r6, #0
 8009126:	fbb8 f8f3 	udiv	r8, r8, r3
 800912a:	fb03 f908 	mul.w	r9, r3, r8
 800912e:	ea6f 0909 	mvn.w	r9, r9
 8009132:	4630      	mov	r0, r6
 8009134:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009138:	f1bc 0f09 	cmp.w	ip, #9
 800913c:	d81c      	bhi.n	8009178 <_strtoul_l.constprop.0+0x94>
 800913e:	4664      	mov	r4, ip
 8009140:	42a3      	cmp	r3, r4
 8009142:	dd2a      	ble.n	800919a <_strtoul_l.constprop.0+0xb6>
 8009144:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009148:	d007      	beq.n	800915a <_strtoul_l.constprop.0+0x76>
 800914a:	4580      	cmp	r8, r0
 800914c:	d322      	bcc.n	8009194 <_strtoul_l.constprop.0+0xb0>
 800914e:	d101      	bne.n	8009154 <_strtoul_l.constprop.0+0x70>
 8009150:	45a1      	cmp	r9, r4
 8009152:	db1f      	blt.n	8009194 <_strtoul_l.constprop.0+0xb0>
 8009154:	fb00 4003 	mla	r0, r0, r3, r4
 8009158:	2601      	movs	r6, #1
 800915a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800915e:	e7e9      	b.n	8009134 <_strtoul_l.constprop.0+0x50>
 8009160:	2c2b      	cmp	r4, #43	@ 0x2b
 8009162:	bf04      	itt	eq
 8009164:	782c      	ldrbeq	r4, [r5, #0]
 8009166:	1c85      	addeq	r5, r0, #2
 8009168:	e7cd      	b.n	8009106 <_strtoul_l.constprop.0+0x22>
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1d8      	bne.n	8009120 <_strtoul_l.constprop.0+0x3c>
 800916e:	2c30      	cmp	r4, #48	@ 0x30
 8009170:	bf0c      	ite	eq
 8009172:	2308      	moveq	r3, #8
 8009174:	230a      	movne	r3, #10
 8009176:	e7d3      	b.n	8009120 <_strtoul_l.constprop.0+0x3c>
 8009178:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800917c:	f1bc 0f19 	cmp.w	ip, #25
 8009180:	d801      	bhi.n	8009186 <_strtoul_l.constprop.0+0xa2>
 8009182:	3c37      	subs	r4, #55	@ 0x37
 8009184:	e7dc      	b.n	8009140 <_strtoul_l.constprop.0+0x5c>
 8009186:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800918a:	f1bc 0f19 	cmp.w	ip, #25
 800918e:	d804      	bhi.n	800919a <_strtoul_l.constprop.0+0xb6>
 8009190:	3c57      	subs	r4, #87	@ 0x57
 8009192:	e7d5      	b.n	8009140 <_strtoul_l.constprop.0+0x5c>
 8009194:	f04f 36ff 	mov.w	r6, #4294967295
 8009198:	e7df      	b.n	800915a <_strtoul_l.constprop.0+0x76>
 800919a:	1c73      	adds	r3, r6, #1
 800919c:	d106      	bne.n	80091ac <_strtoul_l.constprop.0+0xc8>
 800919e:	2322      	movs	r3, #34	@ 0x22
 80091a0:	f8ce 3000 	str.w	r3, [lr]
 80091a4:	4630      	mov	r0, r6
 80091a6:	b932      	cbnz	r2, 80091b6 <_strtoul_l.constprop.0+0xd2>
 80091a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091ac:	b107      	cbz	r7, 80091b0 <_strtoul_l.constprop.0+0xcc>
 80091ae:	4240      	negs	r0, r0
 80091b0:	2a00      	cmp	r2, #0
 80091b2:	d0f9      	beq.n	80091a8 <_strtoul_l.constprop.0+0xc4>
 80091b4:	b106      	cbz	r6, 80091b8 <_strtoul_l.constprop.0+0xd4>
 80091b6:	1e69      	subs	r1, r5, #1
 80091b8:	6011      	str	r1, [r2, #0]
 80091ba:	e7f5      	b.n	80091a8 <_strtoul_l.constprop.0+0xc4>
 80091bc:	0800b17b 	.word	0x0800b17b

080091c0 <_strtoul_r>:
 80091c0:	f7ff bf90 	b.w	80090e4 <_strtoul_l.constprop.0>

080091c4 <strtoul>:
 80091c4:	4613      	mov	r3, r2
 80091c6:	460a      	mov	r2, r1
 80091c8:	4601      	mov	r1, r0
 80091ca:	4802      	ldr	r0, [pc, #8]	@ (80091d4 <strtoul+0x10>)
 80091cc:	6800      	ldr	r0, [r0, #0]
 80091ce:	f7ff bf89 	b.w	80090e4 <_strtoul_l.constprop.0>
 80091d2:	bf00      	nop
 80091d4:	2000003c 	.word	0x2000003c

080091d8 <__ssputs_r>:
 80091d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091dc:	688e      	ldr	r6, [r1, #8]
 80091de:	461f      	mov	r7, r3
 80091e0:	42be      	cmp	r6, r7
 80091e2:	680b      	ldr	r3, [r1, #0]
 80091e4:	4682      	mov	sl, r0
 80091e6:	460c      	mov	r4, r1
 80091e8:	4690      	mov	r8, r2
 80091ea:	d82d      	bhi.n	8009248 <__ssputs_r+0x70>
 80091ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80091f4:	d026      	beq.n	8009244 <__ssputs_r+0x6c>
 80091f6:	6965      	ldr	r5, [r4, #20]
 80091f8:	6909      	ldr	r1, [r1, #16]
 80091fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091fe:	eba3 0901 	sub.w	r9, r3, r1
 8009202:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009206:	1c7b      	adds	r3, r7, #1
 8009208:	444b      	add	r3, r9
 800920a:	106d      	asrs	r5, r5, #1
 800920c:	429d      	cmp	r5, r3
 800920e:	bf38      	it	cc
 8009210:	461d      	movcc	r5, r3
 8009212:	0553      	lsls	r3, r2, #21
 8009214:	d527      	bpl.n	8009266 <__ssputs_r+0x8e>
 8009216:	4629      	mov	r1, r5
 8009218:	f7ff fed8 	bl	8008fcc <_malloc_r>
 800921c:	4606      	mov	r6, r0
 800921e:	b360      	cbz	r0, 800927a <__ssputs_r+0xa2>
 8009220:	6921      	ldr	r1, [r4, #16]
 8009222:	464a      	mov	r2, r9
 8009224:	f000 fc8c 	bl	8009b40 <memcpy>
 8009228:	89a3      	ldrh	r3, [r4, #12]
 800922a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800922e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009232:	81a3      	strh	r3, [r4, #12]
 8009234:	6126      	str	r6, [r4, #16]
 8009236:	6165      	str	r5, [r4, #20]
 8009238:	444e      	add	r6, r9
 800923a:	eba5 0509 	sub.w	r5, r5, r9
 800923e:	6026      	str	r6, [r4, #0]
 8009240:	60a5      	str	r5, [r4, #8]
 8009242:	463e      	mov	r6, r7
 8009244:	42be      	cmp	r6, r7
 8009246:	d900      	bls.n	800924a <__ssputs_r+0x72>
 8009248:	463e      	mov	r6, r7
 800924a:	6820      	ldr	r0, [r4, #0]
 800924c:	4632      	mov	r2, r6
 800924e:	4641      	mov	r1, r8
 8009250:	f000 fb90 	bl	8009974 <memmove>
 8009254:	68a3      	ldr	r3, [r4, #8]
 8009256:	1b9b      	subs	r3, r3, r6
 8009258:	60a3      	str	r3, [r4, #8]
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	4433      	add	r3, r6
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	2000      	movs	r0, #0
 8009262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009266:	462a      	mov	r2, r5
 8009268:	f000 fc8c 	bl	8009b84 <_realloc_r>
 800926c:	4606      	mov	r6, r0
 800926e:	2800      	cmp	r0, #0
 8009270:	d1e0      	bne.n	8009234 <__ssputs_r+0x5c>
 8009272:	6921      	ldr	r1, [r4, #16]
 8009274:	4650      	mov	r0, sl
 8009276:	f7ff fde9 	bl	8008e4c <_free_r>
 800927a:	230c      	movs	r3, #12
 800927c:	f8ca 3000 	str.w	r3, [sl]
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009286:	81a3      	strh	r3, [r4, #12]
 8009288:	f04f 30ff 	mov.w	r0, #4294967295
 800928c:	e7e9      	b.n	8009262 <__ssputs_r+0x8a>
	...

08009290 <_svfiprintf_r>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	4698      	mov	r8, r3
 8009296:	898b      	ldrh	r3, [r1, #12]
 8009298:	061b      	lsls	r3, r3, #24
 800929a:	b09d      	sub	sp, #116	@ 0x74
 800929c:	4607      	mov	r7, r0
 800929e:	460d      	mov	r5, r1
 80092a0:	4614      	mov	r4, r2
 80092a2:	d510      	bpl.n	80092c6 <_svfiprintf_r+0x36>
 80092a4:	690b      	ldr	r3, [r1, #16]
 80092a6:	b973      	cbnz	r3, 80092c6 <_svfiprintf_r+0x36>
 80092a8:	2140      	movs	r1, #64	@ 0x40
 80092aa:	f7ff fe8f 	bl	8008fcc <_malloc_r>
 80092ae:	6028      	str	r0, [r5, #0]
 80092b0:	6128      	str	r0, [r5, #16]
 80092b2:	b930      	cbnz	r0, 80092c2 <_svfiprintf_r+0x32>
 80092b4:	230c      	movs	r3, #12
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	b01d      	add	sp, #116	@ 0x74
 80092be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c2:	2340      	movs	r3, #64	@ 0x40
 80092c4:	616b      	str	r3, [r5, #20]
 80092c6:	2300      	movs	r3, #0
 80092c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ca:	2320      	movs	r3, #32
 80092cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80092d4:	2330      	movs	r3, #48	@ 0x30
 80092d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009474 <_svfiprintf_r+0x1e4>
 80092da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092de:	f04f 0901 	mov.w	r9, #1
 80092e2:	4623      	mov	r3, r4
 80092e4:	469a      	mov	sl, r3
 80092e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092ea:	b10a      	cbz	r2, 80092f0 <_svfiprintf_r+0x60>
 80092ec:	2a25      	cmp	r2, #37	@ 0x25
 80092ee:	d1f9      	bne.n	80092e4 <_svfiprintf_r+0x54>
 80092f0:	ebba 0b04 	subs.w	fp, sl, r4
 80092f4:	d00b      	beq.n	800930e <_svfiprintf_r+0x7e>
 80092f6:	465b      	mov	r3, fp
 80092f8:	4622      	mov	r2, r4
 80092fa:	4629      	mov	r1, r5
 80092fc:	4638      	mov	r0, r7
 80092fe:	f7ff ff6b 	bl	80091d8 <__ssputs_r>
 8009302:	3001      	adds	r0, #1
 8009304:	f000 80a7 	beq.w	8009456 <_svfiprintf_r+0x1c6>
 8009308:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800930a:	445a      	add	r2, fp
 800930c:	9209      	str	r2, [sp, #36]	@ 0x24
 800930e:	f89a 3000 	ldrb.w	r3, [sl]
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 809f 	beq.w	8009456 <_svfiprintf_r+0x1c6>
 8009318:	2300      	movs	r3, #0
 800931a:	f04f 32ff 	mov.w	r2, #4294967295
 800931e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009322:	f10a 0a01 	add.w	sl, sl, #1
 8009326:	9304      	str	r3, [sp, #16]
 8009328:	9307      	str	r3, [sp, #28]
 800932a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800932e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009330:	4654      	mov	r4, sl
 8009332:	2205      	movs	r2, #5
 8009334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009338:	484e      	ldr	r0, [pc, #312]	@ (8009474 <_svfiprintf_r+0x1e4>)
 800933a:	f7f6 ff81 	bl	8000240 <memchr>
 800933e:	9a04      	ldr	r2, [sp, #16]
 8009340:	b9d8      	cbnz	r0, 800937a <_svfiprintf_r+0xea>
 8009342:	06d0      	lsls	r0, r2, #27
 8009344:	bf44      	itt	mi
 8009346:	2320      	movmi	r3, #32
 8009348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800934c:	0711      	lsls	r1, r2, #28
 800934e:	bf44      	itt	mi
 8009350:	232b      	movmi	r3, #43	@ 0x2b
 8009352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009356:	f89a 3000 	ldrb.w	r3, [sl]
 800935a:	2b2a      	cmp	r3, #42	@ 0x2a
 800935c:	d015      	beq.n	800938a <_svfiprintf_r+0xfa>
 800935e:	9a07      	ldr	r2, [sp, #28]
 8009360:	4654      	mov	r4, sl
 8009362:	2000      	movs	r0, #0
 8009364:	f04f 0c0a 	mov.w	ip, #10
 8009368:	4621      	mov	r1, r4
 800936a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800936e:	3b30      	subs	r3, #48	@ 0x30
 8009370:	2b09      	cmp	r3, #9
 8009372:	d94b      	bls.n	800940c <_svfiprintf_r+0x17c>
 8009374:	b1b0      	cbz	r0, 80093a4 <_svfiprintf_r+0x114>
 8009376:	9207      	str	r2, [sp, #28]
 8009378:	e014      	b.n	80093a4 <_svfiprintf_r+0x114>
 800937a:	eba0 0308 	sub.w	r3, r0, r8
 800937e:	fa09 f303 	lsl.w	r3, r9, r3
 8009382:	4313      	orrs	r3, r2
 8009384:	9304      	str	r3, [sp, #16]
 8009386:	46a2      	mov	sl, r4
 8009388:	e7d2      	b.n	8009330 <_svfiprintf_r+0xa0>
 800938a:	9b03      	ldr	r3, [sp, #12]
 800938c:	1d19      	adds	r1, r3, #4
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	9103      	str	r1, [sp, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	bfbb      	ittet	lt
 8009396:	425b      	neglt	r3, r3
 8009398:	f042 0202 	orrlt.w	r2, r2, #2
 800939c:	9307      	strge	r3, [sp, #28]
 800939e:	9307      	strlt	r3, [sp, #28]
 80093a0:	bfb8      	it	lt
 80093a2:	9204      	strlt	r2, [sp, #16]
 80093a4:	7823      	ldrb	r3, [r4, #0]
 80093a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80093a8:	d10a      	bne.n	80093c0 <_svfiprintf_r+0x130>
 80093aa:	7863      	ldrb	r3, [r4, #1]
 80093ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80093ae:	d132      	bne.n	8009416 <_svfiprintf_r+0x186>
 80093b0:	9b03      	ldr	r3, [sp, #12]
 80093b2:	1d1a      	adds	r2, r3, #4
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	9203      	str	r2, [sp, #12]
 80093b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093bc:	3402      	adds	r4, #2
 80093be:	9305      	str	r3, [sp, #20]
 80093c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009484 <_svfiprintf_r+0x1f4>
 80093c4:	7821      	ldrb	r1, [r4, #0]
 80093c6:	2203      	movs	r2, #3
 80093c8:	4650      	mov	r0, sl
 80093ca:	f7f6 ff39 	bl	8000240 <memchr>
 80093ce:	b138      	cbz	r0, 80093e0 <_svfiprintf_r+0x150>
 80093d0:	9b04      	ldr	r3, [sp, #16]
 80093d2:	eba0 000a 	sub.w	r0, r0, sl
 80093d6:	2240      	movs	r2, #64	@ 0x40
 80093d8:	4082      	lsls	r2, r0
 80093da:	4313      	orrs	r3, r2
 80093dc:	3401      	adds	r4, #1
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093e4:	4824      	ldr	r0, [pc, #144]	@ (8009478 <_svfiprintf_r+0x1e8>)
 80093e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093ea:	2206      	movs	r2, #6
 80093ec:	f7f6 ff28 	bl	8000240 <memchr>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d036      	beq.n	8009462 <_svfiprintf_r+0x1d2>
 80093f4:	4b21      	ldr	r3, [pc, #132]	@ (800947c <_svfiprintf_r+0x1ec>)
 80093f6:	bb1b      	cbnz	r3, 8009440 <_svfiprintf_r+0x1b0>
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	3307      	adds	r3, #7
 80093fc:	f023 0307 	bic.w	r3, r3, #7
 8009400:	3308      	adds	r3, #8
 8009402:	9303      	str	r3, [sp, #12]
 8009404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009406:	4433      	add	r3, r6
 8009408:	9309      	str	r3, [sp, #36]	@ 0x24
 800940a:	e76a      	b.n	80092e2 <_svfiprintf_r+0x52>
 800940c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009410:	460c      	mov	r4, r1
 8009412:	2001      	movs	r0, #1
 8009414:	e7a8      	b.n	8009368 <_svfiprintf_r+0xd8>
 8009416:	2300      	movs	r3, #0
 8009418:	3401      	adds	r4, #1
 800941a:	9305      	str	r3, [sp, #20]
 800941c:	4619      	mov	r1, r3
 800941e:	f04f 0c0a 	mov.w	ip, #10
 8009422:	4620      	mov	r0, r4
 8009424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009428:	3a30      	subs	r2, #48	@ 0x30
 800942a:	2a09      	cmp	r2, #9
 800942c:	d903      	bls.n	8009436 <_svfiprintf_r+0x1a6>
 800942e:	2b00      	cmp	r3, #0
 8009430:	d0c6      	beq.n	80093c0 <_svfiprintf_r+0x130>
 8009432:	9105      	str	r1, [sp, #20]
 8009434:	e7c4      	b.n	80093c0 <_svfiprintf_r+0x130>
 8009436:	fb0c 2101 	mla	r1, ip, r1, r2
 800943a:	4604      	mov	r4, r0
 800943c:	2301      	movs	r3, #1
 800943e:	e7f0      	b.n	8009422 <_svfiprintf_r+0x192>
 8009440:	ab03      	add	r3, sp, #12
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	462a      	mov	r2, r5
 8009446:	4b0e      	ldr	r3, [pc, #56]	@ (8009480 <_svfiprintf_r+0x1f0>)
 8009448:	a904      	add	r1, sp, #16
 800944a:	4638      	mov	r0, r7
 800944c:	f3af 8000 	nop.w
 8009450:	1c42      	adds	r2, r0, #1
 8009452:	4606      	mov	r6, r0
 8009454:	d1d6      	bne.n	8009404 <_svfiprintf_r+0x174>
 8009456:	89ab      	ldrh	r3, [r5, #12]
 8009458:	065b      	lsls	r3, r3, #25
 800945a:	f53f af2d 	bmi.w	80092b8 <_svfiprintf_r+0x28>
 800945e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009460:	e72c      	b.n	80092bc <_svfiprintf_r+0x2c>
 8009462:	ab03      	add	r3, sp, #12
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	462a      	mov	r2, r5
 8009468:	4b05      	ldr	r3, [pc, #20]	@ (8009480 <_svfiprintf_r+0x1f0>)
 800946a:	a904      	add	r1, sp, #16
 800946c:	4638      	mov	r0, r7
 800946e:	f000 f879 	bl	8009564 <_printf_i>
 8009472:	e7ed      	b.n	8009450 <_svfiprintf_r+0x1c0>
 8009474:	0800b27b 	.word	0x0800b27b
 8009478:	0800b285 	.word	0x0800b285
 800947c:	00000000 	.word	0x00000000
 8009480:	080091d9 	.word	0x080091d9
 8009484:	0800b281 	.word	0x0800b281

08009488 <_printf_common>:
 8009488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800948c:	4616      	mov	r6, r2
 800948e:	4698      	mov	r8, r3
 8009490:	688a      	ldr	r2, [r1, #8]
 8009492:	690b      	ldr	r3, [r1, #16]
 8009494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009498:	4293      	cmp	r3, r2
 800949a:	bfb8      	it	lt
 800949c:	4613      	movlt	r3, r2
 800949e:	6033      	str	r3, [r6, #0]
 80094a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80094a4:	4607      	mov	r7, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	b10a      	cbz	r2, 80094ae <_printf_common+0x26>
 80094aa:	3301      	adds	r3, #1
 80094ac:	6033      	str	r3, [r6, #0]
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	0699      	lsls	r1, r3, #26
 80094b2:	bf42      	ittt	mi
 80094b4:	6833      	ldrmi	r3, [r6, #0]
 80094b6:	3302      	addmi	r3, #2
 80094b8:	6033      	strmi	r3, [r6, #0]
 80094ba:	6825      	ldr	r5, [r4, #0]
 80094bc:	f015 0506 	ands.w	r5, r5, #6
 80094c0:	d106      	bne.n	80094d0 <_printf_common+0x48>
 80094c2:	f104 0a19 	add.w	sl, r4, #25
 80094c6:	68e3      	ldr	r3, [r4, #12]
 80094c8:	6832      	ldr	r2, [r6, #0]
 80094ca:	1a9b      	subs	r3, r3, r2
 80094cc:	42ab      	cmp	r3, r5
 80094ce:	dc26      	bgt.n	800951e <_printf_common+0x96>
 80094d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80094d4:	6822      	ldr	r2, [r4, #0]
 80094d6:	3b00      	subs	r3, #0
 80094d8:	bf18      	it	ne
 80094da:	2301      	movne	r3, #1
 80094dc:	0692      	lsls	r2, r2, #26
 80094de:	d42b      	bmi.n	8009538 <_printf_common+0xb0>
 80094e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80094e4:	4641      	mov	r1, r8
 80094e6:	4638      	mov	r0, r7
 80094e8:	47c8      	blx	r9
 80094ea:	3001      	adds	r0, #1
 80094ec:	d01e      	beq.n	800952c <_printf_common+0xa4>
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	6922      	ldr	r2, [r4, #16]
 80094f2:	f003 0306 	and.w	r3, r3, #6
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	bf02      	ittt	eq
 80094fa:	68e5      	ldreq	r5, [r4, #12]
 80094fc:	6833      	ldreq	r3, [r6, #0]
 80094fe:	1aed      	subeq	r5, r5, r3
 8009500:	68a3      	ldr	r3, [r4, #8]
 8009502:	bf0c      	ite	eq
 8009504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009508:	2500      	movne	r5, #0
 800950a:	4293      	cmp	r3, r2
 800950c:	bfc4      	itt	gt
 800950e:	1a9b      	subgt	r3, r3, r2
 8009510:	18ed      	addgt	r5, r5, r3
 8009512:	2600      	movs	r6, #0
 8009514:	341a      	adds	r4, #26
 8009516:	42b5      	cmp	r5, r6
 8009518:	d11a      	bne.n	8009550 <_printf_common+0xc8>
 800951a:	2000      	movs	r0, #0
 800951c:	e008      	b.n	8009530 <_printf_common+0xa8>
 800951e:	2301      	movs	r3, #1
 8009520:	4652      	mov	r2, sl
 8009522:	4641      	mov	r1, r8
 8009524:	4638      	mov	r0, r7
 8009526:	47c8      	blx	r9
 8009528:	3001      	adds	r0, #1
 800952a:	d103      	bne.n	8009534 <_printf_common+0xac>
 800952c:	f04f 30ff 	mov.w	r0, #4294967295
 8009530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009534:	3501      	adds	r5, #1
 8009536:	e7c6      	b.n	80094c6 <_printf_common+0x3e>
 8009538:	18e1      	adds	r1, r4, r3
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	2030      	movs	r0, #48	@ 0x30
 800953e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009542:	4422      	add	r2, r4
 8009544:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009548:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800954c:	3302      	adds	r3, #2
 800954e:	e7c7      	b.n	80094e0 <_printf_common+0x58>
 8009550:	2301      	movs	r3, #1
 8009552:	4622      	mov	r2, r4
 8009554:	4641      	mov	r1, r8
 8009556:	4638      	mov	r0, r7
 8009558:	47c8      	blx	r9
 800955a:	3001      	adds	r0, #1
 800955c:	d0e6      	beq.n	800952c <_printf_common+0xa4>
 800955e:	3601      	adds	r6, #1
 8009560:	e7d9      	b.n	8009516 <_printf_common+0x8e>
	...

08009564 <_printf_i>:
 8009564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	7e0f      	ldrb	r7, [r1, #24]
 800956a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800956c:	2f78      	cmp	r7, #120	@ 0x78
 800956e:	4691      	mov	r9, r2
 8009570:	4680      	mov	r8, r0
 8009572:	460c      	mov	r4, r1
 8009574:	469a      	mov	sl, r3
 8009576:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800957a:	d807      	bhi.n	800958c <_printf_i+0x28>
 800957c:	2f62      	cmp	r7, #98	@ 0x62
 800957e:	d80a      	bhi.n	8009596 <_printf_i+0x32>
 8009580:	2f00      	cmp	r7, #0
 8009582:	f000 80d2 	beq.w	800972a <_printf_i+0x1c6>
 8009586:	2f58      	cmp	r7, #88	@ 0x58
 8009588:	f000 80b9 	beq.w	80096fe <_printf_i+0x19a>
 800958c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009590:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009594:	e03a      	b.n	800960c <_printf_i+0xa8>
 8009596:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800959a:	2b15      	cmp	r3, #21
 800959c:	d8f6      	bhi.n	800958c <_printf_i+0x28>
 800959e:	a101      	add	r1, pc, #4	@ (adr r1, 80095a4 <_printf_i+0x40>)
 80095a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095a4:	080095fd 	.word	0x080095fd
 80095a8:	08009611 	.word	0x08009611
 80095ac:	0800958d 	.word	0x0800958d
 80095b0:	0800958d 	.word	0x0800958d
 80095b4:	0800958d 	.word	0x0800958d
 80095b8:	0800958d 	.word	0x0800958d
 80095bc:	08009611 	.word	0x08009611
 80095c0:	0800958d 	.word	0x0800958d
 80095c4:	0800958d 	.word	0x0800958d
 80095c8:	0800958d 	.word	0x0800958d
 80095cc:	0800958d 	.word	0x0800958d
 80095d0:	08009711 	.word	0x08009711
 80095d4:	0800963b 	.word	0x0800963b
 80095d8:	080096cb 	.word	0x080096cb
 80095dc:	0800958d 	.word	0x0800958d
 80095e0:	0800958d 	.word	0x0800958d
 80095e4:	08009733 	.word	0x08009733
 80095e8:	0800958d 	.word	0x0800958d
 80095ec:	0800963b 	.word	0x0800963b
 80095f0:	0800958d 	.word	0x0800958d
 80095f4:	0800958d 	.word	0x0800958d
 80095f8:	080096d3 	.word	0x080096d3
 80095fc:	6833      	ldr	r3, [r6, #0]
 80095fe:	1d1a      	adds	r2, r3, #4
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6032      	str	r2, [r6, #0]
 8009604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009608:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800960c:	2301      	movs	r3, #1
 800960e:	e09d      	b.n	800974c <_printf_i+0x1e8>
 8009610:	6833      	ldr	r3, [r6, #0]
 8009612:	6820      	ldr	r0, [r4, #0]
 8009614:	1d19      	adds	r1, r3, #4
 8009616:	6031      	str	r1, [r6, #0]
 8009618:	0606      	lsls	r6, r0, #24
 800961a:	d501      	bpl.n	8009620 <_printf_i+0xbc>
 800961c:	681d      	ldr	r5, [r3, #0]
 800961e:	e003      	b.n	8009628 <_printf_i+0xc4>
 8009620:	0645      	lsls	r5, r0, #25
 8009622:	d5fb      	bpl.n	800961c <_printf_i+0xb8>
 8009624:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009628:	2d00      	cmp	r5, #0
 800962a:	da03      	bge.n	8009634 <_printf_i+0xd0>
 800962c:	232d      	movs	r3, #45	@ 0x2d
 800962e:	426d      	negs	r5, r5
 8009630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009634:	4859      	ldr	r0, [pc, #356]	@ (800979c <_printf_i+0x238>)
 8009636:	230a      	movs	r3, #10
 8009638:	e011      	b.n	800965e <_printf_i+0xfa>
 800963a:	6821      	ldr	r1, [r4, #0]
 800963c:	6833      	ldr	r3, [r6, #0]
 800963e:	0608      	lsls	r0, r1, #24
 8009640:	f853 5b04 	ldr.w	r5, [r3], #4
 8009644:	d402      	bmi.n	800964c <_printf_i+0xe8>
 8009646:	0649      	lsls	r1, r1, #25
 8009648:	bf48      	it	mi
 800964a:	b2ad      	uxthmi	r5, r5
 800964c:	2f6f      	cmp	r7, #111	@ 0x6f
 800964e:	4853      	ldr	r0, [pc, #332]	@ (800979c <_printf_i+0x238>)
 8009650:	6033      	str	r3, [r6, #0]
 8009652:	bf14      	ite	ne
 8009654:	230a      	movne	r3, #10
 8009656:	2308      	moveq	r3, #8
 8009658:	2100      	movs	r1, #0
 800965a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800965e:	6866      	ldr	r6, [r4, #4]
 8009660:	60a6      	str	r6, [r4, #8]
 8009662:	2e00      	cmp	r6, #0
 8009664:	bfa2      	ittt	ge
 8009666:	6821      	ldrge	r1, [r4, #0]
 8009668:	f021 0104 	bicge.w	r1, r1, #4
 800966c:	6021      	strge	r1, [r4, #0]
 800966e:	b90d      	cbnz	r5, 8009674 <_printf_i+0x110>
 8009670:	2e00      	cmp	r6, #0
 8009672:	d04b      	beq.n	800970c <_printf_i+0x1a8>
 8009674:	4616      	mov	r6, r2
 8009676:	fbb5 f1f3 	udiv	r1, r5, r3
 800967a:	fb03 5711 	mls	r7, r3, r1, r5
 800967e:	5dc7      	ldrb	r7, [r0, r7]
 8009680:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009684:	462f      	mov	r7, r5
 8009686:	42bb      	cmp	r3, r7
 8009688:	460d      	mov	r5, r1
 800968a:	d9f4      	bls.n	8009676 <_printf_i+0x112>
 800968c:	2b08      	cmp	r3, #8
 800968e:	d10b      	bne.n	80096a8 <_printf_i+0x144>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	07df      	lsls	r7, r3, #31
 8009694:	d508      	bpl.n	80096a8 <_printf_i+0x144>
 8009696:	6923      	ldr	r3, [r4, #16]
 8009698:	6861      	ldr	r1, [r4, #4]
 800969a:	4299      	cmp	r1, r3
 800969c:	bfde      	ittt	le
 800969e:	2330      	movle	r3, #48	@ 0x30
 80096a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80096a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096a8:	1b92      	subs	r2, r2, r6
 80096aa:	6122      	str	r2, [r4, #16]
 80096ac:	f8cd a000 	str.w	sl, [sp]
 80096b0:	464b      	mov	r3, r9
 80096b2:	aa03      	add	r2, sp, #12
 80096b4:	4621      	mov	r1, r4
 80096b6:	4640      	mov	r0, r8
 80096b8:	f7ff fee6 	bl	8009488 <_printf_common>
 80096bc:	3001      	adds	r0, #1
 80096be:	d14a      	bne.n	8009756 <_printf_i+0x1f2>
 80096c0:	f04f 30ff 	mov.w	r0, #4294967295
 80096c4:	b004      	add	sp, #16
 80096c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	f043 0320 	orr.w	r3, r3, #32
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	4833      	ldr	r0, [pc, #204]	@ (80097a0 <_printf_i+0x23c>)
 80096d4:	2778      	movs	r7, #120	@ 0x78
 80096d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	6831      	ldr	r1, [r6, #0]
 80096de:	061f      	lsls	r7, r3, #24
 80096e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80096e4:	d402      	bmi.n	80096ec <_printf_i+0x188>
 80096e6:	065f      	lsls	r7, r3, #25
 80096e8:	bf48      	it	mi
 80096ea:	b2ad      	uxthmi	r5, r5
 80096ec:	6031      	str	r1, [r6, #0]
 80096ee:	07d9      	lsls	r1, r3, #31
 80096f0:	bf44      	itt	mi
 80096f2:	f043 0320 	orrmi.w	r3, r3, #32
 80096f6:	6023      	strmi	r3, [r4, #0]
 80096f8:	b11d      	cbz	r5, 8009702 <_printf_i+0x19e>
 80096fa:	2310      	movs	r3, #16
 80096fc:	e7ac      	b.n	8009658 <_printf_i+0xf4>
 80096fe:	4827      	ldr	r0, [pc, #156]	@ (800979c <_printf_i+0x238>)
 8009700:	e7e9      	b.n	80096d6 <_printf_i+0x172>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	f023 0320 	bic.w	r3, r3, #32
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	e7f6      	b.n	80096fa <_printf_i+0x196>
 800970c:	4616      	mov	r6, r2
 800970e:	e7bd      	b.n	800968c <_printf_i+0x128>
 8009710:	6833      	ldr	r3, [r6, #0]
 8009712:	6825      	ldr	r5, [r4, #0]
 8009714:	6961      	ldr	r1, [r4, #20]
 8009716:	1d18      	adds	r0, r3, #4
 8009718:	6030      	str	r0, [r6, #0]
 800971a:	062e      	lsls	r6, r5, #24
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	d501      	bpl.n	8009724 <_printf_i+0x1c0>
 8009720:	6019      	str	r1, [r3, #0]
 8009722:	e002      	b.n	800972a <_printf_i+0x1c6>
 8009724:	0668      	lsls	r0, r5, #25
 8009726:	d5fb      	bpl.n	8009720 <_printf_i+0x1bc>
 8009728:	8019      	strh	r1, [r3, #0]
 800972a:	2300      	movs	r3, #0
 800972c:	6123      	str	r3, [r4, #16]
 800972e:	4616      	mov	r6, r2
 8009730:	e7bc      	b.n	80096ac <_printf_i+0x148>
 8009732:	6833      	ldr	r3, [r6, #0]
 8009734:	1d1a      	adds	r2, r3, #4
 8009736:	6032      	str	r2, [r6, #0]
 8009738:	681e      	ldr	r6, [r3, #0]
 800973a:	6862      	ldr	r2, [r4, #4]
 800973c:	2100      	movs	r1, #0
 800973e:	4630      	mov	r0, r6
 8009740:	f7f6 fd7e 	bl	8000240 <memchr>
 8009744:	b108      	cbz	r0, 800974a <_printf_i+0x1e6>
 8009746:	1b80      	subs	r0, r0, r6
 8009748:	6060      	str	r0, [r4, #4]
 800974a:	6863      	ldr	r3, [r4, #4]
 800974c:	6123      	str	r3, [r4, #16]
 800974e:	2300      	movs	r3, #0
 8009750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009754:	e7aa      	b.n	80096ac <_printf_i+0x148>
 8009756:	6923      	ldr	r3, [r4, #16]
 8009758:	4632      	mov	r2, r6
 800975a:	4649      	mov	r1, r9
 800975c:	4640      	mov	r0, r8
 800975e:	47d0      	blx	sl
 8009760:	3001      	adds	r0, #1
 8009762:	d0ad      	beq.n	80096c0 <_printf_i+0x15c>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	079b      	lsls	r3, r3, #30
 8009768:	d413      	bmi.n	8009792 <_printf_i+0x22e>
 800976a:	68e0      	ldr	r0, [r4, #12]
 800976c:	9b03      	ldr	r3, [sp, #12]
 800976e:	4298      	cmp	r0, r3
 8009770:	bfb8      	it	lt
 8009772:	4618      	movlt	r0, r3
 8009774:	e7a6      	b.n	80096c4 <_printf_i+0x160>
 8009776:	2301      	movs	r3, #1
 8009778:	4632      	mov	r2, r6
 800977a:	4649      	mov	r1, r9
 800977c:	4640      	mov	r0, r8
 800977e:	47d0      	blx	sl
 8009780:	3001      	adds	r0, #1
 8009782:	d09d      	beq.n	80096c0 <_printf_i+0x15c>
 8009784:	3501      	adds	r5, #1
 8009786:	68e3      	ldr	r3, [r4, #12]
 8009788:	9903      	ldr	r1, [sp, #12]
 800978a:	1a5b      	subs	r3, r3, r1
 800978c:	42ab      	cmp	r3, r5
 800978e:	dcf2      	bgt.n	8009776 <_printf_i+0x212>
 8009790:	e7eb      	b.n	800976a <_printf_i+0x206>
 8009792:	2500      	movs	r5, #0
 8009794:	f104 0619 	add.w	r6, r4, #25
 8009798:	e7f5      	b.n	8009786 <_printf_i+0x222>
 800979a:	bf00      	nop
 800979c:	0800b28c 	.word	0x0800b28c
 80097a0:	0800b29d 	.word	0x0800b29d

080097a4 <__sflush_r>:
 80097a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ac:	0716      	lsls	r6, r2, #28
 80097ae:	4605      	mov	r5, r0
 80097b0:	460c      	mov	r4, r1
 80097b2:	d454      	bmi.n	800985e <__sflush_r+0xba>
 80097b4:	684b      	ldr	r3, [r1, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	dc02      	bgt.n	80097c0 <__sflush_r+0x1c>
 80097ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80097bc:	2b00      	cmp	r3, #0
 80097be:	dd48      	ble.n	8009852 <__sflush_r+0xae>
 80097c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097c2:	2e00      	cmp	r6, #0
 80097c4:	d045      	beq.n	8009852 <__sflush_r+0xae>
 80097c6:	2300      	movs	r3, #0
 80097c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097cc:	682f      	ldr	r7, [r5, #0]
 80097ce:	6a21      	ldr	r1, [r4, #32]
 80097d0:	602b      	str	r3, [r5, #0]
 80097d2:	d030      	beq.n	8009836 <__sflush_r+0x92>
 80097d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	0759      	lsls	r1, r3, #29
 80097da:	d505      	bpl.n	80097e8 <__sflush_r+0x44>
 80097dc:	6863      	ldr	r3, [r4, #4]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097e2:	b10b      	cbz	r3, 80097e8 <__sflush_r+0x44>
 80097e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097e6:	1ad2      	subs	r2, r2, r3
 80097e8:	2300      	movs	r3, #0
 80097ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097ec:	6a21      	ldr	r1, [r4, #32]
 80097ee:	4628      	mov	r0, r5
 80097f0:	47b0      	blx	r6
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	d106      	bne.n	8009806 <__sflush_r+0x62>
 80097f8:	6829      	ldr	r1, [r5, #0]
 80097fa:	291d      	cmp	r1, #29
 80097fc:	d82b      	bhi.n	8009856 <__sflush_r+0xb2>
 80097fe:	4a2a      	ldr	r2, [pc, #168]	@ (80098a8 <__sflush_r+0x104>)
 8009800:	410a      	asrs	r2, r1
 8009802:	07d6      	lsls	r6, r2, #31
 8009804:	d427      	bmi.n	8009856 <__sflush_r+0xb2>
 8009806:	2200      	movs	r2, #0
 8009808:	6062      	str	r2, [r4, #4]
 800980a:	04d9      	lsls	r1, r3, #19
 800980c:	6922      	ldr	r2, [r4, #16]
 800980e:	6022      	str	r2, [r4, #0]
 8009810:	d504      	bpl.n	800981c <__sflush_r+0x78>
 8009812:	1c42      	adds	r2, r0, #1
 8009814:	d101      	bne.n	800981a <__sflush_r+0x76>
 8009816:	682b      	ldr	r3, [r5, #0]
 8009818:	b903      	cbnz	r3, 800981c <__sflush_r+0x78>
 800981a:	6560      	str	r0, [r4, #84]	@ 0x54
 800981c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800981e:	602f      	str	r7, [r5, #0]
 8009820:	b1b9      	cbz	r1, 8009852 <__sflush_r+0xae>
 8009822:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009826:	4299      	cmp	r1, r3
 8009828:	d002      	beq.n	8009830 <__sflush_r+0x8c>
 800982a:	4628      	mov	r0, r5
 800982c:	f7ff fb0e 	bl	8008e4c <_free_r>
 8009830:	2300      	movs	r3, #0
 8009832:	6363      	str	r3, [r4, #52]	@ 0x34
 8009834:	e00d      	b.n	8009852 <__sflush_r+0xae>
 8009836:	2301      	movs	r3, #1
 8009838:	4628      	mov	r0, r5
 800983a:	47b0      	blx	r6
 800983c:	4602      	mov	r2, r0
 800983e:	1c50      	adds	r0, r2, #1
 8009840:	d1c9      	bne.n	80097d6 <__sflush_r+0x32>
 8009842:	682b      	ldr	r3, [r5, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d0c6      	beq.n	80097d6 <__sflush_r+0x32>
 8009848:	2b1d      	cmp	r3, #29
 800984a:	d001      	beq.n	8009850 <__sflush_r+0xac>
 800984c:	2b16      	cmp	r3, #22
 800984e:	d11e      	bne.n	800988e <__sflush_r+0xea>
 8009850:	602f      	str	r7, [r5, #0]
 8009852:	2000      	movs	r0, #0
 8009854:	e022      	b.n	800989c <__sflush_r+0xf8>
 8009856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800985a:	b21b      	sxth	r3, r3
 800985c:	e01b      	b.n	8009896 <__sflush_r+0xf2>
 800985e:	690f      	ldr	r7, [r1, #16]
 8009860:	2f00      	cmp	r7, #0
 8009862:	d0f6      	beq.n	8009852 <__sflush_r+0xae>
 8009864:	0793      	lsls	r3, r2, #30
 8009866:	680e      	ldr	r6, [r1, #0]
 8009868:	bf08      	it	eq
 800986a:	694b      	ldreq	r3, [r1, #20]
 800986c:	600f      	str	r7, [r1, #0]
 800986e:	bf18      	it	ne
 8009870:	2300      	movne	r3, #0
 8009872:	eba6 0807 	sub.w	r8, r6, r7
 8009876:	608b      	str	r3, [r1, #8]
 8009878:	f1b8 0f00 	cmp.w	r8, #0
 800987c:	dde9      	ble.n	8009852 <__sflush_r+0xae>
 800987e:	6a21      	ldr	r1, [r4, #32]
 8009880:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009882:	4643      	mov	r3, r8
 8009884:	463a      	mov	r2, r7
 8009886:	4628      	mov	r0, r5
 8009888:	47b0      	blx	r6
 800988a:	2800      	cmp	r0, #0
 800988c:	dc08      	bgt.n	80098a0 <__sflush_r+0xfc>
 800988e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009896:	81a3      	strh	r3, [r4, #12]
 8009898:	f04f 30ff 	mov.w	r0, #4294967295
 800989c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a0:	4407      	add	r7, r0
 80098a2:	eba8 0800 	sub.w	r8, r8, r0
 80098a6:	e7e7      	b.n	8009878 <__sflush_r+0xd4>
 80098a8:	dfbffffe 	.word	0xdfbffffe

080098ac <_fflush_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	690b      	ldr	r3, [r1, #16]
 80098b0:	4605      	mov	r5, r0
 80098b2:	460c      	mov	r4, r1
 80098b4:	b913      	cbnz	r3, 80098bc <_fflush_r+0x10>
 80098b6:	2500      	movs	r5, #0
 80098b8:	4628      	mov	r0, r5
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
 80098bc:	b118      	cbz	r0, 80098c6 <_fflush_r+0x1a>
 80098be:	6a03      	ldr	r3, [r0, #32]
 80098c0:	b90b      	cbnz	r3, 80098c6 <_fflush_r+0x1a>
 80098c2:	f7fe fd37 	bl	8008334 <__sinit>
 80098c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d0f3      	beq.n	80098b6 <_fflush_r+0xa>
 80098ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098d0:	07d0      	lsls	r0, r2, #31
 80098d2:	d404      	bmi.n	80098de <_fflush_r+0x32>
 80098d4:	0599      	lsls	r1, r3, #22
 80098d6:	d402      	bmi.n	80098de <_fflush_r+0x32>
 80098d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098da:	f7ff fa8d 	bl	8008df8 <__retarget_lock_acquire_recursive>
 80098de:	4628      	mov	r0, r5
 80098e0:	4621      	mov	r1, r4
 80098e2:	f7ff ff5f 	bl	80097a4 <__sflush_r>
 80098e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098e8:	07da      	lsls	r2, r3, #31
 80098ea:	4605      	mov	r5, r0
 80098ec:	d4e4      	bmi.n	80098b8 <_fflush_r+0xc>
 80098ee:	89a3      	ldrh	r3, [r4, #12]
 80098f0:	059b      	lsls	r3, r3, #22
 80098f2:	d4e1      	bmi.n	80098b8 <_fflush_r+0xc>
 80098f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098f6:	f7ff fa81 	bl	8008dfc <__retarget_lock_release_recursive>
 80098fa:	e7dd      	b.n	80098b8 <_fflush_r+0xc>

080098fc <fiprintf>:
 80098fc:	b40e      	push	{r1, r2, r3}
 80098fe:	b503      	push	{r0, r1, lr}
 8009900:	4601      	mov	r1, r0
 8009902:	ab03      	add	r3, sp, #12
 8009904:	4805      	ldr	r0, [pc, #20]	@ (800991c <fiprintf+0x20>)
 8009906:	f853 2b04 	ldr.w	r2, [r3], #4
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	f000 fb5d 	bl	8009fcc <_vfiprintf_r>
 8009912:	b002      	add	sp, #8
 8009914:	f85d eb04 	ldr.w	lr, [sp], #4
 8009918:	b003      	add	sp, #12
 800991a:	4770      	bx	lr
 800991c:	2000003c 	.word	0x2000003c

08009920 <siscanf>:
 8009920:	b40e      	push	{r1, r2, r3}
 8009922:	b530      	push	{r4, r5, lr}
 8009924:	b09c      	sub	sp, #112	@ 0x70
 8009926:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009928:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800992c:	f854 5b04 	ldr.w	r5, [r4], #4
 8009930:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009934:	9002      	str	r0, [sp, #8]
 8009936:	9006      	str	r0, [sp, #24]
 8009938:	f7f6 fc74 	bl	8000224 <strlen>
 800993c:	4b0b      	ldr	r3, [pc, #44]	@ (800996c <siscanf+0x4c>)
 800993e:	9003      	str	r0, [sp, #12]
 8009940:	9007      	str	r0, [sp, #28]
 8009942:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009944:	480a      	ldr	r0, [pc, #40]	@ (8009970 <siscanf+0x50>)
 8009946:	9401      	str	r4, [sp, #4]
 8009948:	2300      	movs	r3, #0
 800994a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800994c:	9314      	str	r3, [sp, #80]	@ 0x50
 800994e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009952:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009956:	462a      	mov	r2, r5
 8009958:	4623      	mov	r3, r4
 800995a:	a902      	add	r1, sp, #8
 800995c:	6800      	ldr	r0, [r0, #0]
 800995e:	f000 f997 	bl	8009c90 <__ssvfiscanf_r>
 8009962:	b01c      	add	sp, #112	@ 0x70
 8009964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009968:	b003      	add	sp, #12
 800996a:	4770      	bx	lr
 800996c:	0800846b 	.word	0x0800846b
 8009970:	2000003c 	.word	0x2000003c

08009974 <memmove>:
 8009974:	4288      	cmp	r0, r1
 8009976:	b510      	push	{r4, lr}
 8009978:	eb01 0402 	add.w	r4, r1, r2
 800997c:	d902      	bls.n	8009984 <memmove+0x10>
 800997e:	4284      	cmp	r4, r0
 8009980:	4623      	mov	r3, r4
 8009982:	d807      	bhi.n	8009994 <memmove+0x20>
 8009984:	1e43      	subs	r3, r0, #1
 8009986:	42a1      	cmp	r1, r4
 8009988:	d008      	beq.n	800999c <memmove+0x28>
 800998a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800998e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009992:	e7f8      	b.n	8009986 <memmove+0x12>
 8009994:	4402      	add	r2, r0
 8009996:	4601      	mov	r1, r0
 8009998:	428a      	cmp	r2, r1
 800999a:	d100      	bne.n	800999e <memmove+0x2a>
 800999c:	bd10      	pop	{r4, pc}
 800999e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099a6:	e7f7      	b.n	8009998 <memmove+0x24>

080099a8 <strncmp>:
 80099a8:	b510      	push	{r4, lr}
 80099aa:	b16a      	cbz	r2, 80099c8 <strncmp+0x20>
 80099ac:	3901      	subs	r1, #1
 80099ae:	1884      	adds	r4, r0, r2
 80099b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d103      	bne.n	80099c4 <strncmp+0x1c>
 80099bc:	42a0      	cmp	r0, r4
 80099be:	d001      	beq.n	80099c4 <strncmp+0x1c>
 80099c0:	2a00      	cmp	r2, #0
 80099c2:	d1f5      	bne.n	80099b0 <strncmp+0x8>
 80099c4:	1ad0      	subs	r0, r2, r3
 80099c6:	bd10      	pop	{r4, pc}
 80099c8:	4610      	mov	r0, r2
 80099ca:	e7fc      	b.n	80099c6 <strncmp+0x1e>

080099cc <__gettzinfo>:
 80099cc:	4800      	ldr	r0, [pc, #0]	@ (80099d0 <__gettzinfo+0x4>)
 80099ce:	4770      	bx	lr
 80099d0:	20000090 	.word	0x20000090

080099d4 <gmtime_r>:
 80099d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d8:	4a4d      	ldr	r2, [pc, #308]	@ (8009b10 <gmtime_r+0x13c>)
 80099da:	460c      	mov	r4, r1
 80099dc:	2300      	movs	r3, #0
 80099de:	e9d0 0100 	ldrd	r0, r1, [r0]
 80099e2:	f7f6 fc7d 	bl	80002e0 <__aeabi_ldivmod>
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	bfbc      	itt	lt
 80099ea:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 80099ee:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 80099f2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80099f6:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 80099fa:	fbb2 f3f1 	udiv	r3, r2, r1
 80099fe:	fb01 2213 	mls	r2, r1, r3, r2
 8009a02:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8009a06:	bfac      	ite	ge
 8009a08:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8009a0c:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 8009a10:	60a3      	str	r3, [r4, #8]
 8009a12:	fbb2 f3f1 	udiv	r3, r2, r1
 8009a16:	fb01 2213 	mls	r2, r1, r3, r2
 8009a1a:	6063      	str	r3, [r4, #4]
 8009a1c:	6022      	str	r2, [r4, #0]
 8009a1e:	1cc3      	adds	r3, r0, #3
 8009a20:	2207      	movs	r2, #7
 8009a22:	fb93 f2f2 	sdiv	r2, r3, r2
 8009a26:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009a2a:	1a9b      	subs	r3, r3, r2
 8009a2c:	bf48      	it	mi
 8009a2e:	3307      	addmi	r3, #7
 8009a30:	2800      	cmp	r0, #0
 8009a32:	61a3      	str	r3, [r4, #24]
 8009a34:	bfb8      	it	lt
 8009a36:	f5a0 330e 	sublt.w	r3, r0, #145408	@ 0x23800
 8009a3a:	4936      	ldr	r1, [pc, #216]	@ (8009b14 <gmtime_r+0x140>)
 8009a3c:	bfae      	itee	ge
 8009a3e:	fb90 f1f1 	sdivge	r1, r0, r1
 8009a42:	f5a3 732c 	sublt.w	r3, r3, #688	@ 0x2b0
 8009a46:	fb93 f1f1 	sdivlt	r1, r3, r1
 8009a4a:	4b33      	ldr	r3, [pc, #204]	@ (8009b18 <gmtime_r+0x144>)
 8009a4c:	fb03 0001 	mla	r0, r3, r1, r0
 8009a50:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8009a54:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a58:	4403      	add	r3, r0
 8009a5a:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8009a5e:	fbb0 f2fc 	udiv	r2, r0, ip
 8009a62:	1a9b      	subs	r3, r3, r2
 8009a64:	f240 176d 	movw	r7, #365	@ 0x16d
 8009a68:	4a2c      	ldr	r2, [pc, #176]	@ (8009b1c <gmtime_r+0x148>)
 8009a6a:	fbb0 f2f2 	udiv	r2, r0, r2
 8009a6e:	2664      	movs	r6, #100	@ 0x64
 8009a70:	1a9b      	subs	r3, r3, r2
 8009a72:	fbb3 f2f7 	udiv	r2, r3, r7
 8009a76:	fbb3 f3fc 	udiv	r3, r3, ip
 8009a7a:	fbb2 f5f6 	udiv	r5, r2, r6
 8009a7e:	1aeb      	subs	r3, r5, r3
 8009a80:	4403      	add	r3, r0
 8009a82:	fb07 3312 	mls	r3, r7, r2, r3
 8009a86:	2099      	movs	r0, #153	@ 0x99
 8009a88:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8009a8c:	3702      	adds	r7, #2
 8009a8e:	f103 0e01 	add.w	lr, r3, #1
 8009a92:	fbb7 fcf0 	udiv	ip, r7, r0
 8009a96:	fb00 f00c 	mul.w	r0, r0, ip
 8009a9a:	3002      	adds	r0, #2
 8009a9c:	f04f 0805 	mov.w	r8, #5
 8009aa0:	fbb0 f0f8 	udiv	r0, r0, r8
 8009aa4:	ebae 0000 	sub.w	r0, lr, r0
 8009aa8:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 8009aac:	4577      	cmp	r7, lr
 8009aae:	bf8c      	ite	hi
 8009ab0:	f06f 0709 	mvnhi.w	r7, #9
 8009ab4:	2702      	movls	r7, #2
 8009ab6:	4467      	add	r7, ip
 8009ab8:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 8009abc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ac0:	2f01      	cmp	r7, #1
 8009ac2:	bf98      	it	ls
 8009ac4:	3101      	addls	r1, #1
 8009ac6:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8009aca:	d30c      	bcc.n	8009ae6 <gmtime_r+0x112>
 8009acc:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8009ad0:	61e3      	str	r3, [r4, #28]
 8009ad2:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60e0      	str	r0, [r4, #12]
 8009ada:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8009ade:	6223      	str	r3, [r4, #32]
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae6:	f012 0f03 	tst.w	r2, #3
 8009aea:	d102      	bne.n	8009af2 <gmtime_r+0x11e>
 8009aec:	fb06 2515 	mls	r5, r6, r5, r2
 8009af0:	b95d      	cbnz	r5, 8009b0a <gmtime_r+0x136>
 8009af2:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8009af6:	fbb2 f6f5 	udiv	r6, r2, r5
 8009afa:	fb05 2216 	mls	r2, r5, r6, r2
 8009afe:	fab2 f282 	clz	r2, r2
 8009b02:	0952      	lsrs	r2, r2, #5
 8009b04:	333b      	adds	r3, #59	@ 0x3b
 8009b06:	4413      	add	r3, r2
 8009b08:	e7e2      	b.n	8009ad0 <gmtime_r+0xfc>
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	e7fa      	b.n	8009b04 <gmtime_r+0x130>
 8009b0e:	bf00      	nop
 8009b10:	00015180 	.word	0x00015180
 8009b14:	00023ab1 	.word	0x00023ab1
 8009b18:	fffdc54f 	.word	0xfffdc54f
 8009b1c:	00023ab0 	.word	0x00023ab0

08009b20 <_sbrk_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d06      	ldr	r5, [pc, #24]	@ (8009b3c <_sbrk_r+0x1c>)
 8009b24:	2300      	movs	r3, #0
 8009b26:	4604      	mov	r4, r0
 8009b28:	4608      	mov	r0, r1
 8009b2a:	602b      	str	r3, [r5, #0]
 8009b2c:	f7f7 fc02 	bl	8001334 <_sbrk>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_sbrk_r+0x1a>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_sbrk_r+0x1a>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20000b7c 	.word	0x20000b7c

08009b40 <memcpy>:
 8009b40:	440a      	add	r2, r1
 8009b42:	4291      	cmp	r1, r2
 8009b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b48:	d100      	bne.n	8009b4c <memcpy+0xc>
 8009b4a:	4770      	bx	lr
 8009b4c:	b510      	push	{r4, lr}
 8009b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b56:	4291      	cmp	r1, r2
 8009b58:	d1f9      	bne.n	8009b4e <memcpy+0xe>
 8009b5a:	bd10      	pop	{r4, pc}

08009b5c <abort>:
 8009b5c:	b508      	push	{r3, lr}
 8009b5e:	2006      	movs	r0, #6
 8009b60:	f000 fdca 	bl	800a6f8 <raise>
 8009b64:	2001      	movs	r0, #1
 8009b66:	f7f7 fb6d 	bl	8001244 <_exit>
	...

08009b6c <__env_lock>:
 8009b6c:	4801      	ldr	r0, [pc, #4]	@ (8009b74 <__env_lock+0x8>)
 8009b6e:	f7ff b943 	b.w	8008df8 <__retarget_lock_acquire_recursive>
 8009b72:	bf00      	nop
 8009b74:	20000b81 	.word	0x20000b81

08009b78 <__env_unlock>:
 8009b78:	4801      	ldr	r0, [pc, #4]	@ (8009b80 <__env_unlock+0x8>)
 8009b7a:	f7ff b93f 	b.w	8008dfc <__retarget_lock_release_recursive>
 8009b7e:	bf00      	nop
 8009b80:	20000b81 	.word	0x20000b81

08009b84 <_realloc_r>:
 8009b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b88:	4680      	mov	r8, r0
 8009b8a:	4615      	mov	r5, r2
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	b921      	cbnz	r1, 8009b9a <_realloc_r+0x16>
 8009b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b94:	4611      	mov	r1, r2
 8009b96:	f7ff ba19 	b.w	8008fcc <_malloc_r>
 8009b9a:	b92a      	cbnz	r2, 8009ba8 <_realloc_r+0x24>
 8009b9c:	f7ff f956 	bl	8008e4c <_free_r>
 8009ba0:	2400      	movs	r4, #0
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba8:	f000 fdc2 	bl	800a730 <_malloc_usable_size_r>
 8009bac:	4285      	cmp	r5, r0
 8009bae:	4606      	mov	r6, r0
 8009bb0:	d802      	bhi.n	8009bb8 <_realloc_r+0x34>
 8009bb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009bb6:	d8f4      	bhi.n	8009ba2 <_realloc_r+0x1e>
 8009bb8:	4629      	mov	r1, r5
 8009bba:	4640      	mov	r0, r8
 8009bbc:	f7ff fa06 	bl	8008fcc <_malloc_r>
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	2800      	cmp	r0, #0
 8009bc4:	d0ec      	beq.n	8009ba0 <_realloc_r+0x1c>
 8009bc6:	42b5      	cmp	r5, r6
 8009bc8:	462a      	mov	r2, r5
 8009bca:	4621      	mov	r1, r4
 8009bcc:	bf28      	it	cs
 8009bce:	4632      	movcs	r2, r6
 8009bd0:	f7ff ffb6 	bl	8009b40 <memcpy>
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	f7ff f938 	bl	8008e4c <_free_r>
 8009bdc:	463c      	mov	r4, r7
 8009bde:	e7e0      	b.n	8009ba2 <_realloc_r+0x1e>

08009be0 <_sungetc_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	1c4b      	adds	r3, r1, #1
 8009be4:	4614      	mov	r4, r2
 8009be6:	d103      	bne.n	8009bf0 <_sungetc_r+0x10>
 8009be8:	f04f 35ff 	mov.w	r5, #4294967295
 8009bec:	4628      	mov	r0, r5
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	8993      	ldrh	r3, [r2, #12]
 8009bf2:	f023 0320 	bic.w	r3, r3, #32
 8009bf6:	8193      	strh	r3, [r2, #12]
 8009bf8:	6853      	ldr	r3, [r2, #4]
 8009bfa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009bfc:	b2cd      	uxtb	r5, r1
 8009bfe:	b18a      	cbz	r2, 8009c24 <_sungetc_r+0x44>
 8009c00:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009c02:	429a      	cmp	r2, r3
 8009c04:	dd08      	ble.n	8009c18 <_sungetc_r+0x38>
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	1e5a      	subs	r2, r3, #1
 8009c0a:	6022      	str	r2, [r4, #0]
 8009c0c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009c10:	6863      	ldr	r3, [r4, #4]
 8009c12:	3301      	adds	r3, #1
 8009c14:	6063      	str	r3, [r4, #4]
 8009c16:	e7e9      	b.n	8009bec <_sungetc_r+0xc>
 8009c18:	4621      	mov	r1, r4
 8009c1a:	f000 fc76 	bl	800a50a <__submore>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d0f1      	beq.n	8009c06 <_sungetc_r+0x26>
 8009c22:	e7e1      	b.n	8009be8 <_sungetc_r+0x8>
 8009c24:	6921      	ldr	r1, [r4, #16]
 8009c26:	6822      	ldr	r2, [r4, #0]
 8009c28:	b141      	cbz	r1, 8009c3c <_sungetc_r+0x5c>
 8009c2a:	4291      	cmp	r1, r2
 8009c2c:	d206      	bcs.n	8009c3c <_sungetc_r+0x5c>
 8009c2e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009c32:	42a9      	cmp	r1, r5
 8009c34:	d102      	bne.n	8009c3c <_sungetc_r+0x5c>
 8009c36:	3a01      	subs	r2, #1
 8009c38:	6022      	str	r2, [r4, #0]
 8009c3a:	e7ea      	b.n	8009c12 <_sungetc_r+0x32>
 8009c3c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009c40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c44:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c46:	2303      	movs	r3, #3
 8009c48:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009c4a:	4623      	mov	r3, r4
 8009c4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	2301      	movs	r3, #1
 8009c54:	e7de      	b.n	8009c14 <_sungetc_r+0x34>

08009c56 <__ssrefill_r>:
 8009c56:	b510      	push	{r4, lr}
 8009c58:	460c      	mov	r4, r1
 8009c5a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009c5c:	b169      	cbz	r1, 8009c7a <__ssrefill_r+0x24>
 8009c5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c62:	4299      	cmp	r1, r3
 8009c64:	d001      	beq.n	8009c6a <__ssrefill_r+0x14>
 8009c66:	f7ff f8f1 	bl	8008e4c <_free_r>
 8009c6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c6c:	6063      	str	r3, [r4, #4]
 8009c6e:	2000      	movs	r0, #0
 8009c70:	6360      	str	r0, [r4, #52]	@ 0x34
 8009c72:	b113      	cbz	r3, 8009c7a <__ssrefill_r+0x24>
 8009c74:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009c76:	6023      	str	r3, [r4, #0]
 8009c78:	bd10      	pop	{r4, pc}
 8009c7a:	6923      	ldr	r3, [r4, #16]
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	6063      	str	r3, [r4, #4]
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	f043 0320 	orr.w	r3, r3, #32
 8009c88:	81a3      	strh	r3, [r4, #12]
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8e:	e7f3      	b.n	8009c78 <__ssrefill_r+0x22>

08009c90 <__ssvfiscanf_r>:
 8009c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c94:	460c      	mov	r4, r1
 8009c96:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009ca0:	49a5      	ldr	r1, [pc, #660]	@ (8009f38 <__ssvfiscanf_r+0x2a8>)
 8009ca2:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009ca4:	f10d 0804 	add.w	r8, sp, #4
 8009ca8:	49a4      	ldr	r1, [pc, #656]	@ (8009f3c <__ssvfiscanf_r+0x2ac>)
 8009caa:	4fa5      	ldr	r7, [pc, #660]	@ (8009f40 <__ssvfiscanf_r+0x2b0>)
 8009cac:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	7813      	ldrb	r3, [r2, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 8158 	beq.w	8009f6e <__ssvfiscanf_r+0x2de>
 8009cbe:	5cf9      	ldrb	r1, [r7, r3]
 8009cc0:	f011 0108 	ands.w	r1, r1, #8
 8009cc4:	f102 0501 	add.w	r5, r2, #1
 8009cc8:	d019      	beq.n	8009cfe <__ssvfiscanf_r+0x6e>
 8009cca:	6863      	ldr	r3, [r4, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	dd0f      	ble.n	8009cf0 <__ssvfiscanf_r+0x60>
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	781a      	ldrb	r2, [r3, #0]
 8009cd4:	5cba      	ldrb	r2, [r7, r2]
 8009cd6:	0712      	lsls	r2, r2, #28
 8009cd8:	d401      	bmi.n	8009cde <__ssvfiscanf_r+0x4e>
 8009cda:	462a      	mov	r2, r5
 8009cdc:	e7eb      	b.n	8009cb6 <__ssvfiscanf_r+0x26>
 8009cde:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009ce0:	3201      	adds	r2, #1
 8009ce2:	9245      	str	r2, [sp, #276]	@ 0x114
 8009ce4:	6862      	ldr	r2, [r4, #4]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	3a01      	subs	r2, #1
 8009cea:	6062      	str	r2, [r4, #4]
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	e7ec      	b.n	8009cca <__ssvfiscanf_r+0x3a>
 8009cf0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	4798      	blx	r3
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d0e9      	beq.n	8009cd0 <__ssvfiscanf_r+0x40>
 8009cfc:	e7ed      	b.n	8009cda <__ssvfiscanf_r+0x4a>
 8009cfe:	2b25      	cmp	r3, #37	@ 0x25
 8009d00:	d012      	beq.n	8009d28 <__ssvfiscanf_r+0x98>
 8009d02:	4699      	mov	r9, r3
 8009d04:	6863      	ldr	r3, [r4, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f340 8093 	ble.w	8009e32 <__ssvfiscanf_r+0x1a2>
 8009d0c:	6822      	ldr	r2, [r4, #0]
 8009d0e:	7813      	ldrb	r3, [r2, #0]
 8009d10:	454b      	cmp	r3, r9
 8009d12:	f040 812c 	bne.w	8009f6e <__ssvfiscanf_r+0x2de>
 8009d16:	6863      	ldr	r3, [r4, #4]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	6063      	str	r3, [r4, #4]
 8009d1c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009d1e:	3201      	adds	r2, #1
 8009d20:	3301      	adds	r3, #1
 8009d22:	6022      	str	r2, [r4, #0]
 8009d24:	9345      	str	r3, [sp, #276]	@ 0x114
 8009d26:	e7d8      	b.n	8009cda <__ssvfiscanf_r+0x4a>
 8009d28:	9141      	str	r1, [sp, #260]	@ 0x104
 8009d2a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009d2c:	7853      	ldrb	r3, [r2, #1]
 8009d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d30:	bf02      	ittt	eq
 8009d32:	2310      	moveq	r3, #16
 8009d34:	1c95      	addeq	r5, r2, #2
 8009d36:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009d38:	220a      	movs	r2, #10
 8009d3a:	46a9      	mov	r9, r5
 8009d3c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009d40:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009d44:	2b09      	cmp	r3, #9
 8009d46:	d91e      	bls.n	8009d86 <__ssvfiscanf_r+0xf6>
 8009d48:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009f44 <__ssvfiscanf_r+0x2b4>
 8009d4c:	2203      	movs	r2, #3
 8009d4e:	4650      	mov	r0, sl
 8009d50:	f7f6 fa76 	bl	8000240 <memchr>
 8009d54:	b138      	cbz	r0, 8009d66 <__ssvfiscanf_r+0xd6>
 8009d56:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009d58:	eba0 000a 	sub.w	r0, r0, sl
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	4083      	lsls	r3, r0
 8009d60:	4313      	orrs	r3, r2
 8009d62:	9341      	str	r3, [sp, #260]	@ 0x104
 8009d64:	464d      	mov	r5, r9
 8009d66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d6a:	2b78      	cmp	r3, #120	@ 0x78
 8009d6c:	d806      	bhi.n	8009d7c <__ssvfiscanf_r+0xec>
 8009d6e:	2b57      	cmp	r3, #87	@ 0x57
 8009d70:	d810      	bhi.n	8009d94 <__ssvfiscanf_r+0x104>
 8009d72:	2b25      	cmp	r3, #37	@ 0x25
 8009d74:	d0c5      	beq.n	8009d02 <__ssvfiscanf_r+0x72>
 8009d76:	d857      	bhi.n	8009e28 <__ssvfiscanf_r+0x198>
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d065      	beq.n	8009e48 <__ssvfiscanf_r+0x1b8>
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009d80:	230a      	movs	r3, #10
 8009d82:	9342      	str	r3, [sp, #264]	@ 0x108
 8009d84:	e078      	b.n	8009e78 <__ssvfiscanf_r+0x1e8>
 8009d86:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009d88:	fb02 1103 	mla	r1, r2, r3, r1
 8009d8c:	3930      	subs	r1, #48	@ 0x30
 8009d8e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009d90:	464d      	mov	r5, r9
 8009d92:	e7d2      	b.n	8009d3a <__ssvfiscanf_r+0xaa>
 8009d94:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009d98:	2a20      	cmp	r2, #32
 8009d9a:	d8ef      	bhi.n	8009d7c <__ssvfiscanf_r+0xec>
 8009d9c:	a101      	add	r1, pc, #4	@ (adr r1, 8009da4 <__ssvfiscanf_r+0x114>)
 8009d9e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009da2:	bf00      	nop
 8009da4:	08009e57 	.word	0x08009e57
 8009da8:	08009d7d 	.word	0x08009d7d
 8009dac:	08009d7d 	.word	0x08009d7d
 8009db0:	08009eb1 	.word	0x08009eb1
 8009db4:	08009d7d 	.word	0x08009d7d
 8009db8:	08009d7d 	.word	0x08009d7d
 8009dbc:	08009d7d 	.word	0x08009d7d
 8009dc0:	08009d7d 	.word	0x08009d7d
 8009dc4:	08009d7d 	.word	0x08009d7d
 8009dc8:	08009d7d 	.word	0x08009d7d
 8009dcc:	08009d7d 	.word	0x08009d7d
 8009dd0:	08009ec7 	.word	0x08009ec7
 8009dd4:	08009ead 	.word	0x08009ead
 8009dd8:	08009e2f 	.word	0x08009e2f
 8009ddc:	08009e2f 	.word	0x08009e2f
 8009de0:	08009e2f 	.word	0x08009e2f
 8009de4:	08009d7d 	.word	0x08009d7d
 8009de8:	08009e69 	.word	0x08009e69
 8009dec:	08009d7d 	.word	0x08009d7d
 8009df0:	08009d7d 	.word	0x08009d7d
 8009df4:	08009d7d 	.word	0x08009d7d
 8009df8:	08009d7d 	.word	0x08009d7d
 8009dfc:	08009ed7 	.word	0x08009ed7
 8009e00:	08009e71 	.word	0x08009e71
 8009e04:	08009e4f 	.word	0x08009e4f
 8009e08:	08009d7d 	.word	0x08009d7d
 8009e0c:	08009d7d 	.word	0x08009d7d
 8009e10:	08009ed3 	.word	0x08009ed3
 8009e14:	08009d7d 	.word	0x08009d7d
 8009e18:	08009ead 	.word	0x08009ead
 8009e1c:	08009d7d 	.word	0x08009d7d
 8009e20:	08009d7d 	.word	0x08009d7d
 8009e24:	08009e57 	.word	0x08009e57
 8009e28:	3b45      	subs	r3, #69	@ 0x45
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d8a6      	bhi.n	8009d7c <__ssvfiscanf_r+0xec>
 8009e2e:	2305      	movs	r3, #5
 8009e30:	e021      	b.n	8009e76 <__ssvfiscanf_r+0x1e6>
 8009e32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009e34:	4621      	mov	r1, r4
 8009e36:	4630      	mov	r0, r6
 8009e38:	4798      	blx	r3
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	f43f af66 	beq.w	8009d0c <__ssvfiscanf_r+0x7c>
 8009e40:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009e42:	2800      	cmp	r0, #0
 8009e44:	f040 808b 	bne.w	8009f5e <__ssvfiscanf_r+0x2ce>
 8009e48:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4c:	e08b      	b.n	8009f66 <__ssvfiscanf_r+0x2d6>
 8009e4e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009e50:	f042 0220 	orr.w	r2, r2, #32
 8009e54:	9241      	str	r2, [sp, #260]	@ 0x104
 8009e56:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e5c:	9241      	str	r2, [sp, #260]	@ 0x104
 8009e5e:	2210      	movs	r2, #16
 8009e60:	2b6e      	cmp	r3, #110	@ 0x6e
 8009e62:	9242      	str	r2, [sp, #264]	@ 0x108
 8009e64:	d902      	bls.n	8009e6c <__ssvfiscanf_r+0x1dc>
 8009e66:	e005      	b.n	8009e74 <__ssvfiscanf_r+0x1e4>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	9342      	str	r3, [sp, #264]	@ 0x108
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e002      	b.n	8009e76 <__ssvfiscanf_r+0x1e6>
 8009e70:	2308      	movs	r3, #8
 8009e72:	9342      	str	r3, [sp, #264]	@ 0x108
 8009e74:	2304      	movs	r3, #4
 8009e76:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009e78:	6863      	ldr	r3, [r4, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dd39      	ble.n	8009ef2 <__ssvfiscanf_r+0x262>
 8009e7e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009e80:	0659      	lsls	r1, r3, #25
 8009e82:	d404      	bmi.n	8009e8e <__ssvfiscanf_r+0x1fe>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	781a      	ldrb	r2, [r3, #0]
 8009e88:	5cba      	ldrb	r2, [r7, r2]
 8009e8a:	0712      	lsls	r2, r2, #28
 8009e8c:	d438      	bmi.n	8009f00 <__ssvfiscanf_r+0x270>
 8009e8e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	dc47      	bgt.n	8009f24 <__ssvfiscanf_r+0x294>
 8009e94:	466b      	mov	r3, sp
 8009e96:	4622      	mov	r2, r4
 8009e98:	a941      	add	r1, sp, #260	@ 0x104
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f000 f9ae 	bl	800a1fc <_scanf_chars>
 8009ea0:	2801      	cmp	r0, #1
 8009ea2:	d064      	beq.n	8009f6e <__ssvfiscanf_r+0x2de>
 8009ea4:	2802      	cmp	r0, #2
 8009ea6:	f47f af18 	bne.w	8009cda <__ssvfiscanf_r+0x4a>
 8009eaa:	e7c9      	b.n	8009e40 <__ssvfiscanf_r+0x1b0>
 8009eac:	220a      	movs	r2, #10
 8009eae:	e7d7      	b.n	8009e60 <__ssvfiscanf_r+0x1d0>
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	4640      	mov	r0, r8
 8009eb4:	f000 faf0 	bl	800a498 <__sccl>
 8009eb8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ebe:	9341      	str	r3, [sp, #260]	@ 0x104
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e7d7      	b.n	8009e76 <__ssvfiscanf_r+0x1e6>
 8009ec6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ecc:	9341      	str	r3, [sp, #260]	@ 0x104
 8009ece:	2300      	movs	r3, #0
 8009ed0:	e7d1      	b.n	8009e76 <__ssvfiscanf_r+0x1e6>
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e7cf      	b.n	8009e76 <__ssvfiscanf_r+0x1e6>
 8009ed6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009ed8:	06c3      	lsls	r3, r0, #27
 8009eda:	f53f aefe 	bmi.w	8009cda <__ssvfiscanf_r+0x4a>
 8009ede:	9b00      	ldr	r3, [sp, #0]
 8009ee0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009ee2:	1d19      	adds	r1, r3, #4
 8009ee4:	9100      	str	r1, [sp, #0]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	07c0      	lsls	r0, r0, #31
 8009eea:	bf4c      	ite	mi
 8009eec:	801a      	strhmi	r2, [r3, #0]
 8009eee:	601a      	strpl	r2, [r3, #0]
 8009ef0:	e6f3      	b.n	8009cda <__ssvfiscanf_r+0x4a>
 8009ef2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	4798      	blx	r3
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d0bf      	beq.n	8009e7e <__ssvfiscanf_r+0x1ee>
 8009efe:	e79f      	b.n	8009e40 <__ssvfiscanf_r+0x1b0>
 8009f00:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009f02:	3201      	adds	r2, #1
 8009f04:	9245      	str	r2, [sp, #276]	@ 0x114
 8009f06:	6862      	ldr	r2, [r4, #4]
 8009f08:	3a01      	subs	r2, #1
 8009f0a:	2a00      	cmp	r2, #0
 8009f0c:	6062      	str	r2, [r4, #4]
 8009f0e:	dd02      	ble.n	8009f16 <__ssvfiscanf_r+0x286>
 8009f10:	3301      	adds	r3, #1
 8009f12:	6023      	str	r3, [r4, #0]
 8009f14:	e7b6      	b.n	8009e84 <__ssvfiscanf_r+0x1f4>
 8009f16:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009f18:	4621      	mov	r1, r4
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	4798      	blx	r3
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d0b0      	beq.n	8009e84 <__ssvfiscanf_r+0x1f4>
 8009f22:	e78d      	b.n	8009e40 <__ssvfiscanf_r+0x1b0>
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	dc0f      	bgt.n	8009f48 <__ssvfiscanf_r+0x2b8>
 8009f28:	466b      	mov	r3, sp
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	a941      	add	r1, sp, #260	@ 0x104
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f000 f9be 	bl	800a2b0 <_scanf_i>
 8009f34:	e7b4      	b.n	8009ea0 <__ssvfiscanf_r+0x210>
 8009f36:	bf00      	nop
 8009f38:	08009be1 	.word	0x08009be1
 8009f3c:	08009c57 	.word	0x08009c57
 8009f40:	0800b17b 	.word	0x0800b17b
 8009f44:	0800b281 	.word	0x0800b281
 8009f48:	4b0a      	ldr	r3, [pc, #40]	@ (8009f74 <__ssvfiscanf_r+0x2e4>)
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f43f aec5 	beq.w	8009cda <__ssvfiscanf_r+0x4a>
 8009f50:	466b      	mov	r3, sp
 8009f52:	4622      	mov	r2, r4
 8009f54:	a941      	add	r1, sp, #260	@ 0x104
 8009f56:	4630      	mov	r0, r6
 8009f58:	f3af 8000 	nop.w
 8009f5c:	e7a0      	b.n	8009ea0 <__ssvfiscanf_r+0x210>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	065b      	lsls	r3, r3, #25
 8009f62:	f53f af71 	bmi.w	8009e48 <__ssvfiscanf_r+0x1b8>
 8009f66:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f6e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009f70:	e7f9      	b.n	8009f66 <__ssvfiscanf_r+0x2d6>
 8009f72:	bf00      	nop
 8009f74:	00000000 	.word	0x00000000

08009f78 <__sfputc_r>:
 8009f78:	6893      	ldr	r3, [r2, #8]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	b410      	push	{r4}
 8009f80:	6093      	str	r3, [r2, #8]
 8009f82:	da08      	bge.n	8009f96 <__sfputc_r+0x1e>
 8009f84:	6994      	ldr	r4, [r2, #24]
 8009f86:	42a3      	cmp	r3, r4
 8009f88:	db01      	blt.n	8009f8e <__sfputc_r+0x16>
 8009f8a:	290a      	cmp	r1, #10
 8009f8c:	d103      	bne.n	8009f96 <__sfputc_r+0x1e>
 8009f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f92:	f000 baf4 	b.w	800a57e <__swbuf_r>
 8009f96:	6813      	ldr	r3, [r2, #0]
 8009f98:	1c58      	adds	r0, r3, #1
 8009f9a:	6010      	str	r0, [r2, #0]
 8009f9c:	7019      	strb	r1, [r3, #0]
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <__sfputs_r>:
 8009fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa8:	4606      	mov	r6, r0
 8009faa:	460f      	mov	r7, r1
 8009fac:	4614      	mov	r4, r2
 8009fae:	18d5      	adds	r5, r2, r3
 8009fb0:	42ac      	cmp	r4, r5
 8009fb2:	d101      	bne.n	8009fb8 <__sfputs_r+0x12>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	e007      	b.n	8009fc8 <__sfputs_r+0x22>
 8009fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fbc:	463a      	mov	r2, r7
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f7ff ffda 	bl	8009f78 <__sfputc_r>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d1f3      	bne.n	8009fb0 <__sfputs_r+0xa>
 8009fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fcc <_vfiprintf_r>:
 8009fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	b09d      	sub	sp, #116	@ 0x74
 8009fd4:	4614      	mov	r4, r2
 8009fd6:	4698      	mov	r8, r3
 8009fd8:	4606      	mov	r6, r0
 8009fda:	b118      	cbz	r0, 8009fe4 <_vfiprintf_r+0x18>
 8009fdc:	6a03      	ldr	r3, [r0, #32]
 8009fde:	b90b      	cbnz	r3, 8009fe4 <_vfiprintf_r+0x18>
 8009fe0:	f7fe f9a8 	bl	8008334 <__sinit>
 8009fe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fe6:	07d9      	lsls	r1, r3, #31
 8009fe8:	d405      	bmi.n	8009ff6 <_vfiprintf_r+0x2a>
 8009fea:	89ab      	ldrh	r3, [r5, #12]
 8009fec:	059a      	lsls	r2, r3, #22
 8009fee:	d402      	bmi.n	8009ff6 <_vfiprintf_r+0x2a>
 8009ff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ff2:	f7fe ff01 	bl	8008df8 <__retarget_lock_acquire_recursive>
 8009ff6:	89ab      	ldrh	r3, [r5, #12]
 8009ff8:	071b      	lsls	r3, r3, #28
 8009ffa:	d501      	bpl.n	800a000 <_vfiprintf_r+0x34>
 8009ffc:	692b      	ldr	r3, [r5, #16]
 8009ffe:	b99b      	cbnz	r3, 800a028 <_vfiprintf_r+0x5c>
 800a000:	4629      	mov	r1, r5
 800a002:	4630      	mov	r0, r6
 800a004:	f000 fafa 	bl	800a5fc <__swsetup_r>
 800a008:	b170      	cbz	r0, 800a028 <_vfiprintf_r+0x5c>
 800a00a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a00c:	07dc      	lsls	r4, r3, #31
 800a00e:	d504      	bpl.n	800a01a <_vfiprintf_r+0x4e>
 800a010:	f04f 30ff 	mov.w	r0, #4294967295
 800a014:	b01d      	add	sp, #116	@ 0x74
 800a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01a:	89ab      	ldrh	r3, [r5, #12]
 800a01c:	0598      	lsls	r0, r3, #22
 800a01e:	d4f7      	bmi.n	800a010 <_vfiprintf_r+0x44>
 800a020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a022:	f7fe feeb 	bl	8008dfc <__retarget_lock_release_recursive>
 800a026:	e7f3      	b.n	800a010 <_vfiprintf_r+0x44>
 800a028:	2300      	movs	r3, #0
 800a02a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a02c:	2320      	movs	r3, #32
 800a02e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a032:	f8cd 800c 	str.w	r8, [sp, #12]
 800a036:	2330      	movs	r3, #48	@ 0x30
 800a038:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a1e8 <_vfiprintf_r+0x21c>
 800a03c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a040:	f04f 0901 	mov.w	r9, #1
 800a044:	4623      	mov	r3, r4
 800a046:	469a      	mov	sl, r3
 800a048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a04c:	b10a      	cbz	r2, 800a052 <_vfiprintf_r+0x86>
 800a04e:	2a25      	cmp	r2, #37	@ 0x25
 800a050:	d1f9      	bne.n	800a046 <_vfiprintf_r+0x7a>
 800a052:	ebba 0b04 	subs.w	fp, sl, r4
 800a056:	d00b      	beq.n	800a070 <_vfiprintf_r+0xa4>
 800a058:	465b      	mov	r3, fp
 800a05a:	4622      	mov	r2, r4
 800a05c:	4629      	mov	r1, r5
 800a05e:	4630      	mov	r0, r6
 800a060:	f7ff ffa1 	bl	8009fa6 <__sfputs_r>
 800a064:	3001      	adds	r0, #1
 800a066:	f000 80a7 	beq.w	800a1b8 <_vfiprintf_r+0x1ec>
 800a06a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a06c:	445a      	add	r2, fp
 800a06e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a070:	f89a 3000 	ldrb.w	r3, [sl]
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 809f 	beq.w	800a1b8 <_vfiprintf_r+0x1ec>
 800a07a:	2300      	movs	r3, #0
 800a07c:	f04f 32ff 	mov.w	r2, #4294967295
 800a080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a084:	f10a 0a01 	add.w	sl, sl, #1
 800a088:	9304      	str	r3, [sp, #16]
 800a08a:	9307      	str	r3, [sp, #28]
 800a08c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a090:	931a      	str	r3, [sp, #104]	@ 0x68
 800a092:	4654      	mov	r4, sl
 800a094:	2205      	movs	r2, #5
 800a096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a09a:	4853      	ldr	r0, [pc, #332]	@ (800a1e8 <_vfiprintf_r+0x21c>)
 800a09c:	f7f6 f8d0 	bl	8000240 <memchr>
 800a0a0:	9a04      	ldr	r2, [sp, #16]
 800a0a2:	b9d8      	cbnz	r0, 800a0dc <_vfiprintf_r+0x110>
 800a0a4:	06d1      	lsls	r1, r2, #27
 800a0a6:	bf44      	itt	mi
 800a0a8:	2320      	movmi	r3, #32
 800a0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0ae:	0713      	lsls	r3, r2, #28
 800a0b0:	bf44      	itt	mi
 800a0b2:	232b      	movmi	r3, #43	@ 0x2b
 800a0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0be:	d015      	beq.n	800a0ec <_vfiprintf_r+0x120>
 800a0c0:	9a07      	ldr	r2, [sp, #28]
 800a0c2:	4654      	mov	r4, sl
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	f04f 0c0a 	mov.w	ip, #10
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0d0:	3b30      	subs	r3, #48	@ 0x30
 800a0d2:	2b09      	cmp	r3, #9
 800a0d4:	d94b      	bls.n	800a16e <_vfiprintf_r+0x1a2>
 800a0d6:	b1b0      	cbz	r0, 800a106 <_vfiprintf_r+0x13a>
 800a0d8:	9207      	str	r2, [sp, #28]
 800a0da:	e014      	b.n	800a106 <_vfiprintf_r+0x13a>
 800a0dc:	eba0 0308 	sub.w	r3, r0, r8
 800a0e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	9304      	str	r3, [sp, #16]
 800a0e8:	46a2      	mov	sl, r4
 800a0ea:	e7d2      	b.n	800a092 <_vfiprintf_r+0xc6>
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	1d19      	adds	r1, r3, #4
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	9103      	str	r1, [sp, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	bfbb      	ittet	lt
 800a0f8:	425b      	neglt	r3, r3
 800a0fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a0fe:	9307      	strge	r3, [sp, #28]
 800a100:	9307      	strlt	r3, [sp, #28]
 800a102:	bfb8      	it	lt
 800a104:	9204      	strlt	r2, [sp, #16]
 800a106:	7823      	ldrb	r3, [r4, #0]
 800a108:	2b2e      	cmp	r3, #46	@ 0x2e
 800a10a:	d10a      	bne.n	800a122 <_vfiprintf_r+0x156>
 800a10c:	7863      	ldrb	r3, [r4, #1]
 800a10e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a110:	d132      	bne.n	800a178 <_vfiprintf_r+0x1ac>
 800a112:	9b03      	ldr	r3, [sp, #12]
 800a114:	1d1a      	adds	r2, r3, #4
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	9203      	str	r2, [sp, #12]
 800a11a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a11e:	3402      	adds	r4, #2
 800a120:	9305      	str	r3, [sp, #20]
 800a122:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a1f8 <_vfiprintf_r+0x22c>
 800a126:	7821      	ldrb	r1, [r4, #0]
 800a128:	2203      	movs	r2, #3
 800a12a:	4650      	mov	r0, sl
 800a12c:	f7f6 f888 	bl	8000240 <memchr>
 800a130:	b138      	cbz	r0, 800a142 <_vfiprintf_r+0x176>
 800a132:	9b04      	ldr	r3, [sp, #16]
 800a134:	eba0 000a 	sub.w	r0, r0, sl
 800a138:	2240      	movs	r2, #64	@ 0x40
 800a13a:	4082      	lsls	r2, r0
 800a13c:	4313      	orrs	r3, r2
 800a13e:	3401      	adds	r4, #1
 800a140:	9304      	str	r3, [sp, #16]
 800a142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a146:	4829      	ldr	r0, [pc, #164]	@ (800a1ec <_vfiprintf_r+0x220>)
 800a148:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a14c:	2206      	movs	r2, #6
 800a14e:	f7f6 f877 	bl	8000240 <memchr>
 800a152:	2800      	cmp	r0, #0
 800a154:	d03f      	beq.n	800a1d6 <_vfiprintf_r+0x20a>
 800a156:	4b26      	ldr	r3, [pc, #152]	@ (800a1f0 <_vfiprintf_r+0x224>)
 800a158:	bb1b      	cbnz	r3, 800a1a2 <_vfiprintf_r+0x1d6>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	3307      	adds	r3, #7
 800a15e:	f023 0307 	bic.w	r3, r3, #7
 800a162:	3308      	adds	r3, #8
 800a164:	9303      	str	r3, [sp, #12]
 800a166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a168:	443b      	add	r3, r7
 800a16a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a16c:	e76a      	b.n	800a044 <_vfiprintf_r+0x78>
 800a16e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a172:	460c      	mov	r4, r1
 800a174:	2001      	movs	r0, #1
 800a176:	e7a8      	b.n	800a0ca <_vfiprintf_r+0xfe>
 800a178:	2300      	movs	r3, #0
 800a17a:	3401      	adds	r4, #1
 800a17c:	9305      	str	r3, [sp, #20]
 800a17e:	4619      	mov	r1, r3
 800a180:	f04f 0c0a 	mov.w	ip, #10
 800a184:	4620      	mov	r0, r4
 800a186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a18a:	3a30      	subs	r2, #48	@ 0x30
 800a18c:	2a09      	cmp	r2, #9
 800a18e:	d903      	bls.n	800a198 <_vfiprintf_r+0x1cc>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0c6      	beq.n	800a122 <_vfiprintf_r+0x156>
 800a194:	9105      	str	r1, [sp, #20]
 800a196:	e7c4      	b.n	800a122 <_vfiprintf_r+0x156>
 800a198:	fb0c 2101 	mla	r1, ip, r1, r2
 800a19c:	4604      	mov	r4, r0
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e7f0      	b.n	800a184 <_vfiprintf_r+0x1b8>
 800a1a2:	ab03      	add	r3, sp, #12
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4b12      	ldr	r3, [pc, #72]	@ (800a1f4 <_vfiprintf_r+0x228>)
 800a1aa:	a904      	add	r1, sp, #16
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f3af 8000 	nop.w
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	1c78      	adds	r0, r7, #1
 800a1b6:	d1d6      	bne.n	800a166 <_vfiprintf_r+0x19a>
 800a1b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1ba:	07d9      	lsls	r1, r3, #31
 800a1bc:	d405      	bmi.n	800a1ca <_vfiprintf_r+0x1fe>
 800a1be:	89ab      	ldrh	r3, [r5, #12]
 800a1c0:	059a      	lsls	r2, r3, #22
 800a1c2:	d402      	bmi.n	800a1ca <_vfiprintf_r+0x1fe>
 800a1c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1c6:	f7fe fe19 	bl	8008dfc <__retarget_lock_release_recursive>
 800a1ca:	89ab      	ldrh	r3, [r5, #12]
 800a1cc:	065b      	lsls	r3, r3, #25
 800a1ce:	f53f af1f 	bmi.w	800a010 <_vfiprintf_r+0x44>
 800a1d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1d4:	e71e      	b.n	800a014 <_vfiprintf_r+0x48>
 800a1d6:	ab03      	add	r3, sp, #12
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	462a      	mov	r2, r5
 800a1dc:	4b05      	ldr	r3, [pc, #20]	@ (800a1f4 <_vfiprintf_r+0x228>)
 800a1de:	a904      	add	r1, sp, #16
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f7ff f9bf 	bl	8009564 <_printf_i>
 800a1e6:	e7e4      	b.n	800a1b2 <_vfiprintf_r+0x1e6>
 800a1e8:	0800b27b 	.word	0x0800b27b
 800a1ec:	0800b285 	.word	0x0800b285
 800a1f0:	00000000 	.word	0x00000000
 800a1f4:	08009fa7 	.word	0x08009fa7
 800a1f8:	0800b281 	.word	0x0800b281

0800a1fc <_scanf_chars>:
 800a1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a200:	4615      	mov	r5, r2
 800a202:	688a      	ldr	r2, [r1, #8]
 800a204:	4680      	mov	r8, r0
 800a206:	460c      	mov	r4, r1
 800a208:	b932      	cbnz	r2, 800a218 <_scanf_chars+0x1c>
 800a20a:	698a      	ldr	r2, [r1, #24]
 800a20c:	2a00      	cmp	r2, #0
 800a20e:	bf14      	ite	ne
 800a210:	f04f 32ff 	movne.w	r2, #4294967295
 800a214:	2201      	moveq	r2, #1
 800a216:	608a      	str	r2, [r1, #8]
 800a218:	6822      	ldr	r2, [r4, #0]
 800a21a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a2ac <_scanf_chars+0xb0>
 800a21e:	06d1      	lsls	r1, r2, #27
 800a220:	bf5f      	itttt	pl
 800a222:	681a      	ldrpl	r2, [r3, #0]
 800a224:	1d11      	addpl	r1, r2, #4
 800a226:	6019      	strpl	r1, [r3, #0]
 800a228:	6816      	ldrpl	r6, [r2, #0]
 800a22a:	2700      	movs	r7, #0
 800a22c:	69a0      	ldr	r0, [r4, #24]
 800a22e:	b188      	cbz	r0, 800a254 <_scanf_chars+0x58>
 800a230:	2801      	cmp	r0, #1
 800a232:	d107      	bne.n	800a244 <_scanf_chars+0x48>
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	781a      	ldrb	r2, [r3, #0]
 800a238:	6963      	ldr	r3, [r4, #20]
 800a23a:	5c9b      	ldrb	r3, [r3, r2]
 800a23c:	b953      	cbnz	r3, 800a254 <_scanf_chars+0x58>
 800a23e:	2f00      	cmp	r7, #0
 800a240:	d031      	beq.n	800a2a6 <_scanf_chars+0xaa>
 800a242:	e022      	b.n	800a28a <_scanf_chars+0x8e>
 800a244:	2802      	cmp	r0, #2
 800a246:	d120      	bne.n	800a28a <_scanf_chars+0x8e>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a250:	071b      	lsls	r3, r3, #28
 800a252:	d41a      	bmi.n	800a28a <_scanf_chars+0x8e>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	06da      	lsls	r2, r3, #27
 800a258:	bf5e      	ittt	pl
 800a25a:	682b      	ldrpl	r3, [r5, #0]
 800a25c:	781b      	ldrbpl	r3, [r3, #0]
 800a25e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a262:	682a      	ldr	r2, [r5, #0]
 800a264:	686b      	ldr	r3, [r5, #4]
 800a266:	3201      	adds	r2, #1
 800a268:	602a      	str	r2, [r5, #0]
 800a26a:	68a2      	ldr	r2, [r4, #8]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	3a01      	subs	r2, #1
 800a270:	606b      	str	r3, [r5, #4]
 800a272:	3701      	adds	r7, #1
 800a274:	60a2      	str	r2, [r4, #8]
 800a276:	b142      	cbz	r2, 800a28a <_scanf_chars+0x8e>
 800a278:	2b00      	cmp	r3, #0
 800a27a:	dcd7      	bgt.n	800a22c <_scanf_chars+0x30>
 800a27c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a280:	4629      	mov	r1, r5
 800a282:	4640      	mov	r0, r8
 800a284:	4798      	blx	r3
 800a286:	2800      	cmp	r0, #0
 800a288:	d0d0      	beq.n	800a22c <_scanf_chars+0x30>
 800a28a:	6823      	ldr	r3, [r4, #0]
 800a28c:	f013 0310 	ands.w	r3, r3, #16
 800a290:	d105      	bne.n	800a29e <_scanf_chars+0xa2>
 800a292:	68e2      	ldr	r2, [r4, #12]
 800a294:	3201      	adds	r2, #1
 800a296:	60e2      	str	r2, [r4, #12]
 800a298:	69a2      	ldr	r2, [r4, #24]
 800a29a:	b102      	cbz	r2, 800a29e <_scanf_chars+0xa2>
 800a29c:	7033      	strb	r3, [r6, #0]
 800a29e:	6923      	ldr	r3, [r4, #16]
 800a2a0:	443b      	add	r3, r7
 800a2a2:	6123      	str	r3, [r4, #16]
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2aa:	bf00      	nop
 800a2ac:	0800b17b 	.word	0x0800b17b

0800a2b0 <_scanf_i>:
 800a2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	4698      	mov	r8, r3
 800a2b6:	4b74      	ldr	r3, [pc, #464]	@ (800a488 <_scanf_i+0x1d8>)
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	4682      	mov	sl, r0
 800a2bc:	4616      	mov	r6, r2
 800a2be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	ab03      	add	r3, sp, #12
 800a2c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a2ca:	4b70      	ldr	r3, [pc, #448]	@ (800a48c <_scanf_i+0x1dc>)
 800a2cc:	69a1      	ldr	r1, [r4, #24]
 800a2ce:	4a70      	ldr	r2, [pc, #448]	@ (800a490 <_scanf_i+0x1e0>)
 800a2d0:	2903      	cmp	r1, #3
 800a2d2:	bf08      	it	eq
 800a2d4:	461a      	moveq	r2, r3
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	9201      	str	r2, [sp, #4]
 800a2da:	1e5a      	subs	r2, r3, #1
 800a2dc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a2e0:	bf88      	it	hi
 800a2e2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a2e6:	4627      	mov	r7, r4
 800a2e8:	bf82      	ittt	hi
 800a2ea:	eb03 0905 	addhi.w	r9, r3, r5
 800a2ee:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a2f2:	60a3      	strhi	r3, [r4, #8]
 800a2f4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a2f8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a2fc:	bf98      	it	ls
 800a2fe:	f04f 0900 	movls.w	r9, #0
 800a302:	6023      	str	r3, [r4, #0]
 800a304:	463d      	mov	r5, r7
 800a306:	f04f 0b00 	mov.w	fp, #0
 800a30a:	6831      	ldr	r1, [r6, #0]
 800a30c:	ab03      	add	r3, sp, #12
 800a30e:	7809      	ldrb	r1, [r1, #0]
 800a310:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a314:	2202      	movs	r2, #2
 800a316:	f7f5 ff93 	bl	8000240 <memchr>
 800a31a:	b328      	cbz	r0, 800a368 <_scanf_i+0xb8>
 800a31c:	f1bb 0f01 	cmp.w	fp, #1
 800a320:	d159      	bne.n	800a3d6 <_scanf_i+0x126>
 800a322:	6862      	ldr	r2, [r4, #4]
 800a324:	b92a      	cbnz	r2, 800a332 <_scanf_i+0x82>
 800a326:	6822      	ldr	r2, [r4, #0]
 800a328:	2108      	movs	r1, #8
 800a32a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a32e:	6061      	str	r1, [r4, #4]
 800a330:	6022      	str	r2, [r4, #0]
 800a332:	6822      	ldr	r2, [r4, #0]
 800a334:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a338:	6022      	str	r2, [r4, #0]
 800a33a:	68a2      	ldr	r2, [r4, #8]
 800a33c:	1e51      	subs	r1, r2, #1
 800a33e:	60a1      	str	r1, [r4, #8]
 800a340:	b192      	cbz	r2, 800a368 <_scanf_i+0xb8>
 800a342:	6832      	ldr	r2, [r6, #0]
 800a344:	1c51      	adds	r1, r2, #1
 800a346:	6031      	str	r1, [r6, #0]
 800a348:	7812      	ldrb	r2, [r2, #0]
 800a34a:	f805 2b01 	strb.w	r2, [r5], #1
 800a34e:	6872      	ldr	r2, [r6, #4]
 800a350:	3a01      	subs	r2, #1
 800a352:	2a00      	cmp	r2, #0
 800a354:	6072      	str	r2, [r6, #4]
 800a356:	dc07      	bgt.n	800a368 <_scanf_i+0xb8>
 800a358:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a35c:	4631      	mov	r1, r6
 800a35e:	4650      	mov	r0, sl
 800a360:	4790      	blx	r2
 800a362:	2800      	cmp	r0, #0
 800a364:	f040 8085 	bne.w	800a472 <_scanf_i+0x1c2>
 800a368:	f10b 0b01 	add.w	fp, fp, #1
 800a36c:	f1bb 0f03 	cmp.w	fp, #3
 800a370:	d1cb      	bne.n	800a30a <_scanf_i+0x5a>
 800a372:	6863      	ldr	r3, [r4, #4]
 800a374:	b90b      	cbnz	r3, 800a37a <_scanf_i+0xca>
 800a376:	230a      	movs	r3, #10
 800a378:	6063      	str	r3, [r4, #4]
 800a37a:	6863      	ldr	r3, [r4, #4]
 800a37c:	4945      	ldr	r1, [pc, #276]	@ (800a494 <_scanf_i+0x1e4>)
 800a37e:	6960      	ldr	r0, [r4, #20]
 800a380:	1ac9      	subs	r1, r1, r3
 800a382:	f000 f889 	bl	800a498 <__sccl>
 800a386:	f04f 0b00 	mov.w	fp, #0
 800a38a:	68a3      	ldr	r3, [r4, #8]
 800a38c:	6822      	ldr	r2, [r4, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d03d      	beq.n	800a40e <_scanf_i+0x15e>
 800a392:	6831      	ldr	r1, [r6, #0]
 800a394:	6960      	ldr	r0, [r4, #20]
 800a396:	f891 c000 	ldrb.w	ip, [r1]
 800a39a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d035      	beq.n	800a40e <_scanf_i+0x15e>
 800a3a2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a3a6:	d124      	bne.n	800a3f2 <_scanf_i+0x142>
 800a3a8:	0510      	lsls	r0, r2, #20
 800a3aa:	d522      	bpl.n	800a3f2 <_scanf_i+0x142>
 800a3ac:	f10b 0b01 	add.w	fp, fp, #1
 800a3b0:	f1b9 0f00 	cmp.w	r9, #0
 800a3b4:	d003      	beq.n	800a3be <_scanf_i+0x10e>
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	f109 39ff 	add.w	r9, r9, #4294967295
 800a3bc:	60a3      	str	r3, [r4, #8]
 800a3be:	6873      	ldr	r3, [r6, #4]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	6073      	str	r3, [r6, #4]
 800a3c6:	dd1b      	ble.n	800a400 <_scanf_i+0x150>
 800a3c8:	6833      	ldr	r3, [r6, #0]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	6033      	str	r3, [r6, #0]
 800a3ce:	68a3      	ldr	r3, [r4, #8]
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	60a3      	str	r3, [r4, #8]
 800a3d4:	e7d9      	b.n	800a38a <_scanf_i+0xda>
 800a3d6:	f1bb 0f02 	cmp.w	fp, #2
 800a3da:	d1ae      	bne.n	800a33a <_scanf_i+0x8a>
 800a3dc:	6822      	ldr	r2, [r4, #0]
 800a3de:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a3e2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a3e6:	d1bf      	bne.n	800a368 <_scanf_i+0xb8>
 800a3e8:	2110      	movs	r1, #16
 800a3ea:	6061      	str	r1, [r4, #4]
 800a3ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a3f0:	e7a2      	b.n	800a338 <_scanf_i+0x88>
 800a3f2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a3f6:	6022      	str	r2, [r4, #0]
 800a3f8:	780b      	ldrb	r3, [r1, #0]
 800a3fa:	f805 3b01 	strb.w	r3, [r5], #1
 800a3fe:	e7de      	b.n	800a3be <_scanf_i+0x10e>
 800a400:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a404:	4631      	mov	r1, r6
 800a406:	4650      	mov	r0, sl
 800a408:	4798      	blx	r3
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d0df      	beq.n	800a3ce <_scanf_i+0x11e>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	05d9      	lsls	r1, r3, #23
 800a412:	d50d      	bpl.n	800a430 <_scanf_i+0x180>
 800a414:	42bd      	cmp	r5, r7
 800a416:	d909      	bls.n	800a42c <_scanf_i+0x17c>
 800a418:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a41c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a420:	4632      	mov	r2, r6
 800a422:	4650      	mov	r0, sl
 800a424:	4798      	blx	r3
 800a426:	f105 39ff 	add.w	r9, r5, #4294967295
 800a42a:	464d      	mov	r5, r9
 800a42c:	42bd      	cmp	r5, r7
 800a42e:	d028      	beq.n	800a482 <_scanf_i+0x1d2>
 800a430:	6822      	ldr	r2, [r4, #0]
 800a432:	f012 0210 	ands.w	r2, r2, #16
 800a436:	d113      	bne.n	800a460 <_scanf_i+0x1b0>
 800a438:	702a      	strb	r2, [r5, #0]
 800a43a:	6863      	ldr	r3, [r4, #4]
 800a43c:	9e01      	ldr	r6, [sp, #4]
 800a43e:	4639      	mov	r1, r7
 800a440:	4650      	mov	r0, sl
 800a442:	47b0      	blx	r6
 800a444:	f8d8 3000 	ldr.w	r3, [r8]
 800a448:	6821      	ldr	r1, [r4, #0]
 800a44a:	1d1a      	adds	r2, r3, #4
 800a44c:	f8c8 2000 	str.w	r2, [r8]
 800a450:	f011 0f20 	tst.w	r1, #32
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	d00f      	beq.n	800a478 <_scanf_i+0x1c8>
 800a458:	6018      	str	r0, [r3, #0]
 800a45a:	68e3      	ldr	r3, [r4, #12]
 800a45c:	3301      	adds	r3, #1
 800a45e:	60e3      	str	r3, [r4, #12]
 800a460:	6923      	ldr	r3, [r4, #16]
 800a462:	1bed      	subs	r5, r5, r7
 800a464:	445d      	add	r5, fp
 800a466:	442b      	add	r3, r5
 800a468:	6123      	str	r3, [r4, #16]
 800a46a:	2000      	movs	r0, #0
 800a46c:	b007      	add	sp, #28
 800a46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a472:	f04f 0b00 	mov.w	fp, #0
 800a476:	e7ca      	b.n	800a40e <_scanf_i+0x15e>
 800a478:	07ca      	lsls	r2, r1, #31
 800a47a:	bf4c      	ite	mi
 800a47c:	8018      	strhmi	r0, [r3, #0]
 800a47e:	6018      	strpl	r0, [r3, #0]
 800a480:	e7eb      	b.n	800a45a <_scanf_i+0x1aa>
 800a482:	2001      	movs	r0, #1
 800a484:	e7f2      	b.n	800a46c <_scanf_i+0x1bc>
 800a486:	bf00      	nop
 800a488:	0800abbc 	.word	0x0800abbc
 800a48c:	0800a835 	.word	0x0800a835
 800a490:	080091c1 	.word	0x080091c1
 800a494:	0800b2be 	.word	0x0800b2be

0800a498 <__sccl>:
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	780b      	ldrb	r3, [r1, #0]
 800a49c:	4604      	mov	r4, r0
 800a49e:	2b5e      	cmp	r3, #94	@ 0x5e
 800a4a0:	bf0b      	itete	eq
 800a4a2:	784b      	ldrbeq	r3, [r1, #1]
 800a4a4:	1c4a      	addne	r2, r1, #1
 800a4a6:	1c8a      	addeq	r2, r1, #2
 800a4a8:	2100      	movne	r1, #0
 800a4aa:	bf08      	it	eq
 800a4ac:	2101      	moveq	r1, #1
 800a4ae:	3801      	subs	r0, #1
 800a4b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a4b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a4b8:	42a8      	cmp	r0, r5
 800a4ba:	d1fb      	bne.n	800a4b4 <__sccl+0x1c>
 800a4bc:	b90b      	cbnz	r3, 800a4c2 <__sccl+0x2a>
 800a4be:	1e50      	subs	r0, r2, #1
 800a4c0:	bd70      	pop	{r4, r5, r6, pc}
 800a4c2:	f081 0101 	eor.w	r1, r1, #1
 800a4c6:	54e1      	strb	r1, [r4, r3]
 800a4c8:	4610      	mov	r0, r2
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a4d0:	2d2d      	cmp	r5, #45	@ 0x2d
 800a4d2:	d005      	beq.n	800a4e0 <__sccl+0x48>
 800a4d4:	2d5d      	cmp	r5, #93	@ 0x5d
 800a4d6:	d016      	beq.n	800a506 <__sccl+0x6e>
 800a4d8:	2d00      	cmp	r5, #0
 800a4da:	d0f1      	beq.n	800a4c0 <__sccl+0x28>
 800a4dc:	462b      	mov	r3, r5
 800a4de:	e7f2      	b.n	800a4c6 <__sccl+0x2e>
 800a4e0:	7846      	ldrb	r6, [r0, #1]
 800a4e2:	2e5d      	cmp	r6, #93	@ 0x5d
 800a4e4:	d0fa      	beq.n	800a4dc <__sccl+0x44>
 800a4e6:	42b3      	cmp	r3, r6
 800a4e8:	dcf8      	bgt.n	800a4dc <__sccl+0x44>
 800a4ea:	3002      	adds	r0, #2
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	3201      	adds	r2, #1
 800a4f0:	4296      	cmp	r6, r2
 800a4f2:	54a1      	strb	r1, [r4, r2]
 800a4f4:	dcfb      	bgt.n	800a4ee <__sccl+0x56>
 800a4f6:	1af2      	subs	r2, r6, r3
 800a4f8:	3a01      	subs	r2, #1
 800a4fa:	1c5d      	adds	r5, r3, #1
 800a4fc:	42b3      	cmp	r3, r6
 800a4fe:	bfa8      	it	ge
 800a500:	2200      	movge	r2, #0
 800a502:	18ab      	adds	r3, r5, r2
 800a504:	e7e1      	b.n	800a4ca <__sccl+0x32>
 800a506:	4610      	mov	r0, r2
 800a508:	e7da      	b.n	800a4c0 <__sccl+0x28>

0800a50a <__submore>:
 800a50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50e:	460c      	mov	r4, r1
 800a510:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a512:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a516:	4299      	cmp	r1, r3
 800a518:	d11d      	bne.n	800a556 <__submore+0x4c>
 800a51a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a51e:	f7fe fd55 	bl	8008fcc <_malloc_r>
 800a522:	b918      	cbnz	r0, 800a52c <__submore+0x22>
 800a524:	f04f 30ff 	mov.w	r0, #4294967295
 800a528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a52c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a530:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a532:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a536:	6360      	str	r0, [r4, #52]	@ 0x34
 800a538:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a53c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a540:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a544:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a548:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a54c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a550:	6020      	str	r0, [r4, #0]
 800a552:	2000      	movs	r0, #0
 800a554:	e7e8      	b.n	800a528 <__submore+0x1e>
 800a556:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a558:	0077      	lsls	r7, r6, #1
 800a55a:	463a      	mov	r2, r7
 800a55c:	f7ff fb12 	bl	8009b84 <_realloc_r>
 800a560:	4605      	mov	r5, r0
 800a562:	2800      	cmp	r0, #0
 800a564:	d0de      	beq.n	800a524 <__submore+0x1a>
 800a566:	eb00 0806 	add.w	r8, r0, r6
 800a56a:	4601      	mov	r1, r0
 800a56c:	4632      	mov	r2, r6
 800a56e:	4640      	mov	r0, r8
 800a570:	f7ff fae6 	bl	8009b40 <memcpy>
 800a574:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a578:	f8c4 8000 	str.w	r8, [r4]
 800a57c:	e7e9      	b.n	800a552 <__submore+0x48>

0800a57e <__swbuf_r>:
 800a57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a580:	460e      	mov	r6, r1
 800a582:	4614      	mov	r4, r2
 800a584:	4605      	mov	r5, r0
 800a586:	b118      	cbz	r0, 800a590 <__swbuf_r+0x12>
 800a588:	6a03      	ldr	r3, [r0, #32]
 800a58a:	b90b      	cbnz	r3, 800a590 <__swbuf_r+0x12>
 800a58c:	f7fd fed2 	bl	8008334 <__sinit>
 800a590:	69a3      	ldr	r3, [r4, #24]
 800a592:	60a3      	str	r3, [r4, #8]
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	071a      	lsls	r2, r3, #28
 800a598:	d501      	bpl.n	800a59e <__swbuf_r+0x20>
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	b943      	cbnz	r3, 800a5b0 <__swbuf_r+0x32>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f000 f82b 	bl	800a5fc <__swsetup_r>
 800a5a6:	b118      	cbz	r0, 800a5b0 <__swbuf_r+0x32>
 800a5a8:	f04f 37ff 	mov.w	r7, #4294967295
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	6922      	ldr	r2, [r4, #16]
 800a5b4:	1a98      	subs	r0, r3, r2
 800a5b6:	6963      	ldr	r3, [r4, #20]
 800a5b8:	b2f6      	uxtb	r6, r6
 800a5ba:	4283      	cmp	r3, r0
 800a5bc:	4637      	mov	r7, r6
 800a5be:	dc05      	bgt.n	800a5cc <__swbuf_r+0x4e>
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f7ff f972 	bl	80098ac <_fflush_r>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d1ed      	bne.n	800a5a8 <__swbuf_r+0x2a>
 800a5cc:	68a3      	ldr	r3, [r4, #8]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	60a3      	str	r3, [r4, #8]
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	1c5a      	adds	r2, r3, #1
 800a5d6:	6022      	str	r2, [r4, #0]
 800a5d8:	701e      	strb	r6, [r3, #0]
 800a5da:	6962      	ldr	r2, [r4, #20]
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d004      	beq.n	800a5ec <__swbuf_r+0x6e>
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	07db      	lsls	r3, r3, #31
 800a5e6:	d5e1      	bpl.n	800a5ac <__swbuf_r+0x2e>
 800a5e8:	2e0a      	cmp	r6, #10
 800a5ea:	d1df      	bne.n	800a5ac <__swbuf_r+0x2e>
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f7ff f95c 	bl	80098ac <_fflush_r>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d0d9      	beq.n	800a5ac <__swbuf_r+0x2e>
 800a5f8:	e7d6      	b.n	800a5a8 <__swbuf_r+0x2a>
	...

0800a5fc <__swsetup_r>:
 800a5fc:	b538      	push	{r3, r4, r5, lr}
 800a5fe:	4b29      	ldr	r3, [pc, #164]	@ (800a6a4 <__swsetup_r+0xa8>)
 800a600:	4605      	mov	r5, r0
 800a602:	6818      	ldr	r0, [r3, #0]
 800a604:	460c      	mov	r4, r1
 800a606:	b118      	cbz	r0, 800a610 <__swsetup_r+0x14>
 800a608:	6a03      	ldr	r3, [r0, #32]
 800a60a:	b90b      	cbnz	r3, 800a610 <__swsetup_r+0x14>
 800a60c:	f7fd fe92 	bl	8008334 <__sinit>
 800a610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a614:	0719      	lsls	r1, r3, #28
 800a616:	d422      	bmi.n	800a65e <__swsetup_r+0x62>
 800a618:	06da      	lsls	r2, r3, #27
 800a61a:	d407      	bmi.n	800a62c <__swsetup_r+0x30>
 800a61c:	2209      	movs	r2, #9
 800a61e:	602a      	str	r2, [r5, #0]
 800a620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a624:	81a3      	strh	r3, [r4, #12]
 800a626:	f04f 30ff 	mov.w	r0, #4294967295
 800a62a:	e033      	b.n	800a694 <__swsetup_r+0x98>
 800a62c:	0758      	lsls	r0, r3, #29
 800a62e:	d512      	bpl.n	800a656 <__swsetup_r+0x5a>
 800a630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a632:	b141      	cbz	r1, 800a646 <__swsetup_r+0x4a>
 800a634:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a638:	4299      	cmp	r1, r3
 800a63a:	d002      	beq.n	800a642 <__swsetup_r+0x46>
 800a63c:	4628      	mov	r0, r5
 800a63e:	f7fe fc05 	bl	8008e4c <_free_r>
 800a642:	2300      	movs	r3, #0
 800a644:	6363      	str	r3, [r4, #52]	@ 0x34
 800a646:	89a3      	ldrh	r3, [r4, #12]
 800a648:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	2300      	movs	r3, #0
 800a650:	6063      	str	r3, [r4, #4]
 800a652:	6923      	ldr	r3, [r4, #16]
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	f043 0308 	orr.w	r3, r3, #8
 800a65c:	81a3      	strh	r3, [r4, #12]
 800a65e:	6923      	ldr	r3, [r4, #16]
 800a660:	b94b      	cbnz	r3, 800a676 <__swsetup_r+0x7a>
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a66c:	d003      	beq.n	800a676 <__swsetup_r+0x7a>
 800a66e:	4621      	mov	r1, r4
 800a670:	4628      	mov	r0, r5
 800a672:	f000 f907 	bl	800a884 <__smakebuf_r>
 800a676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a67a:	f013 0201 	ands.w	r2, r3, #1
 800a67e:	d00a      	beq.n	800a696 <__swsetup_r+0x9a>
 800a680:	2200      	movs	r2, #0
 800a682:	60a2      	str	r2, [r4, #8]
 800a684:	6962      	ldr	r2, [r4, #20]
 800a686:	4252      	negs	r2, r2
 800a688:	61a2      	str	r2, [r4, #24]
 800a68a:	6922      	ldr	r2, [r4, #16]
 800a68c:	b942      	cbnz	r2, 800a6a0 <__swsetup_r+0xa4>
 800a68e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a692:	d1c5      	bne.n	800a620 <__swsetup_r+0x24>
 800a694:	bd38      	pop	{r3, r4, r5, pc}
 800a696:	0799      	lsls	r1, r3, #30
 800a698:	bf58      	it	pl
 800a69a:	6962      	ldrpl	r2, [r4, #20]
 800a69c:	60a2      	str	r2, [r4, #8]
 800a69e:	e7f4      	b.n	800a68a <__swsetup_r+0x8e>
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	e7f7      	b.n	800a694 <__swsetup_r+0x98>
 800a6a4:	2000003c 	.word	0x2000003c

0800a6a8 <_raise_r>:
 800a6a8:	291f      	cmp	r1, #31
 800a6aa:	b538      	push	{r3, r4, r5, lr}
 800a6ac:	4605      	mov	r5, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	d904      	bls.n	800a6bc <_raise_r+0x14>
 800a6b2:	2316      	movs	r3, #22
 800a6b4:	6003      	str	r3, [r0, #0]
 800a6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ba:	bd38      	pop	{r3, r4, r5, pc}
 800a6bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6be:	b112      	cbz	r2, 800a6c6 <_raise_r+0x1e>
 800a6c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6c4:	b94b      	cbnz	r3, 800a6da <_raise_r+0x32>
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f000 f830 	bl	800a72c <_getpid_r>
 800a6cc:	4622      	mov	r2, r4
 800a6ce:	4601      	mov	r1, r0
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6d6:	f000 b817 	b.w	800a708 <_kill_r>
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d00a      	beq.n	800a6f4 <_raise_r+0x4c>
 800a6de:	1c59      	adds	r1, r3, #1
 800a6e0:	d103      	bne.n	800a6ea <_raise_r+0x42>
 800a6e2:	2316      	movs	r3, #22
 800a6e4:	6003      	str	r3, [r0, #0]
 800a6e6:	2001      	movs	r0, #1
 800a6e8:	e7e7      	b.n	800a6ba <_raise_r+0x12>
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	4798      	blx	r3
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	e7e0      	b.n	800a6ba <_raise_r+0x12>

0800a6f8 <raise>:
 800a6f8:	4b02      	ldr	r3, [pc, #8]	@ (800a704 <raise+0xc>)
 800a6fa:	4601      	mov	r1, r0
 800a6fc:	6818      	ldr	r0, [r3, #0]
 800a6fe:	f7ff bfd3 	b.w	800a6a8 <_raise_r>
 800a702:	bf00      	nop
 800a704:	2000003c 	.word	0x2000003c

0800a708 <_kill_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d07      	ldr	r5, [pc, #28]	@ (800a728 <_kill_r+0x20>)
 800a70c:	2300      	movs	r3, #0
 800a70e:	4604      	mov	r4, r0
 800a710:	4608      	mov	r0, r1
 800a712:	4611      	mov	r1, r2
 800a714:	602b      	str	r3, [r5, #0]
 800a716:	f7f6 fd85 	bl	8001224 <_kill>
 800a71a:	1c43      	adds	r3, r0, #1
 800a71c:	d102      	bne.n	800a724 <_kill_r+0x1c>
 800a71e:	682b      	ldr	r3, [r5, #0]
 800a720:	b103      	cbz	r3, 800a724 <_kill_r+0x1c>
 800a722:	6023      	str	r3, [r4, #0]
 800a724:	bd38      	pop	{r3, r4, r5, pc}
 800a726:	bf00      	nop
 800a728:	20000b7c 	.word	0x20000b7c

0800a72c <_getpid_r>:
 800a72c:	f7f6 bd72 	b.w	8001214 <_getpid>

0800a730 <_malloc_usable_size_r>:
 800a730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a734:	1f18      	subs	r0, r3, #4
 800a736:	2b00      	cmp	r3, #0
 800a738:	bfbc      	itt	lt
 800a73a:	580b      	ldrlt	r3, [r1, r0]
 800a73c:	18c0      	addlt	r0, r0, r3
 800a73e:	4770      	bx	lr

0800a740 <_strtol_l.constprop.0>:
 800a740:	2b24      	cmp	r3, #36	@ 0x24
 800a742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a746:	4686      	mov	lr, r0
 800a748:	4690      	mov	r8, r2
 800a74a:	d801      	bhi.n	800a750 <_strtol_l.constprop.0+0x10>
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d106      	bne.n	800a75e <_strtol_l.constprop.0+0x1e>
 800a750:	f7fe fb26 	bl	8008da0 <__errno>
 800a754:	2316      	movs	r3, #22
 800a756:	6003      	str	r3, [r0, #0]
 800a758:	2000      	movs	r0, #0
 800a75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a75e:	4834      	ldr	r0, [pc, #208]	@ (800a830 <_strtol_l.constprop.0+0xf0>)
 800a760:	460d      	mov	r5, r1
 800a762:	462a      	mov	r2, r5
 800a764:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a768:	5d06      	ldrb	r6, [r0, r4]
 800a76a:	f016 0608 	ands.w	r6, r6, #8
 800a76e:	d1f8      	bne.n	800a762 <_strtol_l.constprop.0+0x22>
 800a770:	2c2d      	cmp	r4, #45	@ 0x2d
 800a772:	d12d      	bne.n	800a7d0 <_strtol_l.constprop.0+0x90>
 800a774:	782c      	ldrb	r4, [r5, #0]
 800a776:	2601      	movs	r6, #1
 800a778:	1c95      	adds	r5, r2, #2
 800a77a:	f033 0210 	bics.w	r2, r3, #16
 800a77e:	d109      	bne.n	800a794 <_strtol_l.constprop.0+0x54>
 800a780:	2c30      	cmp	r4, #48	@ 0x30
 800a782:	d12a      	bne.n	800a7da <_strtol_l.constprop.0+0x9a>
 800a784:	782a      	ldrb	r2, [r5, #0]
 800a786:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a78a:	2a58      	cmp	r2, #88	@ 0x58
 800a78c:	d125      	bne.n	800a7da <_strtol_l.constprop.0+0x9a>
 800a78e:	786c      	ldrb	r4, [r5, #1]
 800a790:	2310      	movs	r3, #16
 800a792:	3502      	adds	r5, #2
 800a794:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a798:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a79c:	2200      	movs	r2, #0
 800a79e:	fbbc f9f3 	udiv	r9, ip, r3
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	fb03 ca19 	mls	sl, r3, r9, ip
 800a7a8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a7ac:	2f09      	cmp	r7, #9
 800a7ae:	d81b      	bhi.n	800a7e8 <_strtol_l.constprop.0+0xa8>
 800a7b0:	463c      	mov	r4, r7
 800a7b2:	42a3      	cmp	r3, r4
 800a7b4:	dd27      	ble.n	800a806 <_strtol_l.constprop.0+0xc6>
 800a7b6:	1c57      	adds	r7, r2, #1
 800a7b8:	d007      	beq.n	800a7ca <_strtol_l.constprop.0+0x8a>
 800a7ba:	4581      	cmp	r9, r0
 800a7bc:	d320      	bcc.n	800a800 <_strtol_l.constprop.0+0xc0>
 800a7be:	d101      	bne.n	800a7c4 <_strtol_l.constprop.0+0x84>
 800a7c0:	45a2      	cmp	sl, r4
 800a7c2:	db1d      	blt.n	800a800 <_strtol_l.constprop.0+0xc0>
 800a7c4:	fb00 4003 	mla	r0, r0, r3, r4
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7ce:	e7eb      	b.n	800a7a8 <_strtol_l.constprop.0+0x68>
 800a7d0:	2c2b      	cmp	r4, #43	@ 0x2b
 800a7d2:	bf04      	itt	eq
 800a7d4:	782c      	ldrbeq	r4, [r5, #0]
 800a7d6:	1c95      	addeq	r5, r2, #2
 800a7d8:	e7cf      	b.n	800a77a <_strtol_l.constprop.0+0x3a>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1da      	bne.n	800a794 <_strtol_l.constprop.0+0x54>
 800a7de:	2c30      	cmp	r4, #48	@ 0x30
 800a7e0:	bf0c      	ite	eq
 800a7e2:	2308      	moveq	r3, #8
 800a7e4:	230a      	movne	r3, #10
 800a7e6:	e7d5      	b.n	800a794 <_strtol_l.constprop.0+0x54>
 800a7e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a7ec:	2f19      	cmp	r7, #25
 800a7ee:	d801      	bhi.n	800a7f4 <_strtol_l.constprop.0+0xb4>
 800a7f0:	3c37      	subs	r4, #55	@ 0x37
 800a7f2:	e7de      	b.n	800a7b2 <_strtol_l.constprop.0+0x72>
 800a7f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a7f8:	2f19      	cmp	r7, #25
 800a7fa:	d804      	bhi.n	800a806 <_strtol_l.constprop.0+0xc6>
 800a7fc:	3c57      	subs	r4, #87	@ 0x57
 800a7fe:	e7d8      	b.n	800a7b2 <_strtol_l.constprop.0+0x72>
 800a800:	f04f 32ff 	mov.w	r2, #4294967295
 800a804:	e7e1      	b.n	800a7ca <_strtol_l.constprop.0+0x8a>
 800a806:	1c53      	adds	r3, r2, #1
 800a808:	d108      	bne.n	800a81c <_strtol_l.constprop.0+0xdc>
 800a80a:	2322      	movs	r3, #34	@ 0x22
 800a80c:	f8ce 3000 	str.w	r3, [lr]
 800a810:	4660      	mov	r0, ip
 800a812:	f1b8 0f00 	cmp.w	r8, #0
 800a816:	d0a0      	beq.n	800a75a <_strtol_l.constprop.0+0x1a>
 800a818:	1e69      	subs	r1, r5, #1
 800a81a:	e006      	b.n	800a82a <_strtol_l.constprop.0+0xea>
 800a81c:	b106      	cbz	r6, 800a820 <_strtol_l.constprop.0+0xe0>
 800a81e:	4240      	negs	r0, r0
 800a820:	f1b8 0f00 	cmp.w	r8, #0
 800a824:	d099      	beq.n	800a75a <_strtol_l.constprop.0+0x1a>
 800a826:	2a00      	cmp	r2, #0
 800a828:	d1f6      	bne.n	800a818 <_strtol_l.constprop.0+0xd8>
 800a82a:	f8c8 1000 	str.w	r1, [r8]
 800a82e:	e794      	b.n	800a75a <_strtol_l.constprop.0+0x1a>
 800a830:	0800b17b 	.word	0x0800b17b

0800a834 <_strtol_r>:
 800a834:	f7ff bf84 	b.w	800a740 <_strtol_l.constprop.0>

0800a838 <__swhatbuf_r>:
 800a838:	b570      	push	{r4, r5, r6, lr}
 800a83a:	460c      	mov	r4, r1
 800a83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a840:	2900      	cmp	r1, #0
 800a842:	b096      	sub	sp, #88	@ 0x58
 800a844:	4615      	mov	r5, r2
 800a846:	461e      	mov	r6, r3
 800a848:	da0d      	bge.n	800a866 <__swhatbuf_r+0x2e>
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a850:	f04f 0100 	mov.w	r1, #0
 800a854:	bf14      	ite	ne
 800a856:	2340      	movne	r3, #64	@ 0x40
 800a858:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a85c:	2000      	movs	r0, #0
 800a85e:	6031      	str	r1, [r6, #0]
 800a860:	602b      	str	r3, [r5, #0]
 800a862:	b016      	add	sp, #88	@ 0x58
 800a864:	bd70      	pop	{r4, r5, r6, pc}
 800a866:	466a      	mov	r2, sp
 800a868:	f000 f848 	bl	800a8fc <_fstat_r>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	dbec      	blt.n	800a84a <__swhatbuf_r+0x12>
 800a870:	9901      	ldr	r1, [sp, #4]
 800a872:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a876:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a87a:	4259      	negs	r1, r3
 800a87c:	4159      	adcs	r1, r3
 800a87e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a882:	e7eb      	b.n	800a85c <__swhatbuf_r+0x24>

0800a884 <__smakebuf_r>:
 800a884:	898b      	ldrh	r3, [r1, #12]
 800a886:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a888:	079d      	lsls	r5, r3, #30
 800a88a:	4606      	mov	r6, r0
 800a88c:	460c      	mov	r4, r1
 800a88e:	d507      	bpl.n	800a8a0 <__smakebuf_r+0x1c>
 800a890:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a894:	6023      	str	r3, [r4, #0]
 800a896:	6123      	str	r3, [r4, #16]
 800a898:	2301      	movs	r3, #1
 800a89a:	6163      	str	r3, [r4, #20]
 800a89c:	b003      	add	sp, #12
 800a89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a0:	ab01      	add	r3, sp, #4
 800a8a2:	466a      	mov	r2, sp
 800a8a4:	f7ff ffc8 	bl	800a838 <__swhatbuf_r>
 800a8a8:	9f00      	ldr	r7, [sp, #0]
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	4639      	mov	r1, r7
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f7fe fb8c 	bl	8008fcc <_malloc_r>
 800a8b4:	b948      	cbnz	r0, 800a8ca <__smakebuf_r+0x46>
 800a8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ba:	059a      	lsls	r2, r3, #22
 800a8bc:	d4ee      	bmi.n	800a89c <__smakebuf_r+0x18>
 800a8be:	f023 0303 	bic.w	r3, r3, #3
 800a8c2:	f043 0302 	orr.w	r3, r3, #2
 800a8c6:	81a3      	strh	r3, [r4, #12]
 800a8c8:	e7e2      	b.n	800a890 <__smakebuf_r+0xc>
 800a8ca:	89a3      	ldrh	r3, [r4, #12]
 800a8cc:	6020      	str	r0, [r4, #0]
 800a8ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	9b01      	ldr	r3, [sp, #4]
 800a8d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a8da:	b15b      	cbz	r3, 800a8f4 <__smakebuf_r+0x70>
 800a8dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f000 f81d 	bl	800a920 <_isatty_r>
 800a8e6:	b128      	cbz	r0, 800a8f4 <__smakebuf_r+0x70>
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	f023 0303 	bic.w	r3, r3, #3
 800a8ee:	f043 0301 	orr.w	r3, r3, #1
 800a8f2:	81a3      	strh	r3, [r4, #12]
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	431d      	orrs	r5, r3
 800a8f8:	81a5      	strh	r5, [r4, #12]
 800a8fa:	e7cf      	b.n	800a89c <__smakebuf_r+0x18>

0800a8fc <_fstat_r>:
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	4d07      	ldr	r5, [pc, #28]	@ (800a91c <_fstat_r+0x20>)
 800a900:	2300      	movs	r3, #0
 800a902:	4604      	mov	r4, r0
 800a904:	4608      	mov	r0, r1
 800a906:	4611      	mov	r1, r2
 800a908:	602b      	str	r3, [r5, #0]
 800a90a:	f7f6 fceb 	bl	80012e4 <_fstat>
 800a90e:	1c43      	adds	r3, r0, #1
 800a910:	d102      	bne.n	800a918 <_fstat_r+0x1c>
 800a912:	682b      	ldr	r3, [r5, #0]
 800a914:	b103      	cbz	r3, 800a918 <_fstat_r+0x1c>
 800a916:	6023      	str	r3, [r4, #0]
 800a918:	bd38      	pop	{r3, r4, r5, pc}
 800a91a:	bf00      	nop
 800a91c:	20000b7c 	.word	0x20000b7c

0800a920 <_isatty_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4d06      	ldr	r5, [pc, #24]	@ (800a93c <_isatty_r+0x1c>)
 800a924:	2300      	movs	r3, #0
 800a926:	4604      	mov	r4, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	602b      	str	r3, [r5, #0]
 800a92c:	f7f6 fcea 	bl	8001304 <_isatty>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d102      	bne.n	800a93a <_isatty_r+0x1a>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	b103      	cbz	r3, 800a93a <_isatty_r+0x1a>
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	bd38      	pop	{r3, r4, r5, pc}
 800a93c:	20000b7c 	.word	0x20000b7c

0800a940 <_gettimeofday>:
 800a940:	4b02      	ldr	r3, [pc, #8]	@ (800a94c <_gettimeofday+0xc>)
 800a942:	2258      	movs	r2, #88	@ 0x58
 800a944:	601a      	str	r2, [r3, #0]
 800a946:	f04f 30ff 	mov.w	r0, #4294967295
 800a94a:	4770      	bx	lr
 800a94c:	20000b7c 	.word	0x20000b7c

0800a950 <_init>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr

0800a95c <_fini>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	bf00      	nop
 800a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a962:	bc08      	pop	{r3}
 800a964:	469e      	mov	lr, r3
 800a966:	4770      	bx	lr
