
sd_card_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000874c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800891c  0800891c  0000991c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fe8  08008fe8  0000a074  2**0
                  CONTENTS
  4 .ARM          00000008  08008fe8  08008fe8  00009fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff0  08008ff0  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff0  08008ff0  00009ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ff4  08008ff4  00009ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08008ff8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a78  20000074  0800906c  0000a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aec  0800906c  0000aaec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012696  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd9  00000000  00000000  0001c73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001f518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6d  00000000  00000000  00020538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002185f  00000000  00000000  000211a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016eaf  00000000  00000000  00042a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c04c0  00000000  00000000  000598b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00119d73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e8  00000000  00000000  00119db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008904 	.word	0x08008904

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08008904 	.word	0x08008904

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <UART_Print>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
SPI_HandleTypeDef hspi2;
char TxBuffer[250];
static void UART_Print(char* str)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 100);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f7ff fe29 	bl	8000210 <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	2364      	movs	r3, #100	@ 0x64
 80005c4:	6879      	ldr	r1, [r7, #4]
 80005c6:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <UART_Print+0x24>)
 80005c8:	f002 fd72 	bl	80030b0 <HAL_UART_Transmit>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000130 	.word	0x20000130

080005d8 <mounSDtFile>:

static FRESULT mounSDtFile(FATFS *FatFs)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    FRESULT FR_Status;
    FR_Status = f_mount(FatFs, "", 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	4910      	ldr	r1, [pc, #64]	@ (8000624 <mounSDtFile+0x4c>)
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f006 fb25 	bl	8006c34 <f_mount>
 80005ea:	4603      	mov	r3, r0
 80005ec:	73fb      	strb	r3, [r7, #15]
    if (FR_Status != FR_OK)
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00a      	beq.n	800060a <mounSDtFile+0x32>
    {
        sprintf(TxBuffer, "Error! While Mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	461a      	mov	r2, r3
 80005f8:	490b      	ldr	r1, [pc, #44]	@ (8000628 <mounSDtFile+0x50>)
 80005fa:	480c      	ldr	r0, [pc, #48]	@ (800062c <mounSDtFile+0x54>)
 80005fc:	f007 fce2 	bl	8007fc4 <siprintf>
        UART_Print(TxBuffer);
 8000600:	480a      	ldr	r0, [pc, #40]	@ (800062c <mounSDtFile+0x54>)
 8000602:	f7ff ffd5 	bl	80005b0 <UART_Print>
        return FR_Status;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	e007      	b.n	800061a <mounSDtFile+0x42>
    }
    sprintf(TxBuffer, "SD Card Mounted Successfully! \r\n\n");
 800060a:	4909      	ldr	r1, [pc, #36]	@ (8000630 <mounSDtFile+0x58>)
 800060c:	4807      	ldr	r0, [pc, #28]	@ (800062c <mounSDtFile+0x54>)
 800060e:	f007 fcd9 	bl	8007fc4 <siprintf>
    UART_Print(TxBuffer);
 8000612:	4806      	ldr	r0, [pc, #24]	@ (800062c <mounSDtFile+0x54>)
 8000614:	f7ff ffcc 	bl	80005b0 <UART_Print>
    return FR_OK;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	0800891c 	.word	0x0800891c
 8000628:	08008920 	.word	0x08008920
 800062c:	2000065c 	.word	0x2000065c
 8000630:	08008954 	.word	0x08008954

08000634 <unmountSDFile>:

static FRESULT unmountSDFile()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	FRESULT FR_Status;
	FR_Status = f_mount(NULL, "", 0);
 800063a:	2200      	movs	r2, #0
 800063c:	490f      	ldr	r1, [pc, #60]	@ (800067c <unmountSDFile+0x48>)
 800063e:	2000      	movs	r0, #0
 8000640:	f006 faf8 	bl	8006c34 <f_mount>
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
	if (FR_Status != FR_OK)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d009      	beq.n	8000662 <unmountSDFile+0x2e>
	  {
	      sprintf(TxBuffer, "Error! While Un-mounting SD Card, Error Code: (%i)\r\n", FR_Status);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	461a      	mov	r2, r3
 8000652:	490b      	ldr	r1, [pc, #44]	@ (8000680 <unmountSDFile+0x4c>)
 8000654:	480b      	ldr	r0, [pc, #44]	@ (8000684 <unmountSDFile+0x50>)
 8000656:	f007 fcb5 	bl	8007fc4 <siprintf>
	      UART_Print(TxBuffer);
 800065a:	480a      	ldr	r0, [pc, #40]	@ (8000684 <unmountSDFile+0x50>)
 800065c:	f7ff ffa8 	bl	80005b0 <UART_Print>
 8000660:	e006      	b.n	8000670 <unmountSDFile+0x3c>
	  } else{
	      sprintf(TxBuffer, "SD Card Un-mounted Successfully! \r\n");
 8000662:	4909      	ldr	r1, [pc, #36]	@ (8000688 <unmountSDFile+0x54>)
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <unmountSDFile+0x50>)
 8000666:	f007 fcad 	bl	8007fc4 <siprintf>
	      UART_Print(TxBuffer);
 800066a:	4806      	ldr	r0, [pc, #24]	@ (8000684 <unmountSDFile+0x50>)
 800066c:	f7ff ffa0 	bl	80005b0 <UART_Print>
	  }
	return FR_Status;
 8000670:	79fb      	ldrb	r3, [r7, #7]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	0800891c 	.word	0x0800891c
 8000680:	08008978 	.word	0x08008978
 8000684:	2000065c 	.word	0x2000065c
 8000688:	080089b0 	.word	0x080089b0

0800068c <writeSDFILE>:

static FRESULT writeSDFILE(const char *filename)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	f5ad 5d88 	sub.w	sp, sp, #4352	@ 0x1100
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800069a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800069e:	6018      	str	r0, [r3, #0]
    FRESULT FR_Status;
    FIL Fil;
    char RW_Buffer[200];

    FR_Status = f_open(&Fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 80006a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80006a4:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 80006a8:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80006ac:	3b14      	subs	r3, #20
 80006ae:	2212      	movs	r2, #18
 80006b0:	6809      	ldr	r1, [r1, #0]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f006 fb04 	bl	8006cc0 <f_open>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f507 5288 	add.w	r2, r7, #4352	@ 0x1100
 80006be:	f102 0207 	add.w	r2, r2, #7
 80006c2:	7013      	strb	r3, [r2, #0]
    if(FR_Status != FR_OK)
 80006c4:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80006c8:	f103 0307 	add.w	r3, r3, #7
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d016      	beq.n	8000700 <writeSDFILE+0x74>
    {
        sprintf(TxBuffer, "Error! While Opening/Creating The File '%s', Error Code: (%i)\r\n", filename, FR_Status);
 80006d2:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80006d6:	f103 0307 	add.w	r3, r3, #7
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80006e0:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80006e4:	6812      	ldr	r2, [r2, #0]
 80006e6:	4931      	ldr	r1, [pc, #196]	@ (80007ac <writeSDFILE+0x120>)
 80006e8:	4831      	ldr	r0, [pc, #196]	@ (80007b0 <writeSDFILE+0x124>)
 80006ea:	f007 fc6b 	bl	8007fc4 <siprintf>
        UART_Print(TxBuffer);
 80006ee:	4830      	ldr	r0, [pc, #192]	@ (80007b0 <writeSDFILE+0x124>)
 80006f0:	f7ff ff5e 	bl	80005b0 <UART_Print>
        return FR_Status;
 80006f4:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80006f8:	f103 0307 	add.w	r3, r3, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	e04e      	b.n	800079e <writeSDFILE+0x112>
    }

    FR_Status = f_lseek(&Fil, f_size(&Fil));
 8000700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000704:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8000708:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800070c:	3b14      	subs	r3, #20
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f007 f838 	bl	8007786 <f_lseek>
 8000716:	4603      	mov	r3, r0
 8000718:	f507 5288 	add.w	r2, r7, #4352	@ 0x1100
 800071c:	f102 0207 	add.w	r2, r2, #7
 8000720:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 8000722:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8000726:	f103 0307 	add.w	r3, r3, #7
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d01c      	beq.n	800076a <writeSDFILE+0xde>
    {
        sprintf(TxBuffer, "Error! While Seeking to End of File '%s', Error Code: (%i)\r\n", filename, FR_Status);
 8000730:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8000734:	f103 0307 	add.w	r3, r3, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800073e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000742:	6812      	ldr	r2, [r2, #0]
 8000744:	491b      	ldr	r1, [pc, #108]	@ (80007b4 <writeSDFILE+0x128>)
 8000746:	481a      	ldr	r0, [pc, #104]	@ (80007b0 <writeSDFILE+0x124>)
 8000748:	f007 fc3c 	bl	8007fc4 <siprintf>
        UART_Print(TxBuffer);
 800074c:	4818      	ldr	r0, [pc, #96]	@ (80007b0 <writeSDFILE+0x124>)
 800074e:	f7ff ff2f 	bl	80005b0 <UART_Print>
        f_close(&Fil);
 8000752:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000756:	3b14      	subs	r3, #20
 8000758:	4618      	mov	r0, r3
 800075a:	f006 ffea 	bl	8007732 <f_close>
        return FR_Status;
 800075e:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 8000762:	f103 0307 	add.w	r3, r3, #7
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	e019      	b.n	800079e <writeSDFILE+0x112>
    }

    sprintf(TxBuffer, "File '%s' Opened Successfully! Writing Data..\r\n\n", filename);
 800076a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800076e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4910      	ldr	r1, [pc, #64]	@ (80007b8 <writeSDFILE+0x12c>)
 8000776:	480e      	ldr	r0, [pc, #56]	@ (80007b0 <writeSDFILE+0x124>)
 8000778:	f007 fc24 	bl	8007fc4 <siprintf>
    UART_Print(TxBuffer);
 800077c:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <writeSDFILE+0x124>)
 800077e:	f7ff ff17 	bl	80005b0 <UART_Print>

    f_puts("ROAD ARROW!\r\n", &Fil);
 8000782:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000786:	3b14      	subs	r3, #20
 8000788:	4619      	mov	r1, r3
 800078a:	480c      	ldr	r0, [pc, #48]	@ (80007bc <writeSDFILE+0x130>)
 800078c:	f007 fad4 	bl	8007d38 <f_puts>
    f_close(&Fil);
 8000790:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000794:	3b14      	subs	r3, #20
 8000796:	4618      	mov	r0, r3
 8000798:	f006 ffcb 	bl	8007732 <f_close>

    return FR_OK;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	f507 5788 	add.w	r7, r7, #4352	@ 0x1100
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	080089d4 	.word	0x080089d4
 80007b0:	2000065c 	.word	0x2000065c
 80007b4:	08008a14 	.word	0x08008a14
 80007b8:	08008a54 	.word	0x08008a54
 80007bc:	08008a88 	.word	0x08008a88

080007c0 <readSDFILE>:

static FRESULT readSDFILE(const char *filename)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	f5ad 5d88 	sub.w	sp, sp, #4352	@ 0x1100
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80007d2:	6018      	str	r0, [r3, #0]
    FRESULT FR_Status;
    FIL Fil;
    char RW_Buffer[200];

    FR_Status = f_open(&Fil, filename, FA_READ);
 80007d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007d8:	f5a3 7182 	sub.w	r1, r3, #260	@ 0x104
 80007dc:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 80007e0:	3b14      	subs	r3, #20
 80007e2:	2201      	movs	r2, #1
 80007e4:	6809      	ldr	r1, [r1, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f006 fa6a 	bl	8006cc0 <f_open>
 80007ec:	4603      	mov	r3, r0
 80007ee:	f507 5288 	add.w	r2, r7, #4352	@ 0x1100
 80007f2:	f102 0207 	add.w	r2, r2, #7
 80007f6:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 80007f8:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 80007fc:	f103 0307 	add.w	r3, r3, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d016      	beq.n	8000834 <readSDFILE+0x74>
    {
        sprintf(TxBuffer, "Error! While Opening File '%s' For Read.. Error Code: (%i)\r\n", filename, FR_Status);
 8000806:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 800080a:	f103 0307 	add.w	r3, r3, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000814:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000818:	6812      	ldr	r2, [r2, #0]
 800081a:	4920      	ldr	r1, [pc, #128]	@ (800089c <readSDFILE+0xdc>)
 800081c:	4820      	ldr	r0, [pc, #128]	@ (80008a0 <readSDFILE+0xe0>)
 800081e:	f007 fbd1 	bl	8007fc4 <siprintf>
        UART_Print(TxBuffer);
 8000822:	481f      	ldr	r0, [pc, #124]	@ (80008a0 <readSDFILE+0xe0>)
 8000824:	f7ff fec4 	bl	80005b0 <UART_Print>
        return FR_Status;
 8000828:	f507 5388 	add.w	r3, r7, #4352	@ 0x1100
 800082c:	f103 0307 	add.w	r3, r3, #7
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	e02d      	b.n	8000890 <readSDFILE+0xd0>
    }

    sprintf(TxBuffer, "Reading File '%s'...\r\n", filename);
 8000834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4919      	ldr	r1, [pc, #100]	@ (80008a4 <readSDFILE+0xe4>)
 8000840:	4817      	ldr	r0, [pc, #92]	@ (80008a0 <readSDFILE+0xe0>)
 8000842:	f007 fbbf 	bl	8007fc4 <siprintf>
    UART_Print(TxBuffer);
 8000846:	4816      	ldr	r0, [pc, #88]	@ (80008a0 <readSDFILE+0xe0>)
 8000848:	f7ff feb2 	bl	80005b0 <UART_Print>

    while (f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil))
 800084c:	e005      	b.n	800085a <readSDFILE+0x9a>
    {
        UART_Print(RW_Buffer);
 800084e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000852:	3b1c      	subs	r3, #28
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff feab 	bl	80005b0 <UART_Print>
    while (f_gets(RW_Buffer, sizeof(RW_Buffer), &Fil))
 800085a:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 800085e:	3a14      	subs	r2, #20
 8000860:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000864:	3b1c      	subs	r3, #28
 8000866:	21c8      	movs	r1, #200	@ 0xc8
 8000868:	4618      	mov	r0, r3
 800086a:	f007 f9b0 	bl	8007bce <f_gets>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1ec      	bne.n	800084e <readSDFILE+0x8e>
    }

    f_close(&Fil);
 8000874:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000878:	3b14      	subs	r3, #20
 800087a:	4618      	mov	r0, r3
 800087c:	f006 ff59 	bl	8007732 <f_close>
    sprintf(TxBuffer, "File Closed! \r\n\n");
 8000880:	4909      	ldr	r1, [pc, #36]	@ (80008a8 <readSDFILE+0xe8>)
 8000882:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <readSDFILE+0xe0>)
 8000884:	f007 fb9e 	bl	8007fc4 <siprintf>
    UART_Print(TxBuffer);
 8000888:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <readSDFILE+0xe0>)
 800088a:	f7ff fe91 	bl	80005b0 <UART_Print>

    return FR_OK;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	f507 5788 	add.w	r7, r7, #4352	@ 0x1100
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	08008a98 	.word	0x08008a98
 80008a0:	2000065c 	.word	0x2000065c
 80008a4:	08008ad8 	.word	0x08008ad8
 80008a8:	08008af0 	.word	0x08008af0

080008ac <SD_Card_Test>:




static void SD_Card_Test(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 80008b2:	af00      	add	r7, sp, #0
    FATFS FatFs;
    FRESULT FR_Status;

    // Mountuj SD karticu
    FR_Status = mounSDtFile(&FatFs);
 80008b4:	463b      	mov	r3, r7
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fe8e 	bl	80005d8 <mounSDtFile>
 80008bc:	4603      	mov	r3, r0
 80008be:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80008c2:	f102 021b 	add.w	r2, r2, #27
 80008c6:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 80008c8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80008cc:	f103 031b 	add.w	r3, r3, #27
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d148      	bne.n	8000968 <SD_Card_Test+0xbc>
    {
        return; // Ako mount ne uspe, prekini
    }

    // Pisi u fajl 500 puta
    for (int i = 0; i < 500; i++)
 80008d6:	2300      	movs	r3, #0
 80008d8:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80008dc:	f102 021c 	add.w	r2, r2, #28
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	e01a      	b.n	800091a <SD_Card_Test+0x6e>
    {
        FR_Status = writeSDFILE("tocak124.txt");
 80008e4:	4825      	ldr	r0, [pc, #148]	@ (800097c <SD_Card_Test+0xd0>)
 80008e6:	f7ff fed1 	bl	800068c <writeSDFILE>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80008f0:	f102 021b 	add.w	r2, r2, #27
 80008f4:	7013      	strb	r3, [r2, #0]
        if (FR_Status != FR_OK)
 80008f6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80008fa:	f103 031b 	add.w	r3, r3, #27
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d133      	bne.n	800096c <SD_Card_Test+0xc0>
    for (int i = 0; i < 500; i++)
 8000904:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000908:	f103 031c 	add.w	r3, r3, #28
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3301      	adds	r3, #1
 8000910:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000914:	f102 021c 	add.w	r2, r2, #28
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800091e:	f103 031c 	add.w	r3, r3, #28
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000928:	dbdc      	blt.n	80008e4 <SD_Card_Test+0x38>
            return; // Ako pisanje ne uspe, prekini
        }
    }

    // Citanje fajla
    FR_Status = readSDFILE("tocak124.txt");
 800092a:	4814      	ldr	r0, [pc, #80]	@ (800097c <SD_Card_Test+0xd0>)
 800092c:	f7ff ff48 	bl	80007c0 <readSDFILE>
 8000930:	4603      	mov	r3, r0
 8000932:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000936:	f102 021b 	add.w	r2, r2, #27
 800093a:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 800093c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8000940:	f103 031b 	add.w	r3, r3, #27
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d112      	bne.n	8000970 <SD_Card_Test+0xc4>
    {
        return; // Ako čitanje ne uspe, prekini
    }

    // Unmountuj SD karticu
    FR_Status = unmountSDFile();
 800094a:	f7ff fe73 	bl	8000634 <unmountSDFile>
 800094e:	4603      	mov	r3, r0
 8000950:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000954:	f102 021b 	add.w	r2, r2, #27
 8000958:	7013      	strb	r3, [r2, #0]
    if (FR_Status != FR_OK)
 800095a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800095e:	f103 031b 	add.w	r3, r3, #27
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	e004      	b.n	8000972 <SD_Card_Test+0xc6>
        return; // Ako mount ne uspe, prekini
 8000968:	bf00      	nop
 800096a:	e002      	b.n	8000972 <SD_Card_Test+0xc6>
            return; // Ako pisanje ne uspe, prekini
 800096c:	bf00      	nop
 800096e:	e000      	b.n	8000972 <SD_Card_Test+0xc6>
        return; // Ako čitanje ne uspe, prekini
 8000970:	bf00      	nop
    {
        return; // Ako unmount ne uspe, prekini
    }
}
 8000972:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	08008b04 	.word	0x08008b04

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b0b2      	sub	sp, #200	@ 0xc8
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000986:	f000 fc1b 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098a:	f000 f815 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098e:	f000 f939 	bl	8000c04 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000992:	f000 f8dd 	bl	8000b50 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000996:	f000 f905 	bl	8000ba4 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 800099a:	f000 f879 	bl	8000a90 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800099e:	f000 f8ad 	bl	8000afc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80009a2:	f003 fa3b 	bl	8003e1c <MX_FATFS_Init>
  char RW_Buffer[200];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SD_Card_Test();
 80009a6:	f7ff ff81 	bl	80008ac <SD_Card_Test>
  HAL_Delay(1000);
 80009aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ae:	f000 fc79 	bl	80012a4 <HAL_Delay>
  while (1)
 80009b2:	bf00      	nop
 80009b4:	e7fd      	b.n	80009b2 <main+0x32>
	...

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	@ 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	2234      	movs	r2, #52	@ 0x34
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f007 fb1c 	bl	8008004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	4b29      	ldr	r3, [pc, #164]	@ (8000a88 <SystemClock_Config+0xd0>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e4:	4a28      	ldr	r2, [pc, #160]	@ (8000a88 <SystemClock_Config+0xd0>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ec:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <SystemClock_Config+0xd0>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f8:	2300      	movs	r3, #0
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	4b23      	ldr	r3, [pc, #140]	@ (8000a8c <SystemClock_Config+0xd4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a22      	ldr	r2, [pc, #136]	@ (8000a8c <SystemClock_Config+0xd4>)
 8000a02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <SystemClock_Config+0xd4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a18:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 384;
 8000a2c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000a30:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a32:	2304      	movs	r3, #4
 8000a34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000a36:	2308      	movs	r3, #8
 8000a38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fc0e 	bl	8002264 <HAL_RCC_OscConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a4e:	f000 f99b 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	230f      	movs	r3, #15
 8000a54:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2302      	movs	r3, #2
 8000a58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	2103      	movs	r1, #3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f80a 	bl	8001a88 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a7a:	f000 f985 	bl	8000d88 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3750      	adds	r7, #80	@ 0x50
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a94:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000a96:	4a18      	ldr	r2, [pc, #96]	@ (8000af8 <MX_SPI1_Init+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000a9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ac0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000ac4:	2218      	movs	r2, #24
 8000ac6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000adc:	220a      	movs	r2, #10
 8000ade:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <MX_SPI1_Init+0x64>)
 8000ae2:	f001 fe43 	bl	800276c <HAL_SPI_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000aec:	f000 f94c 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000090 	.word	0x20000090
 8000af8:	40013000 	.word	0x40013000

08000afc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	@ (8000b4c <MX_USART2_UART_Init+0x50>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <MX_USART2_UART_Init+0x4c>)
 8000b34:	f002 fa6c 	bl	8003010 <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b3e:	f000 f923 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000e8 	.word	0x200000e8
 8000b4c:	40004400 	.word	0x40004400

08000b50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <MX_USART3_UART_Init+0x50>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_USART3_UART_Init+0x4c>)
 8000b88:	f002 fa42 	bl	8003010 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b92:	f000 f8f9 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000130 	.word	0x20000130
 8000ba0:	40004800 	.word	0x40004800

08000ba4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000baa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000bae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb2:	2206      	movs	r2, #6
 8000bb4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb8:	2202      	movs	r2, #2
 8000bba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bee:	f000 fe10 	bl	8001812 <HAL_PCD_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 f8c6 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000178 	.word	0x20000178

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	@ 0x30
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	4b55      	ldr	r3, [pc, #340]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a54      	ldr	r2, [pc, #336]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b52      	ldr	r3, [pc, #328]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a4d      	ldr	r2, [pc, #308]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b4b      	ldr	r3, [pc, #300]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b47      	ldr	r3, [pc, #284]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a46      	ldr	r2, [pc, #280]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b44      	ldr	r3, [pc, #272]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b40      	ldr	r3, [pc, #256]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a3f      	ldr	r2, [pc, #252]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	4b39      	ldr	r3, [pc, #228]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a38      	ldr	r2, [pc, #224]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b36      	ldr	r3, [pc, #216]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b32      	ldr	r3, [pc, #200]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a31      	ldr	r2, [pc, #196]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d74 <MX_GPIO_Init+0x170>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	482c      	ldr	r0, [pc, #176]	@ (8000d78 <MX_GPIO_Init+0x174>)
 8000cc8:	f000 fd8a 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000cd2:	482a      	ldr	r0, [pc, #168]	@ (8000d7c <MX_GPIO_Init+0x178>)
 8000cd4:	f000 fd84 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2140      	movs	r1, #64	@ 0x40
 8000cdc:	4828      	ldr	r0, [pc, #160]	@ (8000d80 <MX_GPIO_Init+0x17c>)
 8000cde:	f000 fd7f 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4822      	ldr	r0, [pc, #136]	@ (8000d84 <MX_GPIO_Init+0x180>)
 8000cfa:	f000 fbdd 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000cfe:	2310      	movs	r3, #16
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4818      	ldr	r0, [pc, #96]	@ (8000d78 <MX_GPIO_Init+0x174>)
 8000d16:	f000 fbcf 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d1a:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4812      	ldr	r0, [pc, #72]	@ (8000d7c <MX_GPIO_Init+0x178>)
 8000d34:	f000 fbc0 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d38:	2340      	movs	r3, #64	@ 0x40
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <MX_GPIO_Init+0x17c>)
 8000d50:	f000 fbb2 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <MX_GPIO_Init+0x17c>)
 8000d68:	f000 fba6 	bl	80014b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6c:	bf00      	nop
 8000d6e:	3730      	adds	r7, #48	@ 0x30
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40021800 	.word	0x40021800
 8000d84:	40020800 	.word	0x40020800

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <Error_Handler+0x8>

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da2:	4a0f      	ldr	r2, [pc, #60]	@ (8000de0 <HAL_MspInit+0x4c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000daa:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	@ 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a19      	ldr	r2, [pc, #100]	@ (8000e68 <HAL_SPI_MspInit+0x84>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d12b      	bne.n	8000e5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	4a17      	ldr	r2, [pc, #92]	@ (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a10      	ldr	r2, [pc, #64]	@ (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e3e:	23e0      	movs	r3, #224	@ 0xe0
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e4e:	2305      	movs	r3, #5
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <HAL_SPI_MspInit+0x8c>)
 8000e5a:	f000 fb2d 	bl	80014b8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	@ 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40013000 	.word	0x40013000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000

08000e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	@ 0x30
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a32      	ldr	r2, [pc, #200]	@ (8000f5c <HAL_UART_MspInit+0xe8>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d12c      	bne.n	8000ef0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	4b31      	ldr	r3, [pc, #196]	@ (8000f60 <HAL_UART_MspInit+0xec>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	4a30      	ldr	r2, [pc, #192]	@ (8000f60 <HAL_UART_MspInit+0xec>)
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f60 <HAL_UART_MspInit+0xec>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <HAL_UART_MspInit+0xec>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a29      	ldr	r2, [pc, #164]	@ (8000f60 <HAL_UART_MspInit+0xec>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <HAL_UART_MspInit+0xec>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ece:	230c      	movs	r3, #12
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ede:	2307      	movs	r3, #7
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	481e      	ldr	r0, [pc, #120]	@ (8000f64 <HAL_UART_MspInit+0xf0>)
 8000eea:	f000 fae5 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eee:	e031      	b.n	8000f54 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f68 <HAL_UART_MspInit+0xf4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12c      	bne.n	8000f54 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <HAL_UART_MspInit+0xec>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	4a17      	ldr	r2, [pc, #92]	@ (8000f60 <HAL_UART_MspInit+0xec>)
 8000f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <HAL_UART_MspInit+0xec>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <HAL_UART_MspInit+0xec>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a10      	ldr	r2, [pc, #64]	@ (8000f60 <HAL_UART_MspInit+0xec>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <HAL_UART_MspInit+0xec>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f44:	2307      	movs	r3, #7
 8000f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <HAL_UART_MspInit+0xf8>)
 8000f50:	f000 fab2 	bl	80014b8 <HAL_GPIO_Init>
}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	@ 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	40004800 	.word	0x40004800
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b098      	sub	sp, #96	@ 0x60
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 0310 	add.w	r3, r7, #16
 8000f8c:	223c      	movs	r2, #60	@ 0x3c
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f007 f837 	bl	8008004 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f9e:	d14d      	bne.n	800103c <HAL_PCD_MspInit+0xcc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 ff8b 	bl	8001ec8 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8000fb8:	f7ff fee6 	bl	8000d88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <HAL_PCD_MspInit+0xd4>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8001044 <HAL_PCD_MspInit+0xd4>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <HAL_PCD_MspInit+0xd4>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fd8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fea:	230a      	movs	r3, #10
 8000fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4814      	ldr	r0, [pc, #80]	@ (8001048 <HAL_PCD_MspInit+0xd8>)
 8000ff6:	f000 fa5f 	bl	80014b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ffa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001000:	2300      	movs	r3, #0
 8001002:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800100c:	4619      	mov	r1, r3
 800100e:	480e      	ldr	r0, [pc, #56]	@ (8001048 <HAL_PCD_MspInit+0xd8>)
 8001010:	f000 fa52 	bl	80014b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <HAL_PCD_MspInit+0xd4>)
 8001016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001018:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <HAL_PCD_MspInit+0xd4>)
 800101a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800101e:	6353      	str	r3, [r2, #52]	@ 0x34
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <HAL_PCD_MspInit+0xd4>)
 8001026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001028:	4a06      	ldr	r2, [pc, #24]	@ (8001044 <HAL_PCD_MspInit+0xd4>)
 800102a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <HAL_PCD_MspInit+0xd4>)
 8001032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800103c:	bf00      	nop
 800103e:	3760      	adds	r7, #96	@ 0x60
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	(Timer1 > 0) ? (Timer1--) : (Timer1);
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <SysTick_Handler+0x34>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <SysTick_Handler+0x18>
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <SysTick_Handler+0x34>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <SysTick_Handler+0x34>)
 80010b6:	801a      	strh	r2, [r3, #0]
	(Timer2 > 0) ? (Timer2--) : (Timer2);
 80010b8:	4b07      	ldr	r3, [pc, #28]	@ (80010d8 <SysTick_Handler+0x38>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <SysTick_Handler+0x2c>
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Handler+0x38>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <SysTick_Handler+0x38>)
 80010ca:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010cc:	f000 f8ca 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000768 	.word	0x20000768
 80010d8:	2000076a 	.word	0x2000076a

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	@ (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	@ (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f006 ff82 	bl	8008014 <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	@ (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20040000 	.word	0x20040000
 800113c:	00000400 	.word	0x00000400
 8001140:	20000758 	.word	0x20000758
 8001144:	20000af0 	.word	0x20000af0

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001170:	f7ff ffea 	bl	8001148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001176:	490d      	ldr	r1, [pc, #52]	@ (80011ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001178:	4a0d      	ldr	r2, [pc, #52]	@ (80011b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800118c:	4c0a      	ldr	r4, [pc, #40]	@ (80011b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119a:	f006 ff41 	bl	8008020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119e:	f7ff fbef 	bl	8000980 <main>
  bx  lr    
 80011a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011a4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011b0:	08008ff8 	.word	0x08008ff8
  ldr r2, =_sbss
 80011b4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011b8:	20000aec 	.word	0x20000aec

080011bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <HAL_Init+0x40>)
 80011ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <HAL_Init+0x40>)
 80011d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	@ (8001200 <HAL_Init+0x40>)
 80011e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f931 	bl	8001450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 f808 	bl	8001204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fdce 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_InitTick+0x54>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <HAL_InitTick+0x58>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4619      	mov	r1, r3
 8001216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121a:	fbb3 f3f1 	udiv	r3, r3, r1
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f93b 	bl	800149e <HAL_SYSTICK_Config>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e00e      	b.n	8001250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d80a      	bhi.n	800124e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f000 f911 	bl	8001466 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001244:	4a06      	ldr	r2, [pc, #24]	@ (8001260 <HAL_InitTick+0x5c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000000 	.word	0x20000000
 800125c:	20000008 	.word	0x20000008
 8001260:	20000004 	.word	0x20000004

08001264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_IncTick+0x20>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_IncTick+0x24>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <HAL_IncTick+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008
 8001288:	2000075c 	.word	0x2000075c

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <HAL_GetTick+0x14>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	2000075c 	.word	0x2000075c

080012a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ac:	f7ff ffee 	bl	800128c <HAL_GetTick>
 80012b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012bc:	d005      	beq.n	80012ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_Delay+0x44>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	461a      	mov	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ca:	bf00      	nop
 80012cc:	f7ff ffde 	bl	800128c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8f7      	bhi.n	80012cc <HAL_Delay+0x28>
  {
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008

080012ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001308:	4013      	ands	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <__NVIC_SetPriorityGrouping+0x44>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001338:	4b04      	ldr	r3, [pc, #16]	@ (800134c <__NVIC_GetPriorityGrouping+0x18>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	f003 0307 	and.w	r3, r3, #7
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	@ (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	@ (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	@ 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	@ 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800141c:	d301      	bcc.n	8001422 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141e:	2301      	movs	r3, #1
 8001420:	e00f      	b.n	8001442 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <SysTick_Config+0x40>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142a:	210f      	movs	r1, #15
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f7ff ff8e 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001434:	4b05      	ldr	r3, [pc, #20]	@ (800144c <SysTick_Config+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143a:	4b04      	ldr	r3, [pc, #16]	@ (800144c <SysTick_Config+0x40>)
 800143c:	2207      	movs	r2, #7
 800143e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	e000e010 	.word	0xe000e010

08001450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff47 	bl	80012ec <__NVIC_SetPriorityGrouping>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001478:	f7ff ff5c 	bl	8001334 <__NVIC_GetPriorityGrouping>
 800147c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7ff ff8e 	bl	80013a4 <NVIC_EncodePriority>
 8001488:	4602      	mov	r2, r0
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff5d 	bl	8001350 <__NVIC_SetPriority>
}
 8001496:	bf00      	nop
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffb0 	bl	800140c <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	@ 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	e165      	b.n	80017a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d4:	2201      	movs	r2, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	f040 8154 	bne.w	800179a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d005      	beq.n	800150a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001506:	2b02      	cmp	r3, #2
 8001508:	d130      	bne.n	800156c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	091b      	lsrs	r3, r3, #4
 8001556:	f003 0201 	and.w	r2, r3, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b03      	cmp	r3, #3
 8001576:	d017      	beq.n	80015a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d123      	bne.n	80015fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	08da      	lsrs	r2, r3, #3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3208      	adds	r2, #8
 80015f6:	69b9      	ldr	r1, [r7, #24]
 80015f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	2203      	movs	r2, #3
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0203 	and.w	r2, r3, #3
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80ae 	beq.w	800179a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b5d      	ldr	r3, [pc, #372]	@ (80017b8 <HAL_GPIO_Init+0x300>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001646:	4a5c      	ldr	r2, [pc, #368]	@ (80017b8 <HAL_GPIO_Init+0x300>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800164c:	6453      	str	r3, [r2, #68]	@ 0x44
 800164e:	4b5a      	ldr	r3, [pc, #360]	@ (80017b8 <HAL_GPIO_Init+0x300>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800165a:	4a58      	ldr	r2, [pc, #352]	@ (80017bc <HAL_GPIO_Init+0x304>)
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	220f      	movs	r2, #15
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4f      	ldr	r2, [pc, #316]	@ (80017c0 <HAL_GPIO_Init+0x308>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d025      	beq.n	80016d2 <HAL_GPIO_Init+0x21a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4e      	ldr	r2, [pc, #312]	@ (80017c4 <HAL_GPIO_Init+0x30c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d01f      	beq.n	80016ce <HAL_GPIO_Init+0x216>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4d      	ldr	r2, [pc, #308]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d019      	beq.n	80016ca <HAL_GPIO_Init+0x212>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4c      	ldr	r2, [pc, #304]	@ (80017cc <HAL_GPIO_Init+0x314>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0x20e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4b      	ldr	r2, [pc, #300]	@ (80017d0 <HAL_GPIO_Init+0x318>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00d      	beq.n	80016c2 <HAL_GPIO_Init+0x20a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4a      	ldr	r2, [pc, #296]	@ (80017d4 <HAL_GPIO_Init+0x31c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <HAL_GPIO_Init+0x206>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a49      	ldr	r2, [pc, #292]	@ (80017d8 <HAL_GPIO_Init+0x320>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d101      	bne.n	80016ba <HAL_GPIO_Init+0x202>
 80016b6:	2306      	movs	r3, #6
 80016b8:	e00c      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016ba:	2307      	movs	r3, #7
 80016bc:	e00a      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016be:	2305      	movs	r3, #5
 80016c0:	e008      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016c2:	2304      	movs	r3, #4
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016c6:	2303      	movs	r3, #3
 80016c8:	e004      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x21c>
 80016d2:	2300      	movs	r3, #0
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	f002 0203 	and.w	r2, r2, #3
 80016da:	0092      	lsls	r2, r2, #2
 80016dc:	4093      	lsls	r3, r2
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e4:	4935      	ldr	r1, [pc, #212]	@ (80017bc <HAL_GPIO_Init+0x304>)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f2:	4b3a      	ldr	r3, [pc, #232]	@ (80017dc <HAL_GPIO_Init+0x324>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001716:	4a31      	ldr	r2, [pc, #196]	@ (80017dc <HAL_GPIO_Init+0x324>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800171c:	4b2f      	ldr	r3, [pc, #188]	@ (80017dc <HAL_GPIO_Init+0x324>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001740:	4a26      	ldr	r2, [pc, #152]	@ (80017dc <HAL_GPIO_Init+0x324>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001746:	4b25      	ldr	r3, [pc, #148]	@ (80017dc <HAL_GPIO_Init+0x324>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176a:	4a1c      	ldr	r2, [pc, #112]	@ (80017dc <HAL_GPIO_Init+0x324>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001770:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <HAL_GPIO_Init+0x324>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001794:	4a11      	ldr	r2, [pc, #68]	@ (80017dc <HAL_GPIO_Init+0x324>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3301      	adds	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	f67f ae96 	bls.w	80014d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3724      	adds	r7, #36	@ 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40013800 	.word	0x40013800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40021400 	.word	0x40021400
 80017d8:	40021800 	.word	0x40021800
 80017dc:	40013c00 	.word	0x40013c00

080017e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
 80017ec:	4613      	mov	r3, r2
 80017ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f0:	787b      	ldrb	r3, [r7, #1]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017fc:	e003      	b.n	8001806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	041a      	lsls	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af02      	add	r7, sp, #8
 8001818:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e108      	b.n	8001a36 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d106      	bne.n	8001844 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fb96 	bl	8000f70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2203      	movs	r2, #3
 8001848:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001852:	d102      	bne.n	800185a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f002 f846 	bl	80038f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7c1a      	ldrb	r2, [r3, #16]
 800186c:	f88d 2000 	strb.w	r2, [sp]
 8001870:	3304      	adds	r3, #4
 8001872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001874:	f001 ffd8 	bl	8003828 <USB_CoreInit>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2202      	movs	r2, #2
 8001882:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0d5      	b.n	8001a36 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f002 f83e 	bl	8003912 <USB_SetCurrentMode>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0c6      	b.n	8001a36 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	e04a      	b.n	8001944 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	3315      	adds	r3, #21
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	3314      	adds	r3, #20
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018d6:	7bfa      	ldrb	r2, [r7, #15]
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	b298      	uxth	r0, r3
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	332e      	adds	r3, #46	@ 0x2e
 80018ea:	4602      	mov	r2, r0
 80018ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	3318      	adds	r3, #24
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001902:	7bfa      	ldrb	r2, [r7, #15]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4413      	add	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	331c      	adds	r3, #28
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	3320      	adds	r3, #32
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	3324      	adds	r3, #36	@ 0x24
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	3301      	adds	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	791b      	ldrb	r3, [r3, #4]
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	429a      	cmp	r2, r3
 800194c:	d3af      	bcc.n	80018ae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	e044      	b.n	80019de <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001980:	7bfa      	ldrb	r2, [r7, #15]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019ac:	7bfa      	ldrb	r2, [r7, #15]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	3301      	adds	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	791b      	ldrb	r3, [r3, #4]
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d3b5      	bcc.n	8001954 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7c1a      	ldrb	r2, [r3, #16]
 80019f0:	f88d 2000 	strb.w	r2, [sp]
 80019f4:	3304      	adds	r3, #4
 80019f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019f8:	f001 ffd8 	bl	80039ac <USB_DevInit>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2202      	movs	r2, #2
 8001a06:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e013      	b.n	8001a36 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7b1b      	ldrb	r3, [r3, #12]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d102      	bne.n	8001a2a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f80a 	bl	8001a3e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 f993 	bl	8003d5a <USB_DevDisconnect>

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a70:	f043 0303 	orr.w	r3, r3, #3
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0cc      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b68      	ldr	r3, [pc, #416]	@ (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d90c      	bls.n	8001ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b65      	ldr	r3, [pc, #404]	@ (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b63      	ldr	r3, [pc, #396]	@ (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0b8      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d020      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001adc:	4b59      	ldr	r3, [pc, #356]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a58      	ldr	r2, [pc, #352]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ae6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af4:	4b53      	ldr	r3, [pc, #332]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a52      	ldr	r2, [pc, #328]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b00:	4b50      	ldr	r3, [pc, #320]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	494d      	ldr	r1, [pc, #308]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d044      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	4b47      	ldr	r3, [pc, #284]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d119      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e07f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b46:	4b3f      	ldr	r3, [pc, #252]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e06f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	4b3b      	ldr	r3, [pc, #236]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e067      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b66:	4b37      	ldr	r3, [pc, #220]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f023 0203 	bic.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4934      	ldr	r1, [pc, #208]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b78:	f7ff fb88 	bl	800128c <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7ff fb84 	bl	800128c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e04f      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	4b2b      	ldr	r3, [pc, #172]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 020c 	and.w	r2, r3, #12
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1eb      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d20c      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b22      	ldr	r3, [pc, #136]	@ (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbe:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e032      	b.n	8001c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	4916      	ldr	r1, [pc, #88]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d009      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	490e      	ldr	r1, [pc, #56]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c0e:	f000 f821 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001c12:	4602      	mov	r2, r0
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	490a      	ldr	r1, [pc, #40]	@ (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	5ccb      	ldrb	r3, [r1, r3]
 8001c22:	fa22 f303 	lsr.w	r3, r2, r3
 8001c26:	4a09      	ldr	r2, [pc, #36]	@ (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c2a:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fae8 	bl	8001204 <HAL_InitTick>

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00
 8001c44:	40023800 	.word	0x40023800
 8001c48:	08008b5c 	.word	0x08008b5c
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c58:	b094      	sub	sp, #80	@ 0x50
 8001c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c6c:	4b79      	ldr	r3, [pc, #484]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d00d      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x40>
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	f200 80e1 	bhi.w	8001e40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x34>
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d003      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c86:	e0db      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c88:	4b73      	ldr	r3, [pc, #460]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c8c:	e0db      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c8e:	4b73      	ldr	r3, [pc, #460]	@ (8001e5c <HAL_RCC_GetSysClockFreq+0x208>)
 8001c90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c92:	e0d8      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c94:	4b6f      	ldr	r3, [pc, #444]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d063      	beq.n	8001d72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001caa:	4b6a      	ldr	r3, [pc, #424]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	099b      	lsrs	r3, r3, #6
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	462b      	mov	r3, r5
 8001cca:	f04f 0000 	mov.w	r0, #0
 8001cce:	f04f 0100 	mov.w	r1, #0
 8001cd2:	0159      	lsls	r1, r3, #5
 8001cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd8:	0150      	lsls	r0, r2, #5
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4621      	mov	r1, r4
 8001ce0:	1a51      	subs	r1, r2, r1
 8001ce2:	6139      	str	r1, [r7, #16]
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cf8:	4659      	mov	r1, fp
 8001cfa:	018b      	lsls	r3, r1, #6
 8001cfc:	4651      	mov	r1, sl
 8001cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d02:	4651      	mov	r1, sl
 8001d04:	018a      	lsls	r2, r1, #6
 8001d06:	4651      	mov	r1, sl
 8001d08:	ebb2 0801 	subs.w	r8, r2, r1
 8001d0c:	4659      	mov	r1, fp
 8001d0e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d26:	4690      	mov	r8, r2
 8001d28:	4699      	mov	r9, r3
 8001d2a:	4623      	mov	r3, r4
 8001d2c:	eb18 0303 	adds.w	r3, r8, r3
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	462b      	mov	r3, r5
 8001d34:	eb49 0303 	adc.w	r3, r9, r3
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d46:	4629      	mov	r1, r5
 8001d48:	024b      	lsls	r3, r1, #9
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d50:	4621      	mov	r1, r4
 8001d52:	024a      	lsls	r2, r1, #9
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d64:	f7fe faac 	bl	80002c0 <__aeabi_uldivmod>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d70:	e058      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d72:	4b38      	ldr	r3, [pc, #224]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	099b      	lsrs	r3, r3, #6
 8001d78:	2200      	movs	r2, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	2300      	movs	r3, #0
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d8c:	4642      	mov	r2, r8
 8001d8e:	464b      	mov	r3, r9
 8001d90:	f04f 0000 	mov.w	r0, #0
 8001d94:	f04f 0100 	mov.w	r1, #0
 8001d98:	0159      	lsls	r1, r3, #5
 8001d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d9e:	0150      	lsls	r0, r2, #5
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4641      	mov	r1, r8
 8001da6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001daa:	4649      	mov	r1, r9
 8001dac:	eb63 0b01 	sbc.w	fp, r3, r1
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dc4:	ebb2 040a 	subs.w	r4, r2, sl
 8001dc8:	eb63 050b 	sbc.w	r5, r3, fp
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	00eb      	lsls	r3, r5, #3
 8001dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dda:	00e2      	lsls	r2, r4, #3
 8001ddc:	4614      	mov	r4, r2
 8001dde:	461d      	mov	r5, r3
 8001de0:	4643      	mov	r3, r8
 8001de2:	18e3      	adds	r3, r4, r3
 8001de4:	603b      	str	r3, [r7, #0]
 8001de6:	464b      	mov	r3, r9
 8001de8:	eb45 0303 	adc.w	r3, r5, r3
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	028b      	lsls	r3, r1, #10
 8001dfe:	4621      	mov	r1, r4
 8001e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e04:	4621      	mov	r1, r4
 8001e06:	028a      	lsls	r2, r1, #10
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	61fa      	str	r2, [r7, #28]
 8001e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e18:	f7fe fa52 	bl	80002c0 <__aeabi_uldivmod>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4613      	mov	r3, r2
 8001e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e24:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	0c1b      	lsrs	r3, r3, #16
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e3e:	e002      	b.n	8001e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3750      	adds	r7, #80	@ 0x50
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	00f42400 	.word	0x00f42400
 8001e5c:	007a1200 	.word	0x007a1200

08001e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b03      	ldr	r3, [pc, #12]	@ (8001e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000

08001e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e7c:	f7ff fff0 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0a9b      	lsrs	r3, r3, #10
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4903      	ldr	r1, [pc, #12]	@ (8001e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08008b6c 	.word	0x08008b6c

08001ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea4:	f7ff ffdc 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	0b5b      	lsrs	r3, r3, #13
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	4903      	ldr	r1, [pc, #12]	@ (8001ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb6:	5ccb      	ldrb	r3, [r1, r3]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	08008b6c 	.word	0x08008b6c

08001ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d010      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001ee8:	4b87      	ldr	r3, [pc, #540]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eee:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	4984      	ldr	r1, [pc, #528]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8001f06:	2301      	movs	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d010      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001f16:	4b7c      	ldr	r3, [pc, #496]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f1c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4978      	ldr	r1, [pc, #480]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8001f34:	2301      	movs	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8083 	beq.w	800204c <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	4b6f      	ldr	r3, [pc, #444]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f56:	4b6c      	ldr	r3, [pc, #432]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001f62:	4b6a      	ldr	r3, [pc, #424]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a69      	ldr	r2, [pc, #420]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f6e:	f7ff f98d 	bl	800128c <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f76:	f7ff f989 	bl	800128c <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e162      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001f88:	4b60      	ldr	r3, [pc, #384]	@ (800210c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f94:	4b5c      	ldr	r3, [pc, #368]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f9c:	60fb      	str	r3, [r7, #12]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d02f      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d028      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fb2:	4b55      	ldr	r3, [pc, #340]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fba:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fbc:	4b54      	ldr	r3, [pc, #336]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc2:	4b53      	ldr	r3, [pc, #332]	@ (8002110 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001fc8:	4a4f      	ldr	r2, [pc, #316]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001fce:	4b4e      	ldr	r3, [pc, #312]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d114      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001fda:	f7ff f957 	bl	800128c <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff f953 	bl	800128c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e12a      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x386>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff8:	4b43      	ldr	r3, [pc, #268]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0ee      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800200c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002010:	d10d      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002012:	4b3d      	ldr	r3, [pc, #244]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002026:	4938      	ldr	r1, [pc, #224]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
 800202c:	e005      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800202e:	4b36      	ldr	r3, [pc, #216]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4a35      	ldr	r2, [pc, #212]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002034:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002038:	6093      	str	r3, [r2, #8]
 800203a:	4b33      	ldr	r3, [pc, #204]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800203c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	4930      	ldr	r1, [pc, #192]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002048:	4313      	orrs	r3, r2
 800204a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d004      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 800205e:	4b2d      	ldr	r3, [pc, #180]	@ (8002114 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002060:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800206e:	4b26      	ldr	r3, [pc, #152]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002074:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207c:	4922      	ldr	r1, [pc, #136]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d011      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002090:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002096:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209e:	491a      	ldr	r1, [pc, #104]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020ae:	d101      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 80020b0:	2301      	movs	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80020c0:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	490e      	ldr	r1, [pc, #56]	@ (8002108 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d004      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b80      	cmp	r3, #128	@ 0x80
 80020e2:	f040 8091 	bne.w	8002208 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020ec:	f7ff f8ce 	bl	800128c <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020f2:	e013      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020f4:	f7ff f8ca 	bl	800128c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d90c      	bls.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0a3      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x386>
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	40007000 	.word	0x40007000
 8002110:	42470e40 	.word	0x42470e40
 8002114:	424711e0 	.word	0x424711e0
 8002118:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800211c:	4b4e      	ldr	r3, [pc, #312]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1e5      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002128:	4a4c      	ldr	r2, [pc, #304]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800212e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x27c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d023      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x290>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d019      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0320 	and.w	r3, r3, #32
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002160:	2b00      	cmp	r3, #0
 8002162:	d004      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800216c:	d00e      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002176:	2b00      	cmp	r3, #0
 8002178:	d019      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800218a:	d110      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	019b      	lsls	r3, r3, #6
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	071b      	lsls	r3, r3, #28
 80021a6:	492c      	ldr	r1, [pc, #176]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d010      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	019b      	lsls	r3, r3, #6
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	061b      	lsls	r3, r3, #24
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	071b      	lsls	r3, r3, #28
 80021d4:	4920      	ldr	r1, [pc, #128]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021dc:	4b20      	ldr	r3, [pc, #128]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021e2:	f7ff f853 	bl	800128c <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021ea:	f7ff f84f 	bl	800128c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e028      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x386>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021fc:	4b16      	ldr	r3, [pc, #88]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002214:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002216:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800221a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002222:	490d      	ldr	r1, [pc, #52]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002236:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002238:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800223c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002244:	4904      	ldr	r1, [pc, #16]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	424710d8 	.word	0x424710d8
 8002260:	42470068 	.word	0x42470068

08002264 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e273      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d075      	beq.n	800236e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002282:	4b88      	ldr	r3, [pc, #544]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b04      	cmp	r3, #4
 800228c:	d00c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800228e:	4b85      	ldr	r3, [pc, #532]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
        || \
 8002296:	2b08      	cmp	r3, #8
 8002298:	d112      	bne.n	80022c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229a:	4b82      	ldr	r3, [pc, #520]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022a6:	d10b      	bne.n	80022c0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	4b7e      	ldr	r3, [pc, #504]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d05b      	beq.n	800236c <HAL_RCC_OscConfig+0x108>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d157      	bne.n	800236c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e24e      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x74>
 80022ca:	4b76      	ldr	r3, [pc, #472]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a75      	ldr	r2, [pc, #468]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	e01d      	b.n	8002314 <HAL_RCC_OscConfig+0xb0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x98>
 80022e2:	4b70      	ldr	r3, [pc, #448]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6f      	ldr	r2, [pc, #444]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b6d      	ldr	r3, [pc, #436]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a6c      	ldr	r2, [pc, #432]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0xb0>
 80022fc:	4b69      	ldr	r3, [pc, #420]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a68      	ldr	r2, [pc, #416]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002302:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	4b66      	ldr	r3, [pc, #408]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a65      	ldr	r2, [pc, #404]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 800230e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe ffb6 	bl	800128c <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002324:	f7fe ffb2 	bl	800128c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b64      	cmp	r3, #100	@ 0x64
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e213      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b5b      	ldr	r3, [pc, #364]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0xc0>
 8002342:	e014      	b.n	800236e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe ffa2 	bl	800128c <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234c:	f7fe ff9e 	bl	800128c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	@ 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e1ff      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235e:	4b51      	ldr	r3, [pc, #324]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0xe8>
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800236c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d063      	beq.n	8002442 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800237a:	4b4a      	ldr	r3, [pc, #296]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002386:	4b47      	ldr	r3, [pc, #284]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
        || \
 800238e:	2b08      	cmp	r3, #8
 8002390:	d11c      	bne.n	80023cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002392:	4b44      	ldr	r3, [pc, #272]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d116      	bne.n	80023cc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	4b41      	ldr	r3, [pc, #260]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_RCC_OscConfig+0x152>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e1d3      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	4b3b      	ldr	r3, [pc, #236]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4937      	ldr	r1, [pc, #220]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	e03a      	b.n	8002442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d4:	4b34      	ldr	r3, [pc, #208]	@ (80024a8 <HAL_RCC_OscConfig+0x244>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe ff57 	bl	800128c <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe ff53 	bl	800128c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e1b4      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f4:	4b2b      	ldr	r3, [pc, #172]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	4b28      	ldr	r3, [pc, #160]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4925      	ldr	r1, [pc, #148]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002410:	4313      	orrs	r3, r2
 8002412:	600b      	str	r3, [r1, #0]
 8002414:	e015      	b.n	8002442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002416:	4b24      	ldr	r3, [pc, #144]	@ (80024a8 <HAL_RCC_OscConfig+0x244>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe ff36 	bl	800128c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002424:	f7fe ff32 	bl	800128c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e193      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002436:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d036      	beq.n	80024bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d016      	beq.n	8002484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <HAL_RCC_OscConfig+0x248>)
 8002458:	2201      	movs	r2, #1
 800245a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245c:	f7fe ff16 	bl	800128c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002464:	f7fe ff12 	bl	800128c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e173      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <HAL_RCC_OscConfig+0x240>)
 8002478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x200>
 8002482:	e01b      	b.n	80024bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002484:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_RCC_OscConfig+0x248>)
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248a:	f7fe feff 	bl	800128c <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002490:	e00e      	b.n	80024b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002492:	f7fe fefb 	bl	800128c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d907      	bls.n	80024b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e15c      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
 80024a4:	40023800 	.word	0x40023800
 80024a8:	42470000 	.word	0x42470000
 80024ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b0:	4b8a      	ldr	r3, [pc, #552]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 80024b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1ea      	bne.n	8002492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8097 	beq.w	80025f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ce:	4b83      	ldr	r3, [pc, #524]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10f      	bne.n	80024fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	4b7f      	ldr	r3, [pc, #508]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	4a7e      	ldr	r2, [pc, #504]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ea:	4b7c      	ldr	r3, [pc, #496]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f6:	2301      	movs	r3, #1
 80024f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	4b79      	ldr	r3, [pc, #484]	@ (80026e0 <HAL_RCC_OscConfig+0x47c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d118      	bne.n	8002538 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002506:	4b76      	ldr	r3, [pc, #472]	@ (80026e0 <HAL_RCC_OscConfig+0x47c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a75      	ldr	r2, [pc, #468]	@ (80026e0 <HAL_RCC_OscConfig+0x47c>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002512:	f7fe febb 	bl	800128c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251a:	f7fe feb7 	bl	800128c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e118      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	4b6c      	ldr	r3, [pc, #432]	@ (80026e0 <HAL_RCC_OscConfig+0x47c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d106      	bne.n	800254e <HAL_RCC_OscConfig+0x2ea>
 8002540:	4b66      	ldr	r3, [pc, #408]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	4a65      	ldr	r2, [pc, #404]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6713      	str	r3, [r2, #112]	@ 0x70
 800254c:	e01c      	b.n	8002588 <HAL_RCC_OscConfig+0x324>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b05      	cmp	r3, #5
 8002554:	d10c      	bne.n	8002570 <HAL_RCC_OscConfig+0x30c>
 8002556:	4b61      	ldr	r3, [pc, #388]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255a:	4a60      	ldr	r2, [pc, #384]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	6713      	str	r3, [r2, #112]	@ 0x70
 8002562:	4b5e      	ldr	r3, [pc, #376]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002566:	4a5d      	ldr	r2, [pc, #372]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6713      	str	r3, [r2, #112]	@ 0x70
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0x324>
 8002570:	4b5a      	ldr	r3, [pc, #360]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002574:	4a59      	ldr	r2, [pc, #356]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002576:	f023 0301 	bic.w	r3, r3, #1
 800257a:	6713      	str	r3, [r2, #112]	@ 0x70
 800257c:	4b57      	ldr	r3, [pc, #348]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002580:	4a56      	ldr	r2, [pc, #344]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002582:	f023 0304 	bic.w	r3, r3, #4
 8002586:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d015      	beq.n	80025bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe fe7c 	bl	800128c <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002596:	e00a      	b.n	80025ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7fe fe78 	bl	800128c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e0d7      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ae:	4b4b      	ldr	r3, [pc, #300]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0ee      	beq.n	8002598 <HAL_RCC_OscConfig+0x334>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7fe fe66 	bl	800128c <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c2:	e00a      	b.n	80025da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c4:	f7fe fe62 	bl	800128c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0c1      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025da:	4b40      	ldr	r3, [pc, #256]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1ee      	bne.n	80025c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d105      	bne.n	80025f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ec:	4b3b      	ldr	r3, [pc, #236]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	4a3a      	ldr	r2, [pc, #232]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 80025f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80ad 	beq.w	800275c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002602:	4b36      	ldr	r3, [pc, #216]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b08      	cmp	r3, #8
 800260c:	d060      	beq.n	80026d0 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d145      	bne.n	80026a2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002616:	4b33      	ldr	r3, [pc, #204]	@ (80026e4 <HAL_RCC_OscConfig+0x480>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fe36 	bl	800128c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe fe32 	bl	800128c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e093      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	4b29      	ldr	r3, [pc, #164]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	019b      	lsls	r3, r3, #6
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	085b      	lsrs	r3, r3, #1
 800265a:	3b01      	subs	r3, #1
 800265c:	041b      	lsls	r3, r3, #16
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	071b      	lsls	r3, r3, #28
 800266e:	491b      	ldr	r1, [pc, #108]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002674:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <HAL_RCC_OscConfig+0x480>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe fe07 	bl	800128c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002682:	f7fe fe03 	bl	800128c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e064      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002694:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x41e>
 80026a0:	e05c      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a2:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <HAL_RCC_OscConfig+0x480>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fdf0 	bl	800128c <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe fdec 	bl	800128c <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e04d      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <HAL_RCC_OscConfig+0x478>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x44c>
 80026ce:	e045      	b.n	800275c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e040      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40007000 	.word	0x40007000
 80026e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002768 <HAL_RCC_OscConfig+0x504>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d030      	beq.n	8002758 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d129      	bne.n	8002758 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270e:	429a      	cmp	r2, r3
 8002710:	d122      	bne.n	8002758 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002718:	4013      	ands	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800271e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002720:	4293      	cmp	r3, r2
 8002722:	d119      	bne.n	8002758 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	3b01      	subs	r3, #1
 8002732:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d10f      	bne.n	8002758 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002742:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d107      	bne.n	8002758 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800

0800276c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07b      	b.n	8002876 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	2b00      	cmp	r3, #0
 8002784:	d108      	bne.n	8002798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800278e:	d009      	beq.n	80027a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	61da      	str	r2, [r3, #28]
 8002796:	e005      	b.n	80027a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fb10 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002828:	ea42 0103 	orr.w	r1, r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	0c1b      	lsrs	r3, r3, #16
 8002842:	f003 0104 	and.w	r1, r3, #4
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	f003 0210 	and.w	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b088      	sub	sp, #32
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800288e:	f7fe fcfd 	bl	800128c <HAL_GetTick>
 8002892:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d001      	beq.n	80028a8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
 80028a6:	e12a      	b.n	8002afe <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_SPI_Transmit+0x36>
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e122      	b.n	8002afe <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_SPI_Transmit+0x48>
 80028c2:	2302      	movs	r3, #2
 80028c4:	e11b      	b.n	8002afe <HAL_SPI_Transmit+0x280>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2203      	movs	r2, #3
 80028d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002914:	d10f      	bne.n	8002936 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002924:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002934:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002940:	2b40      	cmp	r3, #64	@ 0x40
 8002942:	d007      	beq.n	8002954 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002952:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800295c:	d152      	bne.n	8002a04 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <HAL_SPI_Transmit+0xee>
 8002966:	8b7b      	ldrh	r3, [r7, #26]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d145      	bne.n	80029f8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297c:	1c9a      	adds	r2, r3, #2
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002990:	e032      	b.n	80029f8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b02      	cmp	r3, #2
 800299e:	d112      	bne.n	80029c6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a4:	881a      	ldrh	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b0:	1c9a      	adds	r2, r3, #2
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80029c4:	e018      	b.n	80029f8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029c6:	f7fe fc61 	bl	800128c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d803      	bhi.n	80029de <HAL_SPI_Transmit+0x160>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d102      	bne.n	80029e4 <HAL_SPI_Transmit+0x166>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e082      	b.n	8002afe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1c7      	bne.n	8002992 <HAL_SPI_Transmit+0x114>
 8002a02:	e053      	b.n	8002aac <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_SPI_Transmit+0x194>
 8002a0c:	8b7b      	ldrh	r3, [r7, #26]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d147      	bne.n	8002aa2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	7812      	ldrb	r2, [r2, #0]
 8002a1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a38:	e033      	b.n	8002aa2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d113      	bne.n	8002a70 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002a6e:	e018      	b.n	8002aa2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a70:	f7fe fc0c 	bl	800128c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d803      	bhi.n	8002a88 <HAL_SPI_Transmit+0x20a>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a86:	d102      	bne.n	8002a8e <HAL_SPI_Transmit+0x210>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e02d      	b.n	8002afe <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1c6      	bne.n	8002a3a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	6839      	ldr	r1, [r7, #0]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fa59 	bl	8002f68 <SPI_EndRxTxTransaction>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b08a      	sub	sp, #40	@ 0x28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b14:	2301      	movs	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b18:	f7fe fbb8 	bl	800128c <HAL_GetTick>
 8002b1c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b24:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b30:	7ffb      	ldrb	r3, [r7, #31]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d00c      	beq.n	8002b50 <HAL_SPI_TransmitReceive+0x4a>
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b3c:	d106      	bne.n	8002b4c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <HAL_SPI_TransmitReceive+0x46>
 8002b46:	7ffb      	ldrb	r3, [r7, #31]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d001      	beq.n	8002b50 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e17f      	b.n	8002e50 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_SPI_TransmitReceive+0x5c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_SPI_TransmitReceive+0x5c>
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e174      	b.n	8002e50 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_SPI_TransmitReceive+0x6e>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e16d      	b.n	8002e50 <HAL_SPI_TransmitReceive+0x34a>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d003      	beq.n	8002b90 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2205      	movs	r2, #5
 8002b8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	887a      	ldrh	r2, [r7, #2]
 8002ba6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	887a      	ldrh	r2, [r7, #2]
 8002bb2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	887a      	ldrh	r2, [r7, #2]
 8002bb8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd0:	2b40      	cmp	r3, #64	@ 0x40
 8002bd2:	d007      	beq.n	8002be4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bec:	d17e      	bne.n	8002cec <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d002      	beq.n	8002bfc <HAL_SPI_TransmitReceive+0xf6>
 8002bf6:	8afb      	ldrh	r3, [r7, #22]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d16c      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	881a      	ldrh	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0c:	1c9a      	adds	r2, r3, #2
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c20:	e059      	b.n	8002cd6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d11b      	bne.n	8002c68 <HAL_SPI_TransmitReceive+0x162>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d016      	beq.n	8002c68 <HAL_SPI_TransmitReceive+0x162>
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d113      	bne.n	8002c68 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	881a      	ldrh	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c50:	1c9a      	adds	r2, r3, #2
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d119      	bne.n	8002caa <HAL_SPI_TransmitReceive+0x1a4>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d014      	beq.n	8002caa <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	b292      	uxth	r2, r2
 8002c8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c92:	1c9a      	adds	r2, r3, #2
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002caa:	f7fe faef 	bl	800128c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d80d      	bhi.n	8002cd6 <HAL_SPI_TransmitReceive+0x1d0>
 8002cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d009      	beq.n	8002cd6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e0bc      	b.n	8002e50 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1a0      	bne.n	8002c22 <HAL_SPI_TransmitReceive+0x11c>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d19b      	bne.n	8002c22 <HAL_SPI_TransmitReceive+0x11c>
 8002cea:	e082      	b.n	8002df2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <HAL_SPI_TransmitReceive+0x1f4>
 8002cf4:	8afb      	ldrh	r3, [r7, #22]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d171      	bne.n	8002dde <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	330c      	adds	r3, #12
 8002d04:	7812      	ldrb	r2, [r2, #0]
 8002d06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d20:	e05d      	b.n	8002dde <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d11c      	bne.n	8002d6a <HAL_SPI_TransmitReceive+0x264>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d017      	beq.n	8002d6a <HAL_SPI_TransmitReceive+0x264>
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d114      	bne.n	8002d6a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	7812      	ldrb	r2, [r2, #0]
 8002d4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d119      	bne.n	8002dac <HAL_SPI_TransmitReceive+0x2a6>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d014      	beq.n	8002dac <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002da8:	2301      	movs	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002dac:	f7fe fa6e 	bl	800128c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d803      	bhi.n	8002dc4 <HAL_SPI_TransmitReceive+0x2be>
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d102      	bne.n	8002dca <HAL_SPI_TransmitReceive+0x2c4>
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e038      	b.n	8002e50 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d19c      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x21c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d197      	bne.n	8002d22 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002df2:	6a3a      	ldr	r2, [r7, #32]
 8002df4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f8b6 	bl	8002f68 <SPI_EndRxTxTransaction>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e01d      	b.n	8002e50 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10a      	bne.n	8002e32 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3728      	adds	r7, #40	@ 0x28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e68:	f7fe fa10 	bl	800128c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4413      	add	r3, r2
 8002e76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e78:	f7fe fa08 	bl	800128c <HAL_GetTick>
 8002e7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e7e:	4b39      	ldr	r3, [pc, #228]	@ (8002f64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	015b      	lsls	r3, r3, #5
 8002e84:	0d1b      	lsrs	r3, r3, #20
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	fb02 f303 	mul.w	r3, r2, r3
 8002e8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e8e:	e054      	b.n	8002f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d050      	beq.n	8002f3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e98:	f7fe f9f8 	bl	800128c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d902      	bls.n	8002eae <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d13d      	bne.n	8002f2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ebc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ec6:	d111      	bne.n	8002eec <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed0:	d004      	beq.n	8002edc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eda:	d107      	bne.n	8002eec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ef4:	d10f      	bne.n	8002f16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e017      	b.n	8002f5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	bf0c      	ite	eq
 8002f4a:	2301      	moveq	r3, #1
 8002f4c:	2300      	movne	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d19b      	bne.n	8002e90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000000 	.word	0x20000000

08002f68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f7ff ff6a 	bl	8002e58 <SPI_WaitFlagStateUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8e:	f043 0220 	orr.w	r2, r3, #32
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e032      	b.n	8003000 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <SPI_EndRxTxTransaction+0xa0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800300c <SPI_EndRxTxTransaction+0xa4>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	0d5b      	lsrs	r3, r3, #21
 8002fa6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fb8:	d112      	bne.n	8002fe0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2180      	movs	r1, #128	@ 0x80
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff ff47 	bl	8002e58 <SPI_WaitFlagStateUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d016      	beq.n	8002ffe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e00f      	b.n	8003000 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff6:	2b80      	cmp	r3, #128	@ 0x80
 8002ff8:	d0f2      	beq.n	8002fe0 <SPI_EndRxTxTransaction+0x78>
 8002ffa:	e000      	b.n	8002ffe <SPI_EndRxTxTransaction+0x96>
        break;
 8002ffc:	bf00      	nop
  }

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000000 	.word	0x20000000
 800300c:	165e9f81 	.word	0x165e9f81

08003010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e042      	b.n	80030a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7fd ff1c 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	@ 0x24
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f973 	bl	8003340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	@ 0x28
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4613      	mov	r3, r2
 80030be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d175      	bne.n	80031bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_UART_Transmit+0x2c>
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e06e      	b.n	80031be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2221      	movs	r2, #33	@ 0x21
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ee:	f7fe f8cd 	bl	800128c <HAL_GetTick>
 80030f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	88fa      	ldrh	r2, [r7, #6]
 80030fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003108:	d108      	bne.n	800311c <HAL_UART_Transmit+0x6c>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d104      	bne.n	800311c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	e003      	b.n	8003124 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003124:	e02e      	b.n	8003184 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2200      	movs	r2, #0
 800312e:	2180      	movs	r1, #128	@ 0x80
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f848 	bl	80031c6 <UART_WaitOnFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e03a      	b.n	80031be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10b      	bne.n	8003166 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800315c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	3302      	adds	r3, #2
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	e007      	b.n	8003176 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	781a      	ldrb	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	3301      	adds	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1cb      	bne.n	8003126 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2200      	movs	r2, #0
 8003196:	2140      	movs	r1, #64	@ 0x40
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f814 	bl	80031c6 <UART_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e006      	b.n	80031be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e000      	b.n	80031be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031bc:	2302      	movs	r3, #2
  }
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4613      	mov	r3, r2
 80031d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d6:	e03b      	b.n	8003250 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d037      	beq.n	8003250 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e0:	f7fe f854 	bl	800128c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	6a3a      	ldr	r2, [r7, #32]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d302      	bcc.n	80031f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e03a      	b.n	8003270 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d023      	beq.n	8003250 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b80      	cmp	r3, #128	@ 0x80
 800320c:	d020      	beq.n	8003250 <UART_WaitOnFlagUntilTimeout+0x8a>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b40      	cmp	r3, #64	@ 0x40
 8003212:	d01d      	beq.n	8003250 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b08      	cmp	r3, #8
 8003220:	d116      	bne.n	8003250 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f81d 	bl	8003278 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2208      	movs	r2, #8
 8003242:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e00f      	b.n	8003270 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4013      	ands	r3, r2
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	429a      	cmp	r2, r3
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	429a      	cmp	r2, r3
 800326c:	d0b4      	beq.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003278:	b480      	push	{r7}
 800327a:	b095      	sub	sp, #84	@ 0x54
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328a:	e853 3f00 	ldrex	r3, [r3]
 800328e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003292:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80032a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032a8:	e841 2300 	strex	r3, r2, [r1]
 80032ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e5      	bne.n	8003280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	e853 3f00 	ldrex	r3, [r3]
 80032c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3314      	adds	r3, #20
 80032d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80032d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032dc:	e841 2300 	strex	r3, r2, [r1]
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e5      	bne.n	80032b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d119      	bne.n	8003324 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	e853 3f00 	ldrex	r3, [r3]
 80032fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f023 0310 	bic.w	r3, r3, #16
 8003306:	647b      	str	r3, [r7, #68]	@ 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003310:	61ba      	str	r2, [r7, #24]
 8003312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003314:	6979      	ldr	r1, [r7, #20]
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	e841 2300 	strex	r3, r2, [r1]
 800331c:	613b      	str	r3, [r7, #16]
   return(result);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e5      	bne.n	80032f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003332:	bf00      	nop
 8003334:	3754      	adds	r7, #84	@ 0x54
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003344:	b0c0      	sub	sp, #256	@ 0x100
 8003346:	af00      	add	r7, sp, #0
 8003348:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335c:	68d9      	ldr	r1, [r3, #12]
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	ea40 0301 	orr.w	r3, r0, r1
 8003368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800336a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	431a      	orrs	r2, r3
 8003378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	431a      	orrs	r2, r3
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003398:	f021 010c 	bic.w	r1, r1, #12
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80033a6:	430b      	orrs	r3, r1
 80033a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ba:	6999      	ldr	r1, [r3, #24]
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	ea40 0301 	orr.w	r3, r0, r1
 80033c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b8f      	ldr	r3, [pc, #572]	@ (800360c <UART_SetConfig+0x2cc>)
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d005      	beq.n	80033e0 <UART_SetConfig+0xa0>
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4b8d      	ldr	r3, [pc, #564]	@ (8003610 <UART_SetConfig+0x2d0>)
 80033dc:	429a      	cmp	r2, r3
 80033de:	d104      	bne.n	80033ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033e0:	f7fe fd5e 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 80033e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033e8:	e003      	b.n	80033f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033ea:	f7fe fd45 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 80033ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033fc:	f040 810c 	bne.w	8003618 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003404:	2200      	movs	r2, #0
 8003406:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800340a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800340e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003412:	4622      	mov	r2, r4
 8003414:	462b      	mov	r3, r5
 8003416:	1891      	adds	r1, r2, r2
 8003418:	65b9      	str	r1, [r7, #88]	@ 0x58
 800341a:	415b      	adcs	r3, r3
 800341c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800341e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003422:	4621      	mov	r1, r4
 8003424:	eb12 0801 	adds.w	r8, r2, r1
 8003428:	4629      	mov	r1, r5
 800342a:	eb43 0901 	adc.w	r9, r3, r1
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800343a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800343e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003442:	4690      	mov	r8, r2
 8003444:	4699      	mov	r9, r3
 8003446:	4623      	mov	r3, r4
 8003448:	eb18 0303 	adds.w	r3, r8, r3
 800344c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003450:	462b      	mov	r3, r5
 8003452:	eb49 0303 	adc.w	r3, r9, r3
 8003456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800345a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003466:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800346a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800346e:	460b      	mov	r3, r1
 8003470:	18db      	adds	r3, r3, r3
 8003472:	653b      	str	r3, [r7, #80]	@ 0x50
 8003474:	4613      	mov	r3, r2
 8003476:	eb42 0303 	adc.w	r3, r2, r3
 800347a:	657b      	str	r3, [r7, #84]	@ 0x54
 800347c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003480:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003484:	f7fc ff1c 	bl	80002c0 <__aeabi_uldivmod>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4b61      	ldr	r3, [pc, #388]	@ (8003614 <UART_SetConfig+0x2d4>)
 800348e:	fba3 2302 	umull	r2, r3, r3, r2
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	011c      	lsls	r4, r3, #4
 8003496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800349a:	2200      	movs	r2, #0
 800349c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80034a8:	4642      	mov	r2, r8
 80034aa:	464b      	mov	r3, r9
 80034ac:	1891      	adds	r1, r2, r2
 80034ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034b0:	415b      	adcs	r3, r3
 80034b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034b8:	4641      	mov	r1, r8
 80034ba:	eb12 0a01 	adds.w	sl, r2, r1
 80034be:	4649      	mov	r1, r9
 80034c0:	eb43 0b01 	adc.w	fp, r3, r1
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034d8:	4692      	mov	sl, r2
 80034da:	469b      	mov	fp, r3
 80034dc:	4643      	mov	r3, r8
 80034de:	eb1a 0303 	adds.w	r3, sl, r3
 80034e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034e6:	464b      	mov	r3, r9
 80034e8:	eb4b 0303 	adc.w	r3, fp, r3
 80034ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003500:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003504:	460b      	mov	r3, r1
 8003506:	18db      	adds	r3, r3, r3
 8003508:	643b      	str	r3, [r7, #64]	@ 0x40
 800350a:	4613      	mov	r3, r2
 800350c:	eb42 0303 	adc.w	r3, r2, r3
 8003510:	647b      	str	r3, [r7, #68]	@ 0x44
 8003512:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800351a:	f7fc fed1 	bl	80002c0 <__aeabi_uldivmod>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4611      	mov	r1, r2
 8003524:	4b3b      	ldr	r3, [pc, #236]	@ (8003614 <UART_SetConfig+0x2d4>)
 8003526:	fba3 2301 	umull	r2, r3, r3, r1
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2264      	movs	r2, #100	@ 0x64
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	1acb      	subs	r3, r1, r3
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800353a:	4b36      	ldr	r3, [pc, #216]	@ (8003614 <UART_SetConfig+0x2d4>)
 800353c:	fba3 2302 	umull	r2, r3, r3, r2
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003548:	441c      	add	r4, r3
 800354a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800354e:	2200      	movs	r2, #0
 8003550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003554:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003558:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800355c:	4642      	mov	r2, r8
 800355e:	464b      	mov	r3, r9
 8003560:	1891      	adds	r1, r2, r2
 8003562:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003564:	415b      	adcs	r3, r3
 8003566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800356c:	4641      	mov	r1, r8
 800356e:	1851      	adds	r1, r2, r1
 8003570:	6339      	str	r1, [r7, #48]	@ 0x30
 8003572:	4649      	mov	r1, r9
 8003574:	414b      	adcs	r3, r1
 8003576:	637b      	str	r3, [r7, #52]	@ 0x34
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003584:	4659      	mov	r1, fp
 8003586:	00cb      	lsls	r3, r1, #3
 8003588:	4651      	mov	r1, sl
 800358a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800358e:	4651      	mov	r1, sl
 8003590:	00ca      	lsls	r2, r1, #3
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	4603      	mov	r3, r0
 8003598:	4642      	mov	r2, r8
 800359a:	189b      	adds	r3, r3, r2
 800359c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035a0:	464b      	mov	r3, r9
 80035a2:	460a      	mov	r2, r1
 80035a4:	eb42 0303 	adc.w	r3, r2, r3
 80035a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035c0:	460b      	mov	r3, r1
 80035c2:	18db      	adds	r3, r3, r3
 80035c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035c6:	4613      	mov	r3, r2
 80035c8:	eb42 0303 	adc.w	r3, r2, r3
 80035cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035d6:	f7fc fe73 	bl	80002c0 <__aeabi_uldivmod>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <UART_SetConfig+0x2d4>)
 80035e0:	fba3 1302 	umull	r1, r3, r3, r2
 80035e4:	095b      	lsrs	r3, r3, #5
 80035e6:	2164      	movs	r1, #100	@ 0x64
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	3332      	adds	r3, #50	@ 0x32
 80035f2:	4a08      	ldr	r2, [pc, #32]	@ (8003614 <UART_SetConfig+0x2d4>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	f003 0207 	and.w	r2, r3, #7
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4422      	add	r2, r4
 8003606:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003608:	e106      	b.n	8003818 <UART_SetConfig+0x4d8>
 800360a:	bf00      	nop
 800360c:	40011000 	.word	0x40011000
 8003610:	40011400 	.word	0x40011400
 8003614:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800361c:	2200      	movs	r2, #0
 800361e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003622:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003626:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800362a:	4642      	mov	r2, r8
 800362c:	464b      	mov	r3, r9
 800362e:	1891      	adds	r1, r2, r2
 8003630:	6239      	str	r1, [r7, #32]
 8003632:	415b      	adcs	r3, r3
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24
 8003636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800363a:	4641      	mov	r1, r8
 800363c:	1854      	adds	r4, r2, r1
 800363e:	4649      	mov	r1, r9
 8003640:	eb43 0501 	adc.w	r5, r3, r1
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	00eb      	lsls	r3, r5, #3
 800364e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003652:	00e2      	lsls	r2, r4, #3
 8003654:	4614      	mov	r4, r2
 8003656:	461d      	mov	r5, r3
 8003658:	4643      	mov	r3, r8
 800365a:	18e3      	adds	r3, r4, r3
 800365c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003660:	464b      	mov	r3, r9
 8003662:	eb45 0303 	adc.w	r3, r5, r3
 8003666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800366a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003676:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003686:	4629      	mov	r1, r5
 8003688:	008b      	lsls	r3, r1, #2
 800368a:	4621      	mov	r1, r4
 800368c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003690:	4621      	mov	r1, r4
 8003692:	008a      	lsls	r2, r1, #2
 8003694:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003698:	f7fc fe12 	bl	80002c0 <__aeabi_uldivmod>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4b60      	ldr	r3, [pc, #384]	@ (8003824 <UART_SetConfig+0x4e4>)
 80036a2:	fba3 2302 	umull	r2, r3, r3, r2
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	011c      	lsls	r4, r3, #4
 80036aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036bc:	4642      	mov	r2, r8
 80036be:	464b      	mov	r3, r9
 80036c0:	1891      	adds	r1, r2, r2
 80036c2:	61b9      	str	r1, [r7, #24]
 80036c4:	415b      	adcs	r3, r3
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036cc:	4641      	mov	r1, r8
 80036ce:	1851      	adds	r1, r2, r1
 80036d0:	6139      	str	r1, [r7, #16]
 80036d2:	4649      	mov	r1, r9
 80036d4:	414b      	adcs	r3, r1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036e4:	4659      	mov	r1, fp
 80036e6:	00cb      	lsls	r3, r1, #3
 80036e8:	4651      	mov	r1, sl
 80036ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ee:	4651      	mov	r1, sl
 80036f0:	00ca      	lsls	r2, r1, #3
 80036f2:	4610      	mov	r0, r2
 80036f4:	4619      	mov	r1, r3
 80036f6:	4603      	mov	r3, r0
 80036f8:	4642      	mov	r2, r8
 80036fa:	189b      	adds	r3, r3, r2
 80036fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003700:	464b      	mov	r3, r9
 8003702:	460a      	mov	r2, r1
 8003704:	eb42 0303 	adc.w	r3, r2, r3
 8003708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003716:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003724:	4649      	mov	r1, r9
 8003726:	008b      	lsls	r3, r1, #2
 8003728:	4641      	mov	r1, r8
 800372a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800372e:	4641      	mov	r1, r8
 8003730:	008a      	lsls	r2, r1, #2
 8003732:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003736:	f7fc fdc3 	bl	80002c0 <__aeabi_uldivmod>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4611      	mov	r1, r2
 8003740:	4b38      	ldr	r3, [pc, #224]	@ (8003824 <UART_SetConfig+0x4e4>)
 8003742:	fba3 2301 	umull	r2, r3, r3, r1
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	2264      	movs	r2, #100	@ 0x64
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	1acb      	subs	r3, r1, r3
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	3332      	adds	r3, #50	@ 0x32
 8003754:	4a33      	ldr	r2, [pc, #204]	@ (8003824 <UART_SetConfig+0x4e4>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003760:	441c      	add	r4, r3
 8003762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003766:	2200      	movs	r2, #0
 8003768:	673b      	str	r3, [r7, #112]	@ 0x70
 800376a:	677a      	str	r2, [r7, #116]	@ 0x74
 800376c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003770:	4642      	mov	r2, r8
 8003772:	464b      	mov	r3, r9
 8003774:	1891      	adds	r1, r2, r2
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	415b      	adcs	r3, r3
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003780:	4641      	mov	r1, r8
 8003782:	1851      	adds	r1, r2, r1
 8003784:	6039      	str	r1, [r7, #0]
 8003786:	4649      	mov	r1, r9
 8003788:	414b      	adcs	r3, r1
 800378a:	607b      	str	r3, [r7, #4]
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003798:	4659      	mov	r1, fp
 800379a:	00cb      	lsls	r3, r1, #3
 800379c:	4651      	mov	r1, sl
 800379e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a2:	4651      	mov	r1, sl
 80037a4:	00ca      	lsls	r2, r1, #3
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	4603      	mov	r3, r0
 80037ac:	4642      	mov	r2, r8
 80037ae:	189b      	adds	r3, r3, r2
 80037b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037b2:	464b      	mov	r3, r9
 80037b4:	460a      	mov	r2, r1
 80037b6:	eb42 0303 	adc.w	r3, r2, r3
 80037ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80037c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037d4:	4649      	mov	r1, r9
 80037d6:	008b      	lsls	r3, r1, #2
 80037d8:	4641      	mov	r1, r8
 80037da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037de:	4641      	mov	r1, r8
 80037e0:	008a      	lsls	r2, r1, #2
 80037e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037e6:	f7fc fd6b 	bl	80002c0 <__aeabi_uldivmod>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003824 <UART_SetConfig+0x4e4>)
 80037f0:	fba3 1302 	umull	r1, r3, r3, r2
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	2164      	movs	r1, #100	@ 0x64
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	3332      	adds	r3, #50	@ 0x32
 8003802:	4a08      	ldr	r2, [pc, #32]	@ (8003824 <UART_SetConfig+0x4e4>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	f003 020f 	and.w	r2, r3, #15
 800380e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4422      	add	r2, r4
 8003816:	609a      	str	r2, [r3, #8]
}
 8003818:	bf00      	nop
 800381a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800381e:	46bd      	mov	sp, r7
 8003820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003824:	51eb851f 	.word	0x51eb851f

08003828 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003828:	b084      	sub	sp, #16
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	f107 001c 	add.w	r0, r7, #28
 8003836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800383a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800383e:	2b01      	cmp	r3, #1
 8003840:	d123      	bne.n	800388a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003846:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800386a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800386e:	2b01      	cmp	r3, #1
 8003870:	d105      	bne.n	800387e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa9a 	bl	8003db8 <USB_CoreReset>
 8003884:	4603      	mov	r3, r0
 8003886:	73fb      	strb	r3, [r7, #15]
 8003888:	e01b      	b.n	80038c2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fa8e 	bl	8003db8 <USB_CoreReset>
 800389c:	4603      	mov	r3, r0
 800389e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80038a0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80038b4:	e005      	b.n	80038c2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80038c2:	7fbb      	ldrb	r3, [r7, #30]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d10b      	bne.n	80038e0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f043 0206 	orr.w	r2, r3, #6
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038ec:	b004      	add	sp, #16
 80038ee:	4770      	bx	lr

080038f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f023 0201 	bic.w	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d115      	bne.n	8003960 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003940:	200a      	movs	r0, #10
 8003942:	f7fd fcaf 	bl	80012a4 <HAL_Delay>
      ms += 10U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	330a      	adds	r3, #10
 800394a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fa25 	bl	8003d9c <USB_GetMode>
 8003952:	4603      	mov	r3, r0
 8003954:	2b01      	cmp	r3, #1
 8003956:	d01e      	beq.n	8003996 <USB_SetCurrentMode+0x84>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2bc7      	cmp	r3, #199	@ 0xc7
 800395c:	d9f0      	bls.n	8003940 <USB_SetCurrentMode+0x2e>
 800395e:	e01a      	b.n	8003996 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d115      	bne.n	8003992 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003972:	200a      	movs	r0, #10
 8003974:	f7fd fc96 	bl	80012a4 <HAL_Delay>
      ms += 10U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	330a      	adds	r3, #10
 800397c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa0c 	bl	8003d9c <USB_GetMode>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <USB_SetCurrentMode+0x84>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2bc7      	cmp	r3, #199	@ 0xc7
 800398e:	d9f0      	bls.n	8003972 <USB_SetCurrentMode+0x60>
 8003990:	e001      	b.n	8003996 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e005      	b.n	80039a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2bc8      	cmp	r3, #200	@ 0xc8
 800399a:	d101      	bne.n	80039a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039ac:	b084      	sub	sp, #16
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80039ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	e009      	b.n	80039e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	3340      	adds	r3, #64	@ 0x40
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	2200      	movs	r2, #0
 80039d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	3301      	adds	r3, #1
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b0e      	cmp	r3, #14
 80039e4:	d9f2      	bls.n	80039cc <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d11c      	bne.n	8003a28 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a06:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e005      	b.n	8003a34 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a40:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d10d      	bne.n	8003a64 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d104      	bne.n	8003a5a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a50:	2100      	movs	r1, #0
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f968 	bl	8003d28 <USB_SetDevSpeed>
 8003a58:	e008      	b.n	8003a6c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f963 	bl	8003d28 <USB_SetDevSpeed>
 8003a62:	e003      	b.n	8003a6c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a64:	2103      	movs	r1, #3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f95e 	bl	8003d28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a6c:	2110      	movs	r1, #16
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8fa 	bl	8003c68 <USB_FlushTxFifo>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f924 	bl	8003ccc <USB_FlushRxFifo>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a94:	461a      	mov	r2, r3
 8003a96:	2300      	movs	r3, #0
 8003a98:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aac:	461a      	mov	r2, r3
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e043      	b.n	8003b40 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003aca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ace:	d118      	bne.n	8003b02 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e013      	b.n	8003b14 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af8:	461a      	mov	r2, r3
 8003afa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e008      	b.n	8003b14 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2300      	movs	r3, #0
 8003b12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b20:	461a      	mov	r2, r3
 8003b22:	2300      	movs	r3, #0
 8003b24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b32:	461a      	mov	r2, r3
 8003b34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b44:	461a      	mov	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d3b5      	bcc.n	8003ab8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	e043      	b.n	8003bda <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b68:	d118      	bne.n	8003b9c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	e013      	b.n	8003bae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b92:	461a      	mov	r2, r3
 8003b94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e008      	b.n	8003bae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2300      	movs	r3, #0
 8003bac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003bde:	461a      	mov	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d3b5      	bcc.n	8003b52 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bf8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003c06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d105      	bne.n	8003c1c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	f043 0210 	orr.w	r2, r3, #16
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	4b10      	ldr	r3, [pc, #64]	@ (8003c64 <USB_DevInit+0x2b8>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f043 0208 	orr.w	r2, r3, #8
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d107      	bne.n	8003c54 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c4c:	f043 0304 	orr.w	r3, r3, #4
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c60:	b004      	add	sp, #16
 8003c62:	4770      	bx	lr
 8003c64:	803c3800 	.word	0x803c3800

08003c68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c82:	d901      	bls.n	8003c88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e01b      	b.n	8003cc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	daf2      	bge.n	8003c76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	019b      	lsls	r3, r3, #6
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cac:	d901      	bls.n	8003cb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e006      	b.n	8003cc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d0f0      	beq.n	8003ca0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ce4:	d901      	bls.n	8003cea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e018      	b.n	8003d1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	daf2      	bge.n	8003cd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d08:	d901      	bls.n	8003d0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e006      	b.n	8003d1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d0f0      	beq.n	8003cfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b085      	sub	sp, #20
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003d74:	f023 0303 	bic.w	r3, r3, #3
 8003d78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d88:	f043 0302 	orr.w	r3, r3, #2
 8003d8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f003 0301 	and.w	r3, r3, #1
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dd0:	d901      	bls.n	8003dd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e01b      	b.n	8003e0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	daf2      	bge.n	8003dc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f043 0201 	orr.w	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3301      	adds	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dfa:	d901      	bls.n	8003e00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e006      	b.n	8003e0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d0f0      	beq.n	8003dee <USB_CoreReset+0x36>

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003e20:	4904      	ldr	r1, [pc, #16]	@ (8003e34 <MX_FATFS_Init+0x18>)
 8003e22:	4805      	ldr	r0, [pc, #20]	@ (8003e38 <MX_FATFS_Init+0x1c>)
 8003e24:	f003 fff8 	bl	8007e18 <FATFS_LinkDriver>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b03      	ldr	r3, [pc, #12]	@ (8003e3c <MX_FATFS_Init+0x20>)
 8003e2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003e30:	bf00      	nop
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20000764 	.word	0x20000764
 8003e38:	2000000c 	.word	0x2000000c
 8003e3c:	20000760 	.word	0x20000760

08003e40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003e44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f9fd 	bl	800425c <SD_disk_initialize>
 8003e62:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fad5 	bl	8004428 <SD_disk_status>
 8003e7e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4603      	mov	r3, r0
 8003e96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8003e98:	7bf8      	ldrb	r0, [r7, #15]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	f000 fad8 	bl	8004454 <SD_disk_read>
 8003ea4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4603      	mov	r3, r0
 8003ebc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003ebe:	7bf8      	ldrb	r0, [r7, #15]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	f000 fb2f 	bl	8004528 <SD_disk_write>
 8003eca:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	603a      	str	r2, [r7, #0]
 8003ede:	71fb      	strb	r3, [r7, #7]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8003ee4:	79b9      	ldrb	r1, [r7, #6]
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fba0 	bl	8004630 <SD_disk_ioctl>
 8003ef0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <SELECT>:
//-----[ SPI Functions ]-----

//cs is active when 0!!!
/* slave select */
static void SELECT(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003f00:	2200      	movs	r2, #0
 8003f02:	2110      	movs	r1, #16
 8003f04:	4802      	ldr	r0, [pc, #8]	@ (8003f10 <SELECT+0x14>)
 8003f06:	f7fd fc6b 	bl	80017e0 <HAL_GPIO_WritePin>
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40020000 	.word	0x40020000

08003f14 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003f18:	2201      	movs	r2, #1
 8003f1a:	2110      	movs	r1, #16
 8003f1c:	4802      	ldr	r0, [pc, #8]	@ (8003f28 <DESELECT+0x14>)
 8003f1e:	f7fd fc5f 	bl	80017e0 <HAL_GPIO_WritePin>
}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40020000 	.word	0x40020000

08003f2c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003f36:	bf00      	nop
 8003f38:	4b08      	ldr	r3, [pc, #32]	@ (8003f5c <SPI_TxByte+0x30>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d1f8      	bne.n	8003f38 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003f46:	1df9      	adds	r1, r7, #7
 8003f48:	2364      	movs	r3, #100	@ 0x64
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4803      	ldr	r0, [pc, #12]	@ (8003f5c <SPI_TxByte+0x30>)
 8003f4e:	f7fe fc96 	bl	800287e <HAL_SPI_Transmit>
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000090 	.word	0x20000090

08003f60 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003f6c:	bf00      	nop
 8003f6e:	4b08      	ldr	r3, [pc, #32]	@ (8003f90 <SPI_TxBuffer+0x30>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d1f8      	bne.n	8003f6e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8003f7c:	887a      	ldrh	r2, [r7, #2]
 8003f7e:	2364      	movs	r3, #100	@ 0x64
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4803      	ldr	r0, [pc, #12]	@ (8003f90 <SPI_TxBuffer+0x30>)
 8003f84:	f7fe fc7b 	bl	800287e <HAL_SPI_Transmit>
}
 8003f88:	bf00      	nop
 8003f8a:	3708      	adds	r7, #8
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000090 	.word	0x20000090

08003f94 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8003f9a:	23ff      	movs	r3, #255	@ 0xff
 8003f9c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003f9e:	bf00      	nop
 8003fa0:	4b09      	ldr	r3, [pc, #36]	@ (8003fc8 <SPI_RxByte+0x34>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d1f8      	bne.n	8003fa0 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003fae:	1dba      	adds	r2, r7, #6
 8003fb0:	1df9      	adds	r1, r7, #7
 8003fb2:	2364      	movs	r3, #100	@ 0x64
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	4803      	ldr	r0, [pc, #12]	@ (8003fc8 <SPI_RxByte+0x34>)
 8003fba:	f7fe fda4 	bl	8002b06 <HAL_SPI_TransmitReceive>
  return data;
 8003fbe:	79bb      	ldrb	r3, [r7, #6]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000090 	.word	0x20000090

08003fcc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8003fd4:	f7ff ffde 	bl	8003f94 <SPI_RxByte>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	701a      	strb	r2, [r3, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8003fee:	4b0a      	ldr	r3, [pc, #40]	@ (8004018 <SD_ReadyWait+0x30>)
 8003ff0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003ff4:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8003ff6:	f7ff ffcd 	bl	8003f94 <SPI_RxByte>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	2bff      	cmp	r3, #255	@ 0xff
 8004002:	d003      	beq.n	800400c <SD_ReadyWait+0x24>
 8004004:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <SD_ReadyWait+0x30>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f4      	bne.n	8003ff6 <SD_ReadyWait+0xe>
  return res;
 800400c:	79fb      	ldrb	r3, [r7, #7]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	2000076a 	.word	0x2000076a

0800401c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8004022:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8004026:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8004028:	f7ff ff74 	bl	8003f14 <DESELECT>
  for(int i = 0; i < 10; i++)
 800402c:	2300      	movs	r3, #0
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	e005      	b.n	800403e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8004032:	20ff      	movs	r0, #255	@ 0xff
 8004034:	f7ff ff7a 	bl	8003f2c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3301      	adds	r3, #1
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b09      	cmp	r3, #9
 8004042:	ddf6      	ble.n	8004032 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8004044:	f7ff ff5a 	bl	8003efc <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8004048:	2340      	movs	r3, #64	@ 0x40
 800404a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8004054:	2300      	movs	r3, #0
 8004056:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800405c:	2395      	movs	r3, #149	@ 0x95
 800405e:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8004060:	463b      	mov	r3, r7
 8004062:	2106      	movs	r1, #6
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff7b 	bl	8003f60 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800406a:	e002      	b.n	8004072 <SD_PowerOn+0x56>
  {
    cnt--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3b01      	subs	r3, #1
 8004070:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8004072:	f7ff ff8f 	bl	8003f94 <SPI_RxByte>
 8004076:	4603      	mov	r3, r0
 8004078:	2b01      	cmp	r3, #1
 800407a:	d002      	beq.n	8004082 <SD_PowerOn+0x66>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f4      	bne.n	800406c <SD_PowerOn+0x50>
  }
  DESELECT();
 8004082:	f7ff ff47 	bl	8003f14 <DESELECT>
  SPI_TxByte(0XFF);
 8004086:	20ff      	movs	r0, #255	@ 0xff
 8004088:	f7ff ff50 	bl	8003f2c <SPI_TxByte>
  PowerFlag = 1;
 800408c:	4b03      	ldr	r3, [pc, #12]	@ (800409c <SD_PowerOn+0x80>)
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	2000076d 	.word	0x2000076d

080040a0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80040a4:	4b03      	ldr	r3, [pc, #12]	@ (80040b4 <SD_PowerOff+0x14>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	2000076d 	.word	0x2000076d

080040b8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return PowerFlag;
 80040bc:	4b03      	ldr	r3, [pc, #12]	@ (80040cc <SD_CheckPower+0x14>)
 80040be:	781b      	ldrb	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	2000076d 	.word	0x2000076d

080040d0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80040da:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <SD_RxDataBlock+0x58>)
 80040dc:	22c8      	movs	r2, #200	@ 0xc8
 80040de:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80040e0:	f7ff ff58 	bl	8003f94 <SPI_RxByte>
 80040e4:	4603      	mov	r3, r0
 80040e6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2bff      	cmp	r3, #255	@ 0xff
 80040ec:	d103      	bne.n	80040f6 <SD_RxDataBlock+0x26>
 80040ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004128 <SD_RxDataBlock+0x58>)
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f4      	bne.n	80040e0 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	2bfe      	cmp	r3, #254	@ 0xfe
 80040fa:	d001      	beq.n	8004100 <SD_RxDataBlock+0x30>
 80040fc:	2300      	movs	r3, #0
 80040fe:	e00f      	b.n	8004120 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff ff60 	bl	8003fcc <SPI_RxBytePtr>
  } while(len--);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	1e5a      	subs	r2, r3, #1
 8004110:	603a      	str	r2, [r7, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f4      	bne.n	8004100 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 8004116:	f7ff ff3d 	bl	8003f94 <SPI_RxByte>
  SPI_RxByte();
 800411a:	f7ff ff3b 	bl	8003f94 <SPI_RxByte>
  return TRUE;
 800411e:	2301      	movs	r3, #1
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000768 	.word	0x20000768

0800412c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800413c:	f7ff ff54 	bl	8003fe8 <SD_ReadyWait>
 8004140:	4603      	mov	r3, r0
 8004142:	2bff      	cmp	r3, #255	@ 0xff
 8004144:	d001      	beq.n	800414a <SD_TxDataBlock+0x1e>
 8004146:	2300      	movs	r3, #0
 8004148:	e02f      	b.n	80041aa <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff feed 	bl	8003f2c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	2bfd      	cmp	r3, #253	@ 0xfd
 8004156:	d020      	beq.n	800419a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8004158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff feff 	bl	8003f60 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8004162:	f7ff ff17 	bl	8003f94 <SPI_RxByte>
    SPI_RxByte();
 8004166:	f7ff ff15 	bl	8003f94 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800416a:	e00b      	b.n	8004184 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800416c:	f7ff ff12 	bl	8003f94 <SPI_RxByte>
 8004170:	4603      	mov	r3, r0
 8004172:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	2b05      	cmp	r3, #5
 800417c:	d006      	beq.n	800418c <SD_TxDataBlock+0x60>
      i++;
 800417e:	7bbb      	ldrb	r3, [r7, #14]
 8004180:	3301      	adds	r3, #1
 8004182:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8004184:	7bbb      	ldrb	r3, [r7, #14]
 8004186:	2b40      	cmp	r3, #64	@ 0x40
 8004188:	d9f0      	bls.n	800416c <SD_TxDataBlock+0x40>
 800418a:	e000      	b.n	800418e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800418c:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800418e:	bf00      	nop
 8004190:	f7ff ff00 	bl	8003f94 <SPI_RxByte>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0fa      	beq.n	8004190 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800419a:	7bfb      	ldrb	r3, [r7, #15]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2b05      	cmp	r3, #5
 80041a2:	d101      	bne.n	80041a8 <SD_TxDataBlock+0x7c>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <SD_TxDataBlock+0x7e>

  return FALSE;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b084      	sub	sp, #16
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	4603      	mov	r3, r0
 80041ba:	6039      	str	r1, [r7, #0]
 80041bc:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80041be:	f7ff ff13 	bl	8003fe8 <SD_ReadyWait>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2bff      	cmp	r3, #255	@ 0xff
 80041c6:	d001      	beq.n	80041cc <SD_SendCmd+0x1a>
 80041c8:	23ff      	movs	r3, #255	@ 0xff
 80041ca:	e042      	b.n	8004252 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff feac 	bl	8003f2c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	0e1b      	lsrs	r3, r3, #24
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fea6 	bl	8003f2c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fea0 	bl	8003f2c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	0a1b      	lsrs	r3, r3, #8
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fe9a 	bl	8003f2c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff fe95 	bl	8003f2c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	2b40      	cmp	r3, #64	@ 0x40
 8004206:	d102      	bne.n	800420e <SD_SendCmd+0x5c>
 8004208:	2395      	movs	r3, #149	@ 0x95
 800420a:	73fb      	strb	r3, [r7, #15]
 800420c:	e007      	b.n	800421e <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	2b48      	cmp	r3, #72	@ 0x48
 8004212:	d102      	bne.n	800421a <SD_SendCmd+0x68>
 8004214:	2387      	movs	r3, #135	@ 0x87
 8004216:	73fb      	strb	r3, [r7, #15]
 8004218:	e001      	b.n	800421e <SD_SendCmd+0x6c>
  else crc = 1;
 800421a:	2301      	movs	r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	4618      	mov	r0, r3
 8004222:	f7ff fe83 	bl	8003f2c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	2b4c      	cmp	r3, #76	@ 0x4c
 800422a:	d101      	bne.n	8004230 <SD_SendCmd+0x7e>
 800422c:	f7ff feb2 	bl	8003f94 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8004230:	230a      	movs	r3, #10
 8004232:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8004234:	f7ff feae 	bl	8003f94 <SPI_RxByte>
 8004238:	4603      	mov	r3, r0
 800423a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800423c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004240:	2b00      	cmp	r3, #0
 8004242:	da05      	bge.n	8004250 <SD_SendCmd+0x9e>
 8004244:	7bbb      	ldrb	r3, [r7, #14]
 8004246:	3b01      	subs	r3, #1
 8004248:	73bb      	strb	r3, [r7, #14]
 800424a:	7bbb      	ldrb	r3, [r7, #14]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f1      	bne.n	8004234 <SD_SendCmd+0x82>

  return res;
 8004250:	7b7b      	ldrb	r3, [r7, #13]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800425c:	b590      	push	{r4, r7, lr}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <SD_disk_initialize+0x14>
 800426c:	2301      	movs	r3, #1
 800426e:	e0d1      	b.n	8004414 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8004270:	4b6a      	ldr	r3, [pc, #424]	@ (800441c <SD_disk_initialize+0x1c0>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <SD_disk_initialize+0x2a>
 800427e:	4b67      	ldr	r3, [pc, #412]	@ (800441c <SD_disk_initialize+0x1c0>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	e0c6      	b.n	8004414 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8004286:	f7ff fec9 	bl	800401c <SD_PowerOn>
  /* slave select */
  SELECT();
 800428a:	f7ff fe37 	bl	8003efc <SELECT>
  /* check disk type */
  type = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8004292:	2100      	movs	r1, #0
 8004294:	2040      	movs	r0, #64	@ 0x40
 8004296:	f7ff ff8c 	bl	80041b2 <SD_SendCmd>
 800429a:	4603      	mov	r3, r0
 800429c:	2b01      	cmp	r3, #1
 800429e:	f040 80a1 	bne.w	80043e4 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80042a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004420 <SD_disk_initialize+0x1c4>)
 80042a4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042a8:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80042aa:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80042ae:	2048      	movs	r0, #72	@ 0x48
 80042b0:	f7ff ff7f 	bl	80041b2 <SD_SendCmd>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d155      	bne.n	8004366 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
 80042be:	e00c      	b.n	80042da <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80042c0:	7bfc      	ldrb	r4, [r7, #15]
 80042c2:	f7ff fe67 	bl	8003f94 <SPI_RxByte>
 80042c6:	4603      	mov	r3, r0
 80042c8:	461a      	mov	r2, r3
 80042ca:	f104 0310 	add.w	r3, r4, #16
 80042ce:	443b      	add	r3, r7
 80042d0:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	3301      	adds	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d9ef      	bls.n	80042c0 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80042e0:	7abb      	ldrb	r3, [r7, #10]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d17e      	bne.n	80043e4 <SD_disk_initialize+0x188>
 80042e6:	7afb      	ldrb	r3, [r7, #11]
 80042e8:	2baa      	cmp	r3, #170	@ 0xaa
 80042ea:	d17b      	bne.n	80043e4 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80042ec:	2100      	movs	r1, #0
 80042ee:	2077      	movs	r0, #119	@ 0x77
 80042f0:	f7ff ff5f 	bl	80041b2 <SD_SendCmd>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d807      	bhi.n	800430a <SD_disk_initialize+0xae>
 80042fa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80042fe:	2069      	movs	r0, #105	@ 0x69
 8004300:	f7ff ff57 	bl	80041b2 <SD_SendCmd>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800430a:	4b45      	ldr	r3, [pc, #276]	@ (8004420 <SD_disk_initialize+0x1c4>)
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1ec      	bne.n	80042ec <SD_disk_initialize+0x90>
 8004312:	e000      	b.n	8004316 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004314:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004316:	4b42      	ldr	r3, [pc, #264]	@ (8004420 <SD_disk_initialize+0x1c4>)
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d062      	beq.n	80043e4 <SD_disk_initialize+0x188>
 800431e:	2100      	movs	r1, #0
 8004320:	207a      	movs	r0, #122	@ 0x7a
 8004322:	f7ff ff46 	bl	80041b2 <SD_SendCmd>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d15b      	bne.n	80043e4 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800432c:	2300      	movs	r3, #0
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	e00c      	b.n	800434c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8004332:	7bfc      	ldrb	r4, [r7, #15]
 8004334:	f7ff fe2e 	bl	8003f94 <SPI_RxByte>
 8004338:	4603      	mov	r3, r0
 800433a:	461a      	mov	r2, r3
 800433c:	f104 0310 	add.w	r3, r4, #16
 8004340:	443b      	add	r3, r7
 8004342:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	3301      	adds	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d9ef      	bls.n	8004332 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004352:	7a3b      	ldrb	r3, [r7, #8]
 8004354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <SD_disk_initialize+0x104>
 800435c:	230c      	movs	r3, #12
 800435e:	e000      	b.n	8004362 <SD_disk_initialize+0x106>
 8004360:	2304      	movs	r3, #4
 8004362:	73bb      	strb	r3, [r7, #14]
 8004364:	e03e      	b.n	80043e4 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8004366:	2100      	movs	r1, #0
 8004368:	2077      	movs	r0, #119	@ 0x77
 800436a:	f7ff ff22 	bl	80041b2 <SD_SendCmd>
 800436e:	4603      	mov	r3, r0
 8004370:	2b01      	cmp	r3, #1
 8004372:	d808      	bhi.n	8004386 <SD_disk_initialize+0x12a>
 8004374:	2100      	movs	r1, #0
 8004376:	2069      	movs	r0, #105	@ 0x69
 8004378:	f7ff ff1b 	bl	80041b2 <SD_SendCmd>
 800437c:	4603      	mov	r3, r0
 800437e:	2b01      	cmp	r3, #1
 8004380:	d801      	bhi.n	8004386 <SD_disk_initialize+0x12a>
 8004382:	2302      	movs	r3, #2
 8004384:	e000      	b.n	8004388 <SD_disk_initialize+0x12c>
 8004386:	2301      	movs	r3, #1
 8004388:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800438a:	7bbb      	ldrb	r3, [r7, #14]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d10e      	bne.n	80043ae <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8004390:	2100      	movs	r1, #0
 8004392:	2077      	movs	r0, #119	@ 0x77
 8004394:	f7ff ff0d 	bl	80041b2 <SD_SendCmd>
 8004398:	4603      	mov	r3, r0
 800439a:	2b01      	cmp	r3, #1
 800439c:	d80e      	bhi.n	80043bc <SD_disk_initialize+0x160>
 800439e:	2100      	movs	r1, #0
 80043a0:	2069      	movs	r0, #105	@ 0x69
 80043a2:	f7ff ff06 	bl	80041b2 <SD_SendCmd>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <SD_disk_initialize+0x160>
 80043ac:	e00c      	b.n	80043c8 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80043ae:	2100      	movs	r1, #0
 80043b0:	2041      	movs	r0, #65	@ 0x41
 80043b2:	f7ff fefe 	bl	80041b2 <SD_SendCmd>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80043bc:	4b18      	ldr	r3, [pc, #96]	@ (8004420 <SD_disk_initialize+0x1c4>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e2      	bne.n	800438a <SD_disk_initialize+0x12e>
 80043c4:	e000      	b.n	80043c8 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80043c6:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80043c8:	4b15      	ldr	r3, [pc, #84]	@ (8004420 <SD_disk_initialize+0x1c4>)
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d007      	beq.n	80043e0 <SD_disk_initialize+0x184>
 80043d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043d4:	2050      	movs	r0, #80	@ 0x50
 80043d6:	f7ff feec 	bl	80041b2 <SD_SendCmd>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <SD_disk_initialize+0x188>
 80043e0:	2300      	movs	r3, #0
 80043e2:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80043e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004424 <SD_disk_initialize+0x1c8>)
 80043e6:	7bbb      	ldrb	r3, [r7, #14]
 80043e8:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 80043ea:	f7ff fd93 	bl	8003f14 <DESELECT>
  SPI_RxByte();
 80043ee:	f7ff fdd1 	bl	8003f94 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80043f2:	7bbb      	ldrb	r3, [r7, #14]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80043f8:	4b08      	ldr	r3, [pc, #32]	@ (800441c <SD_disk_initialize+0x1c0>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	b2da      	uxtb	r2, r3
 8004404:	4b05      	ldr	r3, [pc, #20]	@ (800441c <SD_disk_initialize+0x1c0>)
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e001      	b.n	800440e <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800440a:	f7ff fe49 	bl	80040a0 <SD_PowerOff>
  }
  return Stat;
 800440e:	4b03      	ldr	r3, [pc, #12]	@ (800441c <SD_disk_initialize+0x1c0>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	b2db      	uxtb	r3, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	bd90      	pop	{r4, r7, pc}
 800441c:	20000020 	.word	0x20000020
 8004420:	20000768 	.word	0x20000768
 8004424:	2000076c 	.word	0x2000076c

08004428 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <SD_disk_status+0x14>
 8004438:	2301      	movs	r3, #1
 800443a:	e002      	b.n	8004442 <SD_disk_status+0x1a>
  return Stat;
 800443c:	4b04      	ldr	r3, [pc, #16]	@ (8004450 <SD_disk_status+0x28>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2db      	uxtb	r3, r3
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20000020 	.word	0x20000020

08004454 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <SD_disk_read+0x1c>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <SD_disk_read+0x20>
 8004470:	2304      	movs	r3, #4
 8004472:	e051      	b.n	8004518 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004474:	4b2a      	ldr	r3, [pc, #168]	@ (8004520 <SD_disk_read+0xcc>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <SD_disk_read+0x32>
 8004482:	2303      	movs	r3, #3
 8004484:	e048      	b.n	8004518 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8004486:	4b27      	ldr	r3, [pc, #156]	@ (8004524 <SD_disk_read+0xd0>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <SD_disk_read+0x44>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	025b      	lsls	r3, r3, #9
 8004496:	607b      	str	r3, [r7, #4]

  SELECT();
 8004498:	f7ff fd30 	bl	8003efc <SELECT>

  if (count == 1)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d111      	bne.n	80044c6 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	2051      	movs	r0, #81	@ 0x51
 80044a6:	f7ff fe84 	bl	80041b2 <SD_SendCmd>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d129      	bne.n	8004504 <SD_disk_read+0xb0>
 80044b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044b4:	68b8      	ldr	r0, [r7, #8]
 80044b6:	f7ff fe0b 	bl	80040d0 <SD_RxDataBlock>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d021      	beq.n	8004504 <SD_disk_read+0xb0>
 80044c0:	2300      	movs	r3, #0
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	e01e      	b.n	8004504 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	2052      	movs	r0, #82	@ 0x52
 80044ca:	f7ff fe72 	bl	80041b2 <SD_SendCmd>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d117      	bne.n	8004504 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80044d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80044d8:	68b8      	ldr	r0, [r7, #8]
 80044da:	f7ff fdf9 	bl	80040d0 <SD_RxDataBlock>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <SD_disk_read+0xa6>
        buff += 512;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80044ea:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1ed      	bne.n	80044d4 <SD_disk_read+0x80>
 80044f8:	e000      	b.n	80044fc <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80044fa:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80044fc:	2100      	movs	r1, #0
 80044fe:	204c      	movs	r0, #76	@ 0x4c
 8004500:	f7ff fe57 	bl	80041b2 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8004504:	f7ff fd06 	bl	8003f14 <DESELECT>
  SPI_RxByte();
 8004508:	f7ff fd44 	bl	8003f94 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf14      	ite	ne
 8004512:	2301      	movne	r3, #1
 8004514:	2300      	moveq	r3, #0
 8004516:	b2db      	uxtb	r3, r3
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000020 	.word	0x20000020
 8004524:	2000076c 	.word	0x2000076c

08004528 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4603      	mov	r3, r0
 8004536:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <SD_disk_write+0x1c>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <SD_disk_write+0x20>
 8004544:	2304      	movs	r3, #4
 8004546:	e06b      	b.n	8004620 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004548:	4b37      	ldr	r3, [pc, #220]	@ (8004628 <SD_disk_write+0x100>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <SD_disk_write+0x32>
 8004556:	2303      	movs	r3, #3
 8004558:	e062      	b.n	8004620 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800455a:	4b33      	ldr	r3, [pc, #204]	@ (8004628 <SD_disk_write+0x100>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <SD_disk_write+0x44>
 8004568:	2302      	movs	r3, #2
 800456a:	e059      	b.n	8004620 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800456c:	4b2f      	ldr	r3, [pc, #188]	@ (800462c <SD_disk_write+0x104>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d102      	bne.n	800457e <SD_disk_write+0x56>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	025b      	lsls	r3, r3, #9
 800457c:	607b      	str	r3, [r7, #4]

  SELECT();
 800457e:	f7ff fcbd 	bl	8003efc <SELECT>

  if (count == 1)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d110      	bne.n	80045aa <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	2058      	movs	r0, #88	@ 0x58
 800458c:	f7ff fe11 	bl	80041b2 <SD_SendCmd>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d13a      	bne.n	800460c <SD_disk_write+0xe4>
 8004596:	21fe      	movs	r1, #254	@ 0xfe
 8004598:	68b8      	ldr	r0, [r7, #8]
 800459a:	f7ff fdc7 	bl	800412c <SD_TxDataBlock>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d033      	beq.n	800460c <SD_disk_write+0xe4>
      count = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	e030      	b.n	800460c <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80045aa:	4b20      	ldr	r3, [pc, #128]	@ (800462c <SD_disk_write+0x104>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80045b6:	2100      	movs	r1, #0
 80045b8:	2077      	movs	r0, #119	@ 0x77
 80045ba:	f7ff fdfa 	bl	80041b2 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80045be:	6839      	ldr	r1, [r7, #0]
 80045c0:	2057      	movs	r0, #87	@ 0x57
 80045c2:	f7ff fdf6 	bl	80041b2 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	2059      	movs	r0, #89	@ 0x59
 80045ca:	f7ff fdf2 	bl	80041b2 <SD_SendCmd>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11b      	bne.n	800460c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80045d4:	21fc      	movs	r1, #252	@ 0xfc
 80045d6:	68b8      	ldr	r0, [r7, #8]
 80045d8:	f7ff fda8 	bl	800412c <SD_TxDataBlock>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <SD_disk_write+0xd0>
        buff += 512;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80045e8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1ee      	bne.n	80045d4 <SD_disk_write+0xac>
 80045f6:	e000      	b.n	80045fa <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80045f8:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80045fa:	21fd      	movs	r1, #253	@ 0xfd
 80045fc:	2000      	movs	r0, #0
 80045fe:	f7ff fd95 	bl	800412c <SD_TxDataBlock>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <SD_disk_write+0xe4>
      {
        count = 1;
 8004608:	2301      	movs	r3, #1
 800460a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800460c:	f7ff fc82 	bl	8003f14 <DESELECT>
  SPI_RxByte();
 8004610:	f7ff fcc0 	bl	8003f94 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	bf14      	ite	ne
 800461a:	2301      	movne	r3, #1
 800461c:	2300      	moveq	r3, #0
 800461e:	b2db      	uxtb	r3, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000020 	.word	0x20000020
 800462c:	2000076c 	.word	0x2000076c

08004630 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8004630:	b590      	push	{r4, r7, lr}
 8004632:	b08b      	sub	sp, #44	@ 0x2c
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	603a      	str	r2, [r7, #0]
 800463a:	71fb      	strb	r3, [r7, #7]
 800463c:	460b      	mov	r3, r1
 800463e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <SD_disk_ioctl+0x1e>
 800464a:	2304      	movs	r3, #4
 800464c:	e113      	b.n	8004876 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8004654:	79bb      	ldrb	r3, [r7, #6]
 8004656:	2b05      	cmp	r3, #5
 8004658:	d124      	bne.n	80046a4 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d012      	beq.n	8004688 <SD_disk_ioctl+0x58>
 8004662:	2b02      	cmp	r3, #2
 8004664:	dc1a      	bgt.n	800469c <SD_disk_ioctl+0x6c>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <SD_disk_ioctl+0x40>
 800466a:	2b01      	cmp	r3, #1
 800466c:	d006      	beq.n	800467c <SD_disk_ioctl+0x4c>
 800466e:	e015      	b.n	800469c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8004670:	f7ff fd16 	bl	80040a0 <SD_PowerOff>
      res = RES_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800467a:	e0fa      	b.n	8004872 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800467c:	f7ff fcce 	bl	800401c <SD_PowerOn>
      res = RES_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004686:	e0f4      	b.n	8004872 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	1c5c      	adds	r4, r3, #1
 800468c:	f7ff fd14 	bl	80040b8 <SD_CheckPower>
 8004690:	4603      	mov	r3, r0
 8004692:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800469a:	e0ea      	b.n	8004872 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800469c:	2304      	movs	r3, #4
 800469e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046a2:	e0e6      	b.n	8004872 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 80046a4:	4b76      	ldr	r3, [pc, #472]	@ (8004880 <SD_disk_ioctl+0x250>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e0df      	b.n	8004876 <SD_disk_ioctl+0x246>
    }
    SELECT();
 80046b6:	f7ff fc21 	bl	8003efc <SELECT>
    switch (ctrl)
 80046ba:	79bb      	ldrb	r3, [r7, #6]
 80046bc:	2b0d      	cmp	r3, #13
 80046be:	f200 80c9 	bhi.w	8004854 <SD_disk_ioctl+0x224>
 80046c2:	a201      	add	r2, pc, #4	@ (adr r2, 80046c8 <SD_disk_ioctl+0x98>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	080047bf 	.word	0x080047bf
 80046cc:	08004701 	.word	0x08004701
 80046d0:	080047af 	.word	0x080047af
 80046d4:	08004855 	.word	0x08004855
 80046d8:	08004855 	.word	0x08004855
 80046dc:	08004855 	.word	0x08004855
 80046e0:	08004855 	.word	0x08004855
 80046e4:	08004855 	.word	0x08004855
 80046e8:	08004855 	.word	0x08004855
 80046ec:	08004855 	.word	0x08004855
 80046f0:	08004855 	.word	0x08004855
 80046f4:	080047d1 	.word	0x080047d1
 80046f8:	080047f5 	.word	0x080047f5
 80046fc:	08004819 	.word	0x08004819
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004700:	2100      	movs	r1, #0
 8004702:	2049      	movs	r0, #73	@ 0x49
 8004704:	f7ff fd55 	bl	80041b2 <SD_SendCmd>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	f040 80a6 	bne.w	800485c <SD_disk_ioctl+0x22c>
 8004710:	f107 030c 	add.w	r3, r7, #12
 8004714:	2110      	movs	r1, #16
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff fcda 	bl	80040d0 <SD_RxDataBlock>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 809c 	beq.w	800485c <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8004724:	7b3b      	ldrb	r3, [r7, #12]
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	d10d      	bne.n	800474a <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800472e:	7d7b      	ldrb	r3, [r7, #21]
 8004730:	461a      	mov	r2, r3
 8004732:	7d3b      	ldrb	r3, [r7, #20]
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	b29b      	uxth	r3, r3
 8004738:	4413      	add	r3, r2
 800473a:	b29b      	uxth	r3, r3
 800473c:	3301      	adds	r3, #1
 800473e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8004740:	8bfb      	ldrh	r3, [r7, #30]
 8004742:	029a      	lsls	r2, r3, #10
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	e02d      	b.n	80047a6 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800474a:	7c7b      	ldrb	r3, [r7, #17]
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	b2da      	uxtb	r2, r3
 8004752:	7dbb      	ldrb	r3, [r7, #22]
 8004754:	09db      	lsrs	r3, r3, #7
 8004756:	b2db      	uxtb	r3, r3
 8004758:	4413      	add	r3, r2
 800475a:	b2da      	uxtb	r2, r3
 800475c:	7d7b      	ldrb	r3, [r7, #21]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f003 0306 	and.w	r3, r3, #6
 8004766:	b2db      	uxtb	r3, r3
 8004768:	4413      	add	r3, r2
 800476a:	b2db      	uxtb	r3, r3
 800476c:	3302      	adds	r3, #2
 800476e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004772:	7d3b      	ldrb	r3, [r7, #20]
 8004774:	099b      	lsrs	r3, r3, #6
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	7cfb      	ldrb	r3, [r7, #19]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	b29b      	uxth	r3, r3
 8004780:	4413      	add	r3, r2
 8004782:	b29a      	uxth	r2, r3
 8004784:	7cbb      	ldrb	r3, [r7, #18]
 8004786:	029b      	lsls	r3, r3, #10
 8004788:	b29b      	uxth	r3, r3
 800478a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800478e:	b29b      	uxth	r3, r3
 8004790:	4413      	add	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	3301      	adds	r3, #1
 8004796:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8004798:	8bfa      	ldrh	r2, [r7, #30]
 800479a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800479e:	3b09      	subs	r3, #9
 80047a0:	409a      	lsls	r2, r3
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80047ac:	e056      	b.n	800485c <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047b4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80047bc:	e055      	b.n	800486a <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80047be:	f7ff fc13 	bl	8003fe8 <SD_ReadyWait>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2bff      	cmp	r3, #255	@ 0xff
 80047c6:	d14b      	bne.n	8004860 <SD_disk_ioctl+0x230>
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80047ce:	e047      	b.n	8004860 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80047d0:	2100      	movs	r1, #0
 80047d2:	2049      	movs	r0, #73	@ 0x49
 80047d4:	f7ff fced 	bl	80041b2 <SD_SendCmd>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d142      	bne.n	8004864 <SD_disk_ioctl+0x234>
 80047de:	2110      	movs	r1, #16
 80047e0:	6a38      	ldr	r0, [r7, #32]
 80047e2:	f7ff fc75 	bl	80040d0 <SD_RxDataBlock>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d03b      	beq.n	8004864 <SD_disk_ioctl+0x234>
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80047f2:	e037      	b.n	8004864 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80047f4:	2100      	movs	r1, #0
 80047f6:	204a      	movs	r0, #74	@ 0x4a
 80047f8:	f7ff fcdb 	bl	80041b2 <SD_SendCmd>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d132      	bne.n	8004868 <SD_disk_ioctl+0x238>
 8004802:	2110      	movs	r1, #16
 8004804:	6a38      	ldr	r0, [r7, #32]
 8004806:	f7ff fc63 	bl	80040d0 <SD_RxDataBlock>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02b      	beq.n	8004868 <SD_disk_ioctl+0x238>
 8004810:	2300      	movs	r3, #0
 8004812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8004816:	e027      	b.n	8004868 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8004818:	2100      	movs	r1, #0
 800481a:	207a      	movs	r0, #122	@ 0x7a
 800481c:	f7ff fcc9 	bl	80041b2 <SD_SendCmd>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d116      	bne.n	8004854 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8004826:	2300      	movs	r3, #0
 8004828:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800482c:	e00b      	b.n	8004846 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800482e:	6a3c      	ldr	r4, [r7, #32]
 8004830:	1c63      	adds	r3, r4, #1
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	f7ff fbae 	bl	8003f94 <SPI_RxByte>
 8004838:	4603      	mov	r3, r0
 800483a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800483c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004840:	3301      	adds	r3, #1
 8004842:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8004846:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800484a:	2b03      	cmp	r3, #3
 800484c:	d9ef      	bls.n	800482e <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8004854:	2304      	movs	r3, #4
 8004856:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800485a:	e006      	b.n	800486a <SD_disk_ioctl+0x23a>
      break;
 800485c:	bf00      	nop
 800485e:	e004      	b.n	800486a <SD_disk_ioctl+0x23a>
      break;
 8004860:	bf00      	nop
 8004862:	e002      	b.n	800486a <SD_disk_ioctl+0x23a>
      break;
 8004864:	bf00      	nop
 8004866:	e000      	b.n	800486a <SD_disk_ioctl+0x23a>
      break;
 8004868:	bf00      	nop
    }
    DESELECT();
 800486a:	f7ff fb53 	bl	8003f14 <DESELECT>
    SPI_RxByte();
 800486e:	f7ff fb91 	bl	8003f94 <SPI_RxByte>
  }
  return res;
 8004872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004876:	4618      	mov	r0, r3
 8004878:	372c      	adds	r7, #44	@ 0x2c
 800487a:	46bd      	mov	sp, r7
 800487c:	bd90      	pop	{r4, r7, pc}
 800487e:	bf00      	nop
 8004880:	20000020 	.word	0x20000020

08004884 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	4a08      	ldr	r2, [pc, #32]	@ (80048b4 <disk_status+0x30>)
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	79fa      	ldrb	r2, [r7, #7]
 800489c:	4905      	ldr	r1, [pc, #20]	@ (80048b4 <disk_status+0x30>)
 800489e:	440a      	add	r2, r1
 80048a0:	7a12      	ldrb	r2, [r2, #8]
 80048a2:	4610      	mov	r0, r2
 80048a4:	4798      	blx	r3
 80048a6:	4603      	mov	r3, r0
 80048a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000998 	.word	0x20000998

080048b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004904 <disk_initialize+0x4c>)
 80048ca:	5cd3      	ldrb	r3, [r2, r3]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d114      	bne.n	80048fa <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004904 <disk_initialize+0x4c>)
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	79fa      	ldrb	r2, [r7, #7]
 80048de:	4909      	ldr	r1, [pc, #36]	@ (8004904 <disk_initialize+0x4c>)
 80048e0:	440a      	add	r2, r1
 80048e2:	7a12      	ldrb	r2, [r2, #8]
 80048e4:	4610      	mov	r0, r2
 80048e6:	4798      	blx	r3
 80048e8:	4603      	mov	r3, r0
 80048ea:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80048f2:	79fb      	ldrb	r3, [r7, #7]
 80048f4:	4a03      	ldr	r2, [pc, #12]	@ (8004904 <disk_initialize+0x4c>)
 80048f6:	2101      	movs	r1, #1
 80048f8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20000998 	.word	0x20000998

08004908 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4603      	mov	r3, r0
 8004916:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	4a0a      	ldr	r2, [pc, #40]	@ (8004944 <disk_read+0x3c>)
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	689c      	ldr	r4, [r3, #8]
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	4a07      	ldr	r2, [pc, #28]	@ (8004944 <disk_read+0x3c>)
 8004928:	4413      	add	r3, r2
 800492a:	7a18      	ldrb	r0, [r3, #8]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	47a0      	blx	r4
 8004934:	4603      	mov	r3, r0
 8004936:	75fb      	strb	r3, [r7, #23]
  return res;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
}
 800493a:	4618      	mov	r0, r3
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd90      	pop	{r4, r7, pc}
 8004942:	bf00      	nop
 8004944:	20000998 	.word	0x20000998

08004948 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004948:	b590      	push	{r4, r7, lr}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4603      	mov	r3, r0
 8004956:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <disk_write+0x3c>)
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	68dc      	ldr	r4, [r3, #12]
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	4a07      	ldr	r2, [pc, #28]	@ (8004984 <disk_write+0x3c>)
 8004968:	4413      	add	r3, r2
 800496a:	7a18      	ldrb	r0, [r3, #8]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	47a0      	blx	r4
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]
  return res;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
}
 800497a:	4618      	mov	r0, r3
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	bd90      	pop	{r4, r7, pc}
 8004982:	bf00      	nop
 8004984:	20000998 	.word	0x20000998

08004988 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	603a      	str	r2, [r7, #0]
 8004992:	71fb      	strb	r3, [r7, #7]
 8004994:	460b      	mov	r3, r1
 8004996:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	4a09      	ldr	r2, [pc, #36]	@ (80049c0 <disk_ioctl+0x38>)
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	79fa      	ldrb	r2, [r7, #7]
 80049a6:	4906      	ldr	r1, [pc, #24]	@ (80049c0 <disk_ioctl+0x38>)
 80049a8:	440a      	add	r2, r1
 80049aa:	7a10      	ldrb	r0, [r2, #8]
 80049ac:	79b9      	ldrb	r1, [r7, #6]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	4798      	blx	r3
 80049b2:	4603      	mov	r3, r0
 80049b4:	73fb      	strb	r3, [r7, #15]
  return res;
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000998 	.word	0x20000998

080049c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	3301      	adds	r3, #1
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80049d4:	89fb      	ldrh	r3, [r7, #14]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	b21a      	sxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	b21b      	sxth	r3, r3
 80049e0:	4313      	orrs	r3, r2
 80049e2:	b21b      	sxth	r3, r3
 80049e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80049e6:	89fb      	ldrh	r3, [r7, #14]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3303      	adds	r3, #3
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	3202      	adds	r2, #2
 8004a0c:	7812      	ldrb	r2, [r2, #0]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	3201      	adds	r2, #1
 8004a1a:	7812      	ldrb	r2, [r2, #0]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	7812      	ldrb	r2, [r2, #0]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60fb      	str	r3, [r7, #12]
	return rv;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	460b      	mov	r3, r1
 8004a44:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	887a      	ldrh	r2, [r7, #2]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	887b      	ldrh	r3, [r7, #2]
 8004a54:	0a1b      	lsrs	r3, r3, #8
 8004a56:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	607a      	str	r2, [r7, #4]
 8004a5e:	887a      	ldrh	r2, [r7, #2]
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	0a1b      	lsrs	r3, r3, #8
 8004aae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	1c53      	adds	r3, r2, #1
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	6179      	str	r1, [r7, #20]
 8004aee:	7812      	ldrb	r2, [r2, #0]
 8004af0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f1      	bne.n	8004ae2 <mem_cpy+0x1a>
	}
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004b0a:	b480      	push	{r7}
 8004b0c:	b087      	sub	sp, #28
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	617a      	str	r2, [r7, #20]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	607b      	str	r3, [r7, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f3      	bne.n	8004b1a <mem_set+0x10>
}
 8004b32:	bf00      	nop
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004b40:	b480      	push	{r7}
 8004b42:	b089      	sub	sp, #36	@ 0x24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	61fa      	str	r2, [r7, #28]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	4619      	mov	r1, r3
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	61ba      	str	r2, [r7, #24]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	1acb      	subs	r3, r1, r3
 8004b6c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <mem_cmp+0x40>
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0eb      	beq.n	8004b58 <mem_cmp+0x18>

	return r;
 8004b80:	697b      	ldr	r3, [r7, #20]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3724      	adds	r7, #36	@ 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004b98:	e002      	b.n	8004ba0 <chk_chr+0x12>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <chk_chr+0x26>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d1f2      	bne.n	8004b9a <chk_chr+0xc>
	return *str;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60bb      	str	r3, [r7, #8]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	e029      	b.n	8004c2c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004bd8:	4a27      	ldr	r2, [pc, #156]	@ (8004c78 <chk_lock+0xb4>)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	4413      	add	r3, r2
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01d      	beq.n	8004c22 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004be6:	4a24      	ldr	r2, [pc, #144]	@ (8004c78 <chk_lock+0xb4>)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	4413      	add	r3, r2
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d116      	bne.n	8004c26 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c78 <chk_lock+0xb4>)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	4413      	add	r3, r2
 8004c00:	3304      	adds	r3, #4
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d10c      	bne.n	8004c26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8004c78 <chk_lock+0xb4>)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	011b      	lsls	r3, r3, #4
 8004c12:	4413      	add	r3, r2
 8004c14:	3308      	adds	r3, #8
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d102      	bne.n	8004c26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c20:	e007      	b.n	8004c32 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004c22:	2301      	movs	r3, #1
 8004c24:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d9d2      	bls.n	8004bd8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d109      	bne.n	8004c4c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d102      	bne.n	8004c44 <chk_lock+0x80>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d101      	bne.n	8004c48 <chk_lock+0x84>
 8004c44:	2300      	movs	r3, #0
 8004c46:	e010      	b.n	8004c6a <chk_lock+0xa6>
 8004c48:	2312      	movs	r3, #18
 8004c4a:	e00e      	b.n	8004c6a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d108      	bne.n	8004c64 <chk_lock+0xa0>
 8004c52:	4a09      	ldr	r2, [pc, #36]	@ (8004c78 <chk_lock+0xb4>)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	4413      	add	r3, r2
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c62:	d101      	bne.n	8004c68 <chk_lock+0xa4>
 8004c64:	2310      	movs	r3, #16
 8004c66:	e000      	b.n	8004c6a <chk_lock+0xa6>
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000778 	.word	0x20000778

08004c7c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004c82:	2300      	movs	r3, #0
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	e002      	b.n	8004c8e <enq_lock+0x12>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	607b      	str	r3, [r7, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d806      	bhi.n	8004ca2 <enq_lock+0x26>
 8004c94:	4a09      	ldr	r2, [pc, #36]	@ (8004cbc <enq_lock+0x40>)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	4413      	add	r3, r2
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f2      	bne.n	8004c88 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	bf14      	ite	ne
 8004ca8:	2301      	movne	r3, #1
 8004caa:	2300      	moveq	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000778 	.word	0x20000778

08004cc0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e01f      	b.n	8004d10 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004cd0:	4a41      	ldr	r2, [pc, #260]	@ (8004dd8 <inc_lock+0x118>)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	4413      	add	r3, r2
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d113      	bne.n	8004d0a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004ce2:	4a3d      	ldr	r2, [pc, #244]	@ (8004dd8 <inc_lock+0x118>)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	011b      	lsls	r3, r3, #4
 8004ce8:	4413      	add	r3, r2
 8004cea:	3304      	adds	r3, #4
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d109      	bne.n	8004d0a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004cf6:	4a38      	ldr	r2, [pc, #224]	@ (8004dd8 <inc_lock+0x118>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3308      	adds	r3, #8
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d006      	beq.n	8004d18 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d9dc      	bls.n	8004cd0 <inc_lock+0x10>
 8004d16:	e000      	b.n	8004d1a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004d18:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d132      	bne.n	8004d86 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	e002      	b.n	8004d2c <inc_lock+0x6c>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d806      	bhi.n	8004d40 <inc_lock+0x80>
 8004d32:	4a29      	ldr	r2, [pc, #164]	@ (8004dd8 <inc_lock+0x118>)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	4413      	add	r3, r2
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f2      	bne.n	8004d26 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d101      	bne.n	8004d4a <inc_lock+0x8a>
 8004d46:	2300      	movs	r3, #0
 8004d48:	e040      	b.n	8004dcc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4922      	ldr	r1, [pc, #136]	@ (8004dd8 <inc_lock+0x118>)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	440b      	add	r3, r1
 8004d56:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	491e      	ldr	r1, [pc, #120]	@ (8004dd8 <inc_lock+0x118>)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	440b      	add	r3, r1
 8004d64:	3304      	adds	r3, #4
 8004d66:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	491a      	ldr	r1, [pc, #104]	@ (8004dd8 <inc_lock+0x118>)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	440b      	add	r3, r1
 8004d74:	3308      	adds	r3, #8
 8004d76:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004d78:	4a17      	ldr	r2, [pc, #92]	@ (8004dd8 <inc_lock+0x118>)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	4413      	add	r3, r2
 8004d80:	330c      	adds	r3, #12
 8004d82:	2200      	movs	r2, #0
 8004d84:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <inc_lock+0xe0>
 8004d8c:	4a12      	ldr	r2, [pc, #72]	@ (8004dd8 <inc_lock+0x118>)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	4413      	add	r3, r2
 8004d94:	330c      	adds	r3, #12
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <inc_lock+0xe0>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e015      	b.n	8004dcc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d108      	bne.n	8004db8 <inc_lock+0xf8>
 8004da6:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd8 <inc_lock+0x118>)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	4413      	add	r3, r2
 8004dae:	330c      	adds	r3, #12
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	e001      	b.n	8004dbc <inc_lock+0xfc>
 8004db8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004dbc:	4906      	ldr	r1, [pc, #24]	@ (8004dd8 <inc_lock+0x118>)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	440b      	add	r3, r1
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3301      	adds	r3, #1
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	20000778 	.word	0x20000778

08004ddc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d825      	bhi.n	8004e3c <dec_lock+0x60>
		n = Files[i].ctr;
 8004df0:	4a17      	ldr	r2, [pc, #92]	@ (8004e50 <dec_lock+0x74>)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	4413      	add	r3, r2
 8004df8:	330c      	adds	r3, #12
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004dfe:	89fb      	ldrh	r3, [r7, #14]
 8004e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e04:	d101      	bne.n	8004e0a <dec_lock+0x2e>
 8004e06:	2300      	movs	r3, #0
 8004e08:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004e0a:	89fb      	ldrh	r3, [r7, #14]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <dec_lock+0x3a>
 8004e10:	89fb      	ldrh	r3, [r7, #14]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004e16:	4a0e      	ldr	r2, [pc, #56]	@ (8004e50 <dec_lock+0x74>)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	4413      	add	r3, r2
 8004e1e:	330c      	adds	r3, #12
 8004e20:	89fa      	ldrh	r2, [r7, #14]
 8004e22:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004e24:	89fb      	ldrh	r3, [r7, #14]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <dec_lock+0x5a>
 8004e2a:	4a09      	ldr	r2, [pc, #36]	@ (8004e50 <dec_lock+0x74>)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	4413      	add	r3, r2
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	737b      	strb	r3, [r7, #13]
 8004e3a:	e001      	b.n	8004e40 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004e40:	7b7b      	ldrb	r3, [r7, #13]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000778 	.word	0x20000778

08004e54 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e010      	b.n	8004e84 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004e62:	4a0d      	ldr	r2, [pc, #52]	@ (8004e98 <clear_lock+0x44>)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	4413      	add	r3, r2
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d105      	bne.n	8004e7e <clear_lock+0x2a>
 8004e72:	4a09      	ldr	r2, [pc, #36]	@ (8004e98 <clear_lock+0x44>)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	4413      	add	r3, r2
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3301      	adds	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d9eb      	bls.n	8004e62 <clear_lock+0xe>
	}
}
 8004e8a:	bf00      	nop
 8004e8c:	bf00      	nop
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	20000778 	.word	0x20000778

08004e9c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	78db      	ldrb	r3, [r3, #3]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d034      	beq.n	8004f1a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	7858      	ldrb	r0, [r3, #1]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	f7ff fd40 	bl	8004948 <disk_write>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
 8004ed2:	e022      	b.n	8004f1a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	1ad2      	subs	r2, r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d217      	bcs.n	8004f1a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	789b      	ldrb	r3, [r3, #2]
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	e010      	b.n	8004f14 <sync_window+0x78>
					wsect += fs->fsize;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4413      	add	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	7858      	ldrb	r0, [r3, #1]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f06:	2301      	movs	r3, #1
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	f7ff fd1d 	bl	8004948 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d8eb      	bhi.n	8004ef2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d01b      	beq.n	8004f74 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff ffad 	bl	8004e9c <sync_window>
 8004f42:	4603      	mov	r3, r0
 8004f44:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d113      	bne.n	8004f74 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7858      	ldrb	r0, [r3, #1]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f56:	2301      	movs	r3, #1
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	f7ff fcd5 	bl	8004908 <disk_read>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d004      	beq.n	8004f6e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004f64:	f04f 33ff 	mov.w	r3, #4294967295
 8004f68:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ff87 	bl	8004e9c <sync_window>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d159      	bne.n	800504c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d149      	bne.n	8005034 <sync_fs+0xb4>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	791b      	ldrb	r3, [r3, #4]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d145      	bne.n	8005034 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	899b      	ldrh	r3, [r3, #12]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	f7ff fda8 	bl	8004b0a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3338      	adds	r3, #56	@ 0x38
 8004fbe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004fc2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fd37 	bl	8004a3a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	3338      	adds	r3, #56	@ 0x38
 8004fd0:	4921      	ldr	r1, [pc, #132]	@ (8005058 <sync_fs+0xd8>)
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff fd4c 	bl	8004a70 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3338      	adds	r3, #56	@ 0x38
 8004fdc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004fe0:	491e      	ldr	r1, [pc, #120]	@ (800505c <sync_fs+0xdc>)
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff fd44 	bl	8004a70 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3338      	adds	r3, #56	@ 0x38
 8004fec:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f7ff fd3a 	bl	8004a70 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3338      	adds	r3, #56	@ 0x38
 8005000:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f7ff fd30 	bl	8004a70 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	7858      	ldrb	r0, [r3, #1]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005028:	2301      	movs	r3, #1
 800502a:	f7ff fc8d 	bl	8004948 <disk_write>
			fs->fsi_flag = 0;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	785b      	ldrb	r3, [r3, #1]
 8005038:	2200      	movs	r2, #0
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff fca3 	bl	8004988 <disk_ioctl>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <sync_fs+0xcc>
 8005048:	2301      	movs	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800504c:	7bfb      	ldrb	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	41615252 	.word	0x41615252
 800505c:	61417272 	.word	0x61417272

08005060 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	3b02      	subs	r3, #2
 800506e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	3b02      	subs	r3, #2
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d301      	bcc.n	8005080 <clust2sect+0x20>
 800507c:	2300      	movs	r3, #0
 800507e:	e008      	b.n	8005092 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	895b      	ldrh	r3, [r3, #10]
 8005084:	461a      	mov	r2, r3
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	fb03 f202 	mul.w	r2, r3, r2
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005090:	4413      	add	r3, r2
}
 8005092:	4618      	mov	r0, r3
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b086      	sub	sp, #24
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d904      	bls.n	80050be <get_fat+0x20>
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d302      	bcc.n	80050c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80050be:	2301      	movs	r3, #1
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	e0ba      	b.n	800523a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295
 80050c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	f000 8082 	beq.w	80051d8 <get_fat+0x13a>
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	f300 80a6 	bgt.w	8005226 <get_fat+0x188>
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d002      	beq.n	80050e4 <get_fat+0x46>
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d055      	beq.n	800518e <get_fat+0xf0>
 80050e2:	e0a0      	b.n	8005226 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	899b      	ldrh	r3, [r3, #12]
 80050fa:	4619      	mov	r1, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005102:	4413      	add	r3, r2
 8005104:	4619      	mov	r1, r3
 8005106:	6938      	ldr	r0, [r7, #16]
 8005108:	f7ff ff0c 	bl	8004f24 <move_window>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	f040 808c 	bne.w	800522c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	60fa      	str	r2, [r7, #12]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	8992      	ldrh	r2, [r2, #12]
 800511e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005122:	fb01 f202 	mul.w	r2, r1, r2
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4413      	add	r3, r2
 800512c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005130:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	899b      	ldrh	r3, [r3, #12]
 800513a:	4619      	mov	r1, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005142:	4413      	add	r3, r2
 8005144:	4619      	mov	r1, r3
 8005146:	6938      	ldr	r0, [r7, #16]
 8005148:	f7ff feec 	bl	8004f24 <move_window>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d16e      	bne.n	8005230 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	899b      	ldrh	r3, [r3, #12]
 8005156:	461a      	mov	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	fbb3 f1f2 	udiv	r1, r3, r2
 800515e:	fb01 f202 	mul.w	r2, r1, r2
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4413      	add	r3, r2
 8005168:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	4313      	orrs	r3, r2
 8005172:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <get_fat+0xe6>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	e002      	b.n	800518a <get_fat+0xec>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518a:	617b      	str	r3, [r7, #20]
			break;
 800518c:	e055      	b.n	800523a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	899b      	ldrh	r3, [r3, #12]
 8005196:	085b      	lsrs	r3, r3, #1
 8005198:	b29b      	uxth	r3, r3
 800519a:	4619      	mov	r1, r3
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	fbb3 f3f1 	udiv	r3, r3, r1
 80051a2:	4413      	add	r3, r2
 80051a4:	4619      	mov	r1, r3
 80051a6:	6938      	ldr	r0, [r7, #16]
 80051a8:	f7ff febc 	bl	8004f24 <move_window>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d140      	bne.n	8005234 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	8992      	ldrh	r2, [r2, #12]
 80051c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80051c4:	fb00 f202 	mul.w	r2, r0, r2
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	440b      	add	r3, r1
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fbf9 	bl	80049c4 <ld_word>
 80051d2:	4603      	mov	r3, r0
 80051d4:	617b      	str	r3, [r7, #20]
			break;
 80051d6:	e030      	b.n	800523a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	899b      	ldrh	r3, [r3, #12]
 80051e0:	089b      	lsrs	r3, r3, #2
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	4619      	mov	r1, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80051ec:	4413      	add	r3, r2
 80051ee:	4619      	mov	r1, r3
 80051f0:	6938      	ldr	r0, [r7, #16]
 80051f2:	f7ff fe97 	bl	8004f24 <move_window>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d11d      	bne.n	8005238 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	8992      	ldrh	r2, [r2, #12]
 800520a:	fbb3 f0f2 	udiv	r0, r3, r2
 800520e:	fb00 f202 	mul.w	r2, r0, r2
 8005212:	1a9b      	subs	r3, r3, r2
 8005214:	440b      	add	r3, r1
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fbec 	bl	80049f4 <ld_dword>
 800521c:	4603      	mov	r3, r0
 800521e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005222:	617b      	str	r3, [r7, #20]
			break;
 8005224:	e009      	b.n	800523a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005226:	2301      	movs	r3, #1
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	e006      	b.n	800523a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800522c:	bf00      	nop
 800522e:	e004      	b.n	800523a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005230:	bf00      	nop
 8005232:	e002      	b.n	800523a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005234:	bf00      	nop
 8005236:	e000      	b.n	800523a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005238:	bf00      	nop
		}
	}

	return val;
 800523a:	697b      	ldr	r3, [r7, #20]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b089      	sub	sp, #36	@ 0x24
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005250:	2302      	movs	r3, #2
 8005252:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2b01      	cmp	r3, #1
 8005258:	f240 8109 	bls.w	800546e <put_fat+0x22a>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	69db      	ldr	r3, [r3, #28]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	429a      	cmp	r2, r3
 8005264:	f080 8103 	bcs.w	800546e <put_fat+0x22a>
		switch (fs->fs_type) {
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b03      	cmp	r3, #3
 800526e:	f000 80b6 	beq.w	80053de <put_fat+0x19a>
 8005272:	2b03      	cmp	r3, #3
 8005274:	f300 80fb 	bgt.w	800546e <put_fat+0x22a>
 8005278:	2b01      	cmp	r3, #1
 800527a:	d003      	beq.n	8005284 <put_fat+0x40>
 800527c:	2b02      	cmp	r3, #2
 800527e:	f000 8083 	beq.w	8005388 <put_fat+0x144>
 8005282:	e0f4      	b.n	800546e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	085b      	lsrs	r3, r3, #1
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4413      	add	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	899b      	ldrh	r3, [r3, #12]
 800529a:	4619      	mov	r1, r3
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	fbb3 f3f1 	udiv	r3, r3, r1
 80052a2:	4413      	add	r3, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f7ff fe3c 	bl	8004f24 <move_window>
 80052ac:	4603      	mov	r3, r0
 80052ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052b0:	7ffb      	ldrb	r3, [r7, #31]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f040 80d4 	bne.w	8005460 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	61ba      	str	r2, [r7, #24]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	8992      	ldrh	r2, [r2, #12]
 80052c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80052cc:	fb00 f202 	mul.w	r2, r0, r2
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	440b      	add	r3, r1
 80052d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00d      	beq.n	80052fc <put_fat+0xb8>
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	b25b      	sxtb	r3, r3
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	b25a      	sxtb	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	b25b      	sxtb	r3, r3
 80052f4:	4313      	orrs	r3, r2
 80052f6:	b25b      	sxtb	r3, r3
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	e001      	b.n	8005300 <put_fat+0xbc>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	899b      	ldrh	r3, [r3, #12]
 8005312:	4619      	mov	r1, r3
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	fbb3 f3f1 	udiv	r3, r3, r1
 800531a:	4413      	add	r3, r2
 800531c:	4619      	mov	r1, r3
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff fe00 	bl	8004f24 <move_window>
 8005324:	4603      	mov	r3, r0
 8005326:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005328:	7ffb      	ldrb	r3, [r7, #31]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 809a 	bne.w	8005464 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	899b      	ldrh	r3, [r3, #12]
 800533a:	461a      	mov	r2, r3
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005342:	fb00 f202 	mul.w	r2, r0, r2
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	440b      	add	r3, r1
 800534a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <put_fat+0x11a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	b2db      	uxtb	r3, r3
 800535c:	e00e      	b.n	800537c <put_fat+0x138>
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	b25b      	sxtb	r3, r3
 8005364:	f023 030f 	bic.w	r3, r3, #15
 8005368:	b25a      	sxtb	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	0a1b      	lsrs	r3, r3, #8
 800536e:	b25b      	sxtb	r3, r3
 8005370:	f003 030f 	and.w	r3, r3, #15
 8005374:	b25b      	sxtb	r3, r3
 8005376:	4313      	orrs	r3, r2
 8005378:	b25b      	sxtb	r3, r3
 800537a:	b2db      	uxtb	r3, r3
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2201      	movs	r2, #1
 8005384:	70da      	strb	r2, [r3, #3]
			break;
 8005386:	e072      	b.n	800546e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	899b      	ldrh	r3, [r3, #12]
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	b29b      	uxth	r3, r3
 8005394:	4619      	mov	r1, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	fbb3 f3f1 	udiv	r3, r3, r1
 800539c:	4413      	add	r3, r2
 800539e:	4619      	mov	r1, r3
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff fdbf 	bl	8004f24 <move_window>
 80053a6:	4603      	mov	r3, r0
 80053a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053aa:	7ffb      	ldrb	r3, [r7, #31]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d15b      	bne.n	8005468 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	8992      	ldrh	r2, [r2, #12]
 80053be:	fbb3 f0f2 	udiv	r0, r3, r2
 80053c2:	fb00 f202 	mul.w	r2, r0, r2
 80053c6:	1a9b      	subs	r3, r3, r2
 80053c8:	440b      	add	r3, r1
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	b292      	uxth	r2, r2
 80053ce:	4611      	mov	r1, r2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fb32 	bl	8004a3a <st_word>
			fs->wflag = 1;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	70da      	strb	r2, [r3, #3]
			break;
 80053dc:	e047      	b.n	800546e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	899b      	ldrh	r3, [r3, #12]
 80053e6:	089b      	lsrs	r3, r3, #2
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	4619      	mov	r1, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80053f2:	4413      	add	r3, r2
 80053f4:	4619      	mov	r1, r3
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7ff fd94 	bl	8004f24 <move_window>
 80053fc:	4603      	mov	r3, r0
 80053fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005400:	7ffb      	ldrb	r3, [r7, #31]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d132      	bne.n	800546c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	8992      	ldrh	r2, [r2, #12]
 800541a:	fbb3 f0f2 	udiv	r0, r3, r2
 800541e:	fb00 f202 	mul.w	r2, r0, r2
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	440b      	add	r3, r1
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff fae4 	bl	80049f4 <ld_dword>
 800542c:	4603      	mov	r3, r0
 800542e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005432:	4323      	orrs	r3, r4
 8005434:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	8992      	ldrh	r2, [r2, #12]
 8005444:	fbb3 f0f2 	udiv	r0, r3, r2
 8005448:	fb00 f202 	mul.w	r2, r0, r2
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	440b      	add	r3, r1
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fb0c 	bl	8004a70 <st_dword>
			fs->wflag = 1;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	70da      	strb	r2, [r3, #3]
			break;
 800545e:	e006      	b.n	800546e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005460:	bf00      	nop
 8005462:	e004      	b.n	800546e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005464:	bf00      	nop
 8005466:	e002      	b.n	800546e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005468:	bf00      	nop
 800546a:	e000      	b.n	800546e <put_fat+0x22a>
			if (res != FR_OK) break;
 800546c:	bf00      	nop
		}
	}
	return res;
 800546e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3724      	adds	r7, #36	@ 0x24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd90      	pop	{r4, r7, pc}

08005478 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d904      	bls.n	800549e <remove_chain+0x26>
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	429a      	cmp	r2, r3
 800549c:	d301      	bcc.n	80054a2 <remove_chain+0x2a>
 800549e:	2302      	movs	r3, #2
 80054a0:	e04b      	b.n	800553a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00c      	beq.n	80054c2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80054a8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	69b8      	ldr	r0, [r7, #24]
 80054b0:	f7ff fec8 	bl	8005244 <put_fat>
 80054b4:	4603      	mov	r3, r0
 80054b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80054b8:	7ffb      	ldrb	r3, [r7, #31]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <remove_chain+0x4a>
 80054be:	7ffb      	ldrb	r3, [r7, #31]
 80054c0:	e03b      	b.n	800553a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f7ff fdea 	bl	800509e <get_fat>
 80054ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d031      	beq.n	8005536 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <remove_chain+0x64>
 80054d8:	2302      	movs	r3, #2
 80054da:	e02e      	b.n	800553a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e2:	d101      	bne.n	80054e8 <remove_chain+0x70>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e028      	b.n	800553a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80054e8:	2200      	movs	r2, #0
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	69b8      	ldr	r0, [r7, #24]
 80054ee:	f7ff fea9 	bl	8005244 <put_fat>
 80054f2:	4603      	mov	r3, r0
 80054f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80054f6:	7ffb      	ldrb	r3, [r7, #31]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <remove_chain+0x88>
 80054fc:	7ffb      	ldrb	r3, [r7, #31]
 80054fe:	e01c      	b.n	800553a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	699a      	ldr	r2, [r3, #24]
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	3b02      	subs	r3, #2
 800550a:	429a      	cmp	r2, r3
 800550c:	d20b      	bcs.n	8005526 <remove_chain+0xae>
			fs->free_clst++;
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	791b      	ldrb	r3, [r3, #4]
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	b2da      	uxtb	r2, r3
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	429a      	cmp	r2, r3
 8005532:	d3c6      	bcc.n	80054c2 <remove_chain+0x4a>
 8005534:	e000      	b.n	8005538 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005536:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b088      	sub	sp, #32
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10d      	bne.n	8005574 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <create_chain+0x2c>
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	429a      	cmp	r2, r3
 800556c:	d31b      	bcc.n	80055a6 <create_chain+0x64>
 800556e:	2301      	movs	r3, #1
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	e018      	b.n	80055a6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7ff fd91 	bl	800509e <get_fat>
 800557c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d801      	bhi.n	8005588 <create_chain+0x46>
 8005584:	2301      	movs	r3, #1
 8005586:	e070      	b.n	800566a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558e:	d101      	bne.n	8005594 <create_chain+0x52>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	e06a      	b.n	800566a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	429a      	cmp	r2, r3
 800559c:	d201      	bcs.n	80055a2 <create_chain+0x60>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	e063      	b.n	800566a <create_chain+0x128>
		scl = clst;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	3301      	adds	r3, #1
 80055ae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d307      	bcc.n	80055ca <create_chain+0x88>
				ncl = 2;
 80055ba:	2302      	movs	r3, #2
 80055bc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d901      	bls.n	80055ca <create_chain+0x88>
 80055c6:	2300      	movs	r3, #0
 80055c8:	e04f      	b.n	800566a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80055ca:	69f9      	ldr	r1, [r7, #28]
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff fd66 	bl	800509e <get_fat>
 80055d2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00e      	beq.n	80055f8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d003      	beq.n	80055e8 <create_chain+0xa6>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e6:	d101      	bne.n	80055ec <create_chain+0xaa>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	e03e      	b.n	800566a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d1da      	bne.n	80055aa <create_chain+0x68>
 80055f4:	2300      	movs	r3, #0
 80055f6:	e038      	b.n	800566a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80055f8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80055fa:	f04f 32ff 	mov.w	r2, #4294967295
 80055fe:	69f9      	ldr	r1, [r7, #28]
 8005600:	6938      	ldr	r0, [r7, #16]
 8005602:	f7ff fe1f 	bl	8005244 <put_fat>
 8005606:	4603      	mov	r3, r0
 8005608:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800560a:	7dfb      	ldrb	r3, [r7, #23]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d109      	bne.n	8005624 <create_chain+0xe2>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d006      	beq.n	8005624 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	6938      	ldr	r0, [r7, #16]
 800561c:	f7ff fe12 	bl	8005244 <put_fat>
 8005620:	4603      	mov	r3, r0
 8005622:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d116      	bne.n	8005658 <create_chain+0x116>
		fs->last_clst = ncl;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	69fa      	ldr	r2, [r7, #28]
 800562e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	699a      	ldr	r2, [r3, #24]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	3b02      	subs	r3, #2
 800563a:	429a      	cmp	r2, r3
 800563c:	d804      	bhi.n	8005648 <create_chain+0x106>
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	1e5a      	subs	r2, r3, #1
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	791b      	ldrb	r3, [r3, #4]
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	b2da      	uxtb	r2, r3
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	711a      	strb	r2, [r3, #4]
 8005656:	e007      	b.n	8005668 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d102      	bne.n	8005664 <create_chain+0x122>
 800565e:	f04f 33ff 	mov.w	r3, #4294967295
 8005662:	e000      	b.n	8005666 <create_chain+0x124>
 8005664:	2301      	movs	r3, #1
 8005666:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005668:	69fb      	ldr	r3, [r7, #28]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3720      	adds	r7, #32
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005672:	b480      	push	{r7}
 8005674:	b087      	sub	sp, #28
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	3304      	adds	r3, #4
 8005688:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	899b      	ldrh	r3, [r3, #12]
 800568e:	461a      	mov	r2, r3
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	fbb3 f3f2 	udiv	r3, r3, r2
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	8952      	ldrh	r2, [r2, #10]
 800569a:	fbb3 f3f2 	udiv	r3, r3, r2
 800569e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1d1a      	adds	r2, r3, #4
 80056a4:	613a      	str	r2, [r7, #16]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <clmt_clust+0x42>
 80056b0:	2300      	movs	r3, #0
 80056b2:	e010      	b.n	80056d6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d307      	bcc.n	80056cc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	3304      	adds	r3, #4
 80056c8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80056ca:	e7e9      	b.n	80056a0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80056cc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	4413      	add	r3, r2
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	371c      	adds	r7, #28
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b086      	sub	sp, #24
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056f8:	d204      	bcs.n	8005704 <dir_sdi+0x22>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	f003 031f 	and.w	r3, r3, #31
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005704:	2302      	movs	r3, #2
 8005706:	e071      	b.n	80057ec <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <dir_sdi+0x46>
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b02      	cmp	r3, #2
 8005720:	d902      	bls.n	8005728 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10c      	bne.n	8005748 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	095b      	lsrs	r3, r3, #5
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	8912      	ldrh	r2, [r2, #8]
 8005736:	4293      	cmp	r3, r2
 8005738:	d301      	bcc.n	800573e <dir_sdi+0x5c>
 800573a:	2302      	movs	r3, #2
 800573c:	e056      	b.n	80057ec <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	61da      	str	r2, [r3, #28]
 8005746:	e02d      	b.n	80057a4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	895b      	ldrh	r3, [r3, #10]
 800574c:	461a      	mov	r2, r3
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	899b      	ldrh	r3, [r3, #12]
 8005752:	fb02 f303 	mul.w	r3, r2, r3
 8005756:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005758:	e019      	b.n	800578e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6979      	ldr	r1, [r7, #20]
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff fc9d 	bl	800509e <get_fat>
 8005764:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576c:	d101      	bne.n	8005772 <dir_sdi+0x90>
 800576e:	2301      	movs	r3, #1
 8005770:	e03c      	b.n	80057ec <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d904      	bls.n	8005782 <dir_sdi+0xa0>
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	429a      	cmp	r2, r3
 8005780:	d301      	bcc.n	8005786 <dir_sdi+0xa4>
 8005782:	2302      	movs	r3, #2
 8005784:	e032      	b.n	80057ec <dir_sdi+0x10a>
			ofs -= csz;
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	429a      	cmp	r2, r3
 8005794:	d2e1      	bcs.n	800575a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005796:	6979      	ldr	r1, [r7, #20]
 8005798:	6938      	ldr	r0, [r7, #16]
 800579a:	f7ff fc61 	bl	8005060 <clust2sect>
 800579e:	4602      	mov	r2, r0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <dir_sdi+0xd4>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e01a      	b.n	80057ec <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69da      	ldr	r2, [r3, #28]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	899b      	ldrh	r3, [r3, #12]
 80057be:	4619      	mov	r1, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80057c6:	441a      	add	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	899b      	ldrh	r3, [r3, #12]
 80057d6:	461a      	mov	r2, r3
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	fbb3 f0f2 	udiv	r0, r3, r2
 80057de:	fb00 f202 	mul.w	r2, r0, r2
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	18ca      	adds	r2, r1, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	3320      	adds	r3, #32
 800580a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <dir_next+0x28>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800581a:	d301      	bcc.n	8005820 <dir_next+0x2c>
 800581c:	2304      	movs	r3, #4
 800581e:	e0bb      	b.n	8005998 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	899b      	ldrh	r3, [r3, #12]
 8005824:	461a      	mov	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	fbb3 f1f2 	udiv	r1, r3, r2
 800582c:	fb01 f202 	mul.w	r2, r1, r2
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	f040 809d 	bne.w	8005972 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10b      	bne.n	8005862 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	8912      	ldrh	r2, [r2, #8]
 8005852:	4293      	cmp	r3, r2
 8005854:	f0c0 808d 	bcc.w	8005972 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	61da      	str	r2, [r3, #28]
 800585e:	2304      	movs	r3, #4
 8005860:	e09a      	b.n	8005998 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	899b      	ldrh	r3, [r3, #12]
 8005866:	461a      	mov	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	fbb3 f3f2 	udiv	r3, r3, r2
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	8952      	ldrh	r2, [r2, #10]
 8005872:	3a01      	subs	r2, #1
 8005874:	4013      	ands	r3, r2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d17b      	bne.n	8005972 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f7ff fc0b 	bl	800509e <get_fat>
 8005888:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d801      	bhi.n	8005894 <dir_next+0xa0>
 8005890:	2302      	movs	r3, #2
 8005892:	e081      	b.n	8005998 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d101      	bne.n	80058a0 <dir_next+0xac>
 800589c:	2301      	movs	r3, #1
 800589e:	e07b      	b.n	8005998 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d359      	bcc.n	800595e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	61da      	str	r2, [r3, #28]
 80058b6:	2304      	movs	r3, #4
 80058b8:	e06e      	b.n	8005998 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	4619      	mov	r1, r3
 80058c2:	4610      	mov	r0, r2
 80058c4:	f7ff fe3d 	bl	8005542 <create_chain>
 80058c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <dir_next+0xe0>
 80058d0:	2307      	movs	r3, #7
 80058d2:	e061      	b.n	8005998 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <dir_next+0xea>
 80058da:	2302      	movs	r3, #2
 80058dc:	e05c      	b.n	8005998 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e4:	d101      	bne.n	80058ea <dir_next+0xf6>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e056      	b.n	8005998 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7ff fad6 	bl	8004e9c <sync_window>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <dir_next+0x106>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e04e      	b.n	8005998 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	899b      	ldrh	r3, [r3, #12]
 8005904:	461a      	mov	r2, r3
 8005906:	2100      	movs	r1, #0
 8005908:	f7ff f8ff 	bl	8004b0a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800590c:	2300      	movs	r3, #0
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	6979      	ldr	r1, [r7, #20]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f7ff fba4 	bl	8005060 <clust2sect>
 8005918:	4602      	mov	r2, r0
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	635a      	str	r2, [r3, #52]	@ 0x34
 800591e:	e012      	b.n	8005946 <dir_next+0x152>
						fs->wflag = 1;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff fab8 	bl	8004e9c <sync_window>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <dir_next+0x142>
 8005932:	2301      	movs	r3, #1
 8005934:	e030      	b.n	8005998 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	3301      	adds	r3, #1
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	635a      	str	r2, [r3, #52]	@ 0x34
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	895b      	ldrh	r3, [r3, #10]
 800594a:	461a      	mov	r2, r3
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4293      	cmp	r3, r2
 8005950:	d3e6      	bcc.n	8005920 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad2      	subs	r2, r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005964:	6979      	ldr	r1, [r7, #20]
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7ff fb7a 	bl	8005060 <clust2sect>
 800596c:	4602      	mov	r2, r0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	899b      	ldrh	r3, [r3, #12]
 8005982:	461a      	mov	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	fbb3 f0f2 	udiv	r0, r3, r2
 800598a:	fb00 f202 	mul.w	r2, r0, r2
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	18ca      	adds	r2, r1, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80059b0:	2100      	movs	r1, #0
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff fe95 	bl	80056e2 <dir_sdi>
 80059b8:	4603      	mov	r3, r0
 80059ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d12b      	bne.n	8005a1a <dir_alloc+0x7a>
		n = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	4619      	mov	r1, r3
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f7ff faa9 	bl	8004f24 <move_window>
 80059d2:	4603      	mov	r3, r0
 80059d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d11d      	bne.n	8005a18 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2be5      	cmp	r3, #229	@ 0xe5
 80059e4:	d004      	beq.n	80059f0 <dir_alloc+0x50>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d107      	bne.n	8005a00 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	3301      	adds	r3, #1
 80059f4:	613b      	str	r3, [r7, #16]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d102      	bne.n	8005a04 <dir_alloc+0x64>
 80059fe:	e00c      	b.n	8005a1a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005a00:	2300      	movs	r3, #0
 8005a02:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005a04:	2101      	movs	r1, #1
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fef4 	bl	80057f4 <dir_next>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0d7      	beq.n	80059c6 <dir_alloc+0x26>
 8005a16:	e000      	b.n	8005a1a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005a18:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005a1a:	7dfb      	ldrb	r3, [r7, #23]
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d101      	bne.n	8005a24 <dir_alloc+0x84>
 8005a20:	2307      	movs	r3, #7
 8005a22:	75fb      	strb	r3, [r7, #23]
	return res;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	331a      	adds	r3, #26
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe ffc1 	bl	80049c4 <ld_word>
 8005a42:	4603      	mov	r3, r0
 8005a44:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d109      	bne.n	8005a62 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	3314      	adds	r3, #20
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe ffb6 	bl	80049c4 <ld_word>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005a62:	68fb      	ldr	r3, [r7, #12]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	331a      	adds	r3, #26
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	b292      	uxth	r2, r2
 8005a80:	4611      	mov	r1, r2
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe ffd9 	bl	8004a3a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d109      	bne.n	8005aa4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f103 0214 	add.w	r2, r3, #20
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	0c1b      	lsrs	r3, r3, #16
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f7fe ffcb 	bl	8004a3a <st_word>
	}
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	331a      	adds	r3, #26
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe ff82 	bl	80049c4 <ld_word>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <cmp_lfn+0x1e>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e059      	b.n	8005b7e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ad2:	1e5a      	subs	r2, r3, #1
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	81fb      	strh	r3, [r7, #14]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	e033      	b.n	8005b52 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005aea:	4a27      	ldr	r2, [pc, #156]	@ (8005b88 <cmp_lfn+0xdc>)
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4413      	add	r3, r2
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	4413      	add	r3, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fe ff63 	bl	80049c4 <ld_word>
 8005afe:	4603      	mov	r3, r0
 8005b00:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005b02:	89fb      	ldrh	r3, [r7, #14]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01a      	beq.n	8005b3e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2bfe      	cmp	r3, #254	@ 0xfe
 8005b0c:	d812      	bhi.n	8005b34 <cmp_lfn+0x88>
 8005b0e:	89bb      	ldrh	r3, [r7, #12]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f002 f9cd 	bl	8007eb0 <ff_wtoupper>
 8005b16:	4603      	mov	r3, r0
 8005b18:	461c      	mov	r4, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	617a      	str	r2, [r7, #20]
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	4413      	add	r3, r2
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f002 f9c1 	bl	8007eb0 <ff_wtoupper>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	429c      	cmp	r4, r3
 8005b32:	d001      	beq.n	8005b38 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005b34:	2300      	movs	r3, #0
 8005b36:	e022      	b.n	8005b7e <cmp_lfn+0xd2>
			}
			wc = uc;
 8005b38:	89bb      	ldrh	r3, [r7, #12]
 8005b3a:	81fb      	strh	r3, [r7, #14]
 8005b3c:	e006      	b.n	8005b4c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005b3e:	89bb      	ldrh	r3, [r7, #12]
 8005b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d001      	beq.n	8005b4c <cmp_lfn+0xa0>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e018      	b.n	8005b7e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b0c      	cmp	r3, #12
 8005b56:	d9c8      	bls.n	8005aea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <cmp_lfn+0xd0>
 8005b64:	89fb      	ldrh	r3, [r7, #14]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <cmp_lfn+0xd0>
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	4413      	add	r3, r2
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <cmp_lfn+0xd0>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e000      	b.n	8005b7e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005b7c:	2301      	movs	r3, #1
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd90      	pop	{r4, r7, pc}
 8005b86:	bf00      	nop
 8005b88:	08008bf4 	.word	0x08008bf4

08005b8c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4611      	mov	r1, r2
 8005b98:	461a      	mov	r2, r3
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	71fb      	strb	r3, [r7, #7]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	330d      	adds	r3, #13
 8005ba6:	79ba      	ldrb	r2, [r7, #6]
 8005ba8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	330b      	adds	r3, #11
 8005bae:	220f      	movs	r2, #15
 8005bb0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	330c      	adds	r3, #12
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	331a      	adds	r3, #26
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fe ff3a 	bl	8004a3a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	1e5a      	subs	r2, r3, #1
 8005bca:	4613      	mov	r3, r2
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	82fb      	strh	r3, [r7, #22]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005bde:	8afb      	ldrh	r3, [r7, #22]
 8005be0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d007      	beq.n	8005bf8 <put_lfn+0x6c>
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	61fa      	str	r2, [r7, #28]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005bf8:	4a17      	ldr	r2, [pc, #92]	@ (8005c58 <put_lfn+0xcc>)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	4413      	add	r3, r2
 8005c06:	8afa      	ldrh	r2, [r7, #22]
 8005c08:	4611      	mov	r1, r2
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe ff15 	bl	8004a3a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005c10:	8afb      	ldrh	r3, [r7, #22]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d102      	bne.n	8005c1c <put_lfn+0x90>
 8005c16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c1a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b0c      	cmp	r3, #12
 8005c26:	d9da      	bls.n	8005bde <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005c28:	8afb      	ldrh	r3, [r7, #22]
 8005c2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d006      	beq.n	8005c40 <put_lfn+0xb4>
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4413      	add	r3, r2
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d103      	bne.n	8005c48 <put_lfn+0xbc>
 8005c40:	79fb      	ldrb	r3, [r7, #7]
 8005c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c46:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	79fa      	ldrb	r2, [r7, #7]
 8005c4c:	701a      	strb	r2, [r3, #0]
}
 8005c4e:	bf00      	nop
 8005c50:	3720      	adds	r7, #32
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	08008bf4 	.word	0x08008bf4

08005c5c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08c      	sub	sp, #48	@ 0x30
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
 8005c68:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005c6a:	220b      	movs	r2, #11
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7fe ff2a 	bl	8004ac8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b05      	cmp	r3, #5
 8005c78:	d92b      	bls.n	8005cd2 <gen_numname+0x76>
		sr = seq;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005c7e:	e022      	b.n	8005cc6 <gen_numname+0x6a>
			wc = *lfn++;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	1c9a      	adds	r2, r3, #2
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c8e:	e017      	b.n	8005cc0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	005a      	lsls	r2, r3, #1
 8005c94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	4413      	add	r3, r2
 8005c9c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005c9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <gen_numname+0x5e>
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8005cb4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005cb8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc2:	2b0f      	cmp	r3, #15
 8005cc4:	d9e4      	bls.n	8005c90 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1d8      	bne.n	8005c80 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005cd2:	2307      	movs	r3, #7
 8005cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	3330      	adds	r3, #48	@ 0x30
 8005ce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005cea:	2b39      	cmp	r3, #57	@ 0x39
 8005cec:	d904      	bls.n	8005cf8 <gen_numname+0x9c>
 8005cee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005cf2:	3307      	adds	r3, #7
 8005cf4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	1e5a      	subs	r2, r3, #1
 8005cfc:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005cfe:	3330      	adds	r3, #48	@ 0x30
 8005d00:	443b      	add	r3, r7
 8005d02:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005d06:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	091b      	lsrs	r3, r3, #4
 8005d0e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1df      	bne.n	8005cd6 <gen_numname+0x7a>
	ns[i] = '~';
 8005d16:	f107 0214 	add.w	r2, r7, #20
 8005d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1c:	4413      	add	r3, r2
 8005d1e:	227e      	movs	r2, #126	@ 0x7e
 8005d20:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005d22:	2300      	movs	r3, #0
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d26:	e002      	b.n	8005d2e <gen_numname+0xd2>
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d205      	bcs.n	8005d42 <gen_numname+0xe6>
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	4413      	add	r3, r2
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d1f2      	bne.n	8005d28 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d44:	2b07      	cmp	r3, #7
 8005d46:	d807      	bhi.n	8005d58 <gen_numname+0xfc>
 8005d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005d4e:	3330      	adds	r3, #48	@ 0x30
 8005d50:	443b      	add	r3, r7
 8005d52:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005d56:	e000      	b.n	8005d5a <gen_numname+0xfe>
 8005d58:	2120      	movs	r1, #32
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	460a      	mov	r2, r1
 8005d66:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	2b07      	cmp	r3, #7
 8005d6c:	d9e9      	bls.n	8005d42 <gen_numname+0xe6>
}
 8005d6e:	bf00      	nop
 8005d70:	bf00      	nop
 8005d72:	3730      	adds	r7, #48	@ 0x30
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005d84:	230b      	movs	r3, #11
 8005d86:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	0852      	lsrs	r2, r2, #1
 8005d8e:	01db      	lsls	r3, r3, #7
 8005d90:	4313      	orrs	r3, r2
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	1c59      	adds	r1, r3, #1
 8005d98:	6079      	str	r1, [r7, #4]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1ed      	bne.n	8005d88 <sum_sfn+0x10>
	return sum;
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b086      	sub	sp, #24
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005dc8:	2100      	movs	r1, #0
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff fc89 	bl	80056e2 <dir_sdi>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <dir_find+0x24>
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	e0a9      	b.n	8005f32 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005dde:	23ff      	movs	r3, #255	@ 0xff
 8005de0:	753b      	strb	r3, [r7, #20]
 8005de2:	7d3b      	ldrb	r3, [r7, #20]
 8005de4:	757b      	strb	r3, [r7, #21]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dec:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	4619      	mov	r1, r3
 8005df4:	6938      	ldr	r0, [r7, #16]
 8005df6:	f7ff f895 	bl	8004f24 <move_window>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f040 8090 	bne.w	8005f26 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005e0e:	7dbb      	ldrb	r3, [r7, #22]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <dir_find+0x60>
 8005e14:	2304      	movs	r3, #4
 8005e16:	75fb      	strb	r3, [r7, #23]
 8005e18:	e08a      	b.n	8005f30 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	330b      	adds	r3, #11
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e26:	73fb      	strb	r3, [r7, #15]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	7bfa      	ldrb	r2, [r7, #15]
 8005e2c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005e2e:	7dbb      	ldrb	r3, [r7, #22]
 8005e30:	2be5      	cmp	r3, #229	@ 0xe5
 8005e32:	d007      	beq.n	8005e44 <dir_find+0x8a>
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d009      	beq.n	8005e52 <dir_find+0x98>
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	2b0f      	cmp	r3, #15
 8005e42:	d006      	beq.n	8005e52 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005e44:	23ff      	movs	r3, #255	@ 0xff
 8005e46:	757b      	strb	r3, [r7, #21]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e50:	e05e      	b.n	8005f10 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	2b0f      	cmp	r3, #15
 8005e56:	d136      	bne.n	8005ec6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d154      	bne.n	8005f10 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005e66:	7dbb      	ldrb	r3, [r7, #22]
 8005e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00d      	beq.n	8005e8c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	7b5b      	ldrb	r3, [r3, #13]
 8005e76:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005e78:	7dbb      	ldrb	r3, [r7, #22]
 8005e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e7e:	75bb      	strb	r3, [r7, #22]
 8005e80:	7dbb      	ldrb	r3, [r7, #22]
 8005e82:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005e8c:	7dba      	ldrb	r2, [r7, #22]
 8005e8e:	7d7b      	ldrb	r3, [r7, #21]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d115      	bne.n	8005ec0 <dir_find+0x106>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	330d      	adds	r3, #13
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	7d3a      	ldrb	r2, [r7, #20]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d10e      	bne.n	8005ec0 <dir_find+0x106>
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4610      	mov	r0, r2
 8005eae:	f7ff fdfd 	bl	8005aac <cmp_lfn>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <dir_find+0x106>
 8005eb8:	7d7b      	ldrb	r3, [r7, #21]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	e000      	b.n	8005ec2 <dir_find+0x108>
 8005ec0:	23ff      	movs	r3, #255	@ 0xff
 8005ec2:	757b      	strb	r3, [r7, #21]
 8005ec4:	e024      	b.n	8005f10 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005ec6:	7d7b      	ldrb	r3, [r7, #21]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d109      	bne.n	8005ee0 <dir_find+0x126>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff ff51 	bl	8005d78 <sum_sfn>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	461a      	mov	r2, r3
 8005eda:	7d3b      	ldrb	r3, [r7, #20]
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d024      	beq.n	8005f2a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <dir_find+0x14a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a18      	ldr	r0, [r3, #32]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3324      	adds	r3, #36	@ 0x24
 8005ef6:	220b      	movs	r2, #11
 8005ef8:	4619      	mov	r1, r3
 8005efa:	f7fe fe21 	bl	8004b40 <mem_cmp>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d014      	beq.n	8005f2e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f04:	23ff      	movs	r3, #255	@ 0xff
 8005f06:	757b      	strb	r3, [r7, #21]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005f10:	2100      	movs	r1, #0
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff fc6e 	bl	80057f4 <dir_next>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f43f af65 	beq.w	8005dee <dir_find+0x34>
 8005f24:	e004      	b.n	8005f30 <dir_find+0x176>
		if (res != FR_OK) break;
 8005f26:	bf00      	nop
 8005f28:	e002      	b.n	8005f30 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005f2a:	bf00      	nop
 8005f2c:	e000      	b.n	8005f30 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005f2e:	bf00      	nop

	return res;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
	...

08005f3c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08c      	sub	sp, #48	@ 0x30
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005f50:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <dir_register+0x20>
 8005f58:	2306      	movs	r3, #6
 8005f5a:	e0e0      	b.n	800611e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f60:	e002      	b.n	8005f68 <dir_register+0x2c>
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	3301      	adds	r3, #1
 8005f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	4413      	add	r3, r2
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f4      	bne.n	8005f62 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8005f7e:	f107 030c 	add.w	r3, r7, #12
 8005f82:	220c      	movs	r2, #12
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fe fd9f 	bl	8004ac8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d032      	beq.n	8005ffa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2240      	movs	r2, #64	@ 0x40
 8005f98:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fa0:	e016      	b.n	8005fd0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	f107 010c 	add.w	r1, r7, #12
 8005fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb2:	f7ff fe53 	bl	8005c5c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff feff 	bl	8005dba <dir_find>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8005fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fcc:	3301      	adds	r3, #1
 8005fce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd2:	2b63      	cmp	r3, #99	@ 0x63
 8005fd4:	d9e5      	bls.n	8005fa2 <dir_register+0x66>
 8005fd6:	e000      	b.n	8005fda <dir_register+0x9e>
			if (res != FR_OK) break;
 8005fd8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fdc:	2b64      	cmp	r3, #100	@ 0x64
 8005fde:	d101      	bne.n	8005fe4 <dir_register+0xa8>
 8005fe0:	2307      	movs	r3, #7
 8005fe2:	e09c      	b.n	800611e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005fe4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d002      	beq.n	8005ff2 <dir_register+0xb6>
 8005fec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ff0:	e095      	b.n	800611e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005ff2:	7dfa      	ldrb	r2, [r7, #23]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005ffa:	7dfb      	ldrb	r3, [r7, #23]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <dir_register+0xd8>
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	330c      	adds	r3, #12
 8006008:	4a47      	ldr	r2, [pc, #284]	@ (8006128 <dir_register+0x1ec>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	089b      	lsrs	r3, r3, #2
 8006010:	3301      	adds	r3, #1
 8006012:	e000      	b.n	8006016 <dir_register+0xda>
 8006014:	2301      	movs	r3, #1
 8006016:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006018:	6a39      	ldr	r1, [r7, #32]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fcc0 	bl	80059a0 <dir_alloc>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006026:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800602a:	2b00      	cmp	r3, #0
 800602c:	d148      	bne.n	80060c0 <dir_register+0x184>
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	3b01      	subs	r3, #1
 8006032:	623b      	str	r3, [r7, #32]
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d042      	beq.n	80060c0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	015b      	lsls	r3, r3, #5
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7ff fb4b 	bl	80056e2 <dir_sdi>
 800604c:	4603      	mov	r3, r0
 800604e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8006052:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006056:	2b00      	cmp	r3, #0
 8006058:	d132      	bne.n	80060c0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3324      	adds	r3, #36	@ 0x24
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff fe8a 	bl	8005d78 <sum_sfn>
 8006064:	4603      	mov	r3, r0
 8006066:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	69db      	ldr	r3, [r3, #28]
 800606c:	4619      	mov	r1, r3
 800606e:	69f8      	ldr	r0, [r7, #28]
 8006070:	f7fe ff58 	bl	8004f24 <move_window>
 8006074:	4603      	mov	r3, r0
 8006076:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800607a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800607e:	2b00      	cmp	r3, #0
 8006080:	d11d      	bne.n	80060be <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	6918      	ldr	r0, [r3, #16]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a19      	ldr	r1, [r3, #32]
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	7efb      	ldrb	r3, [r7, #27]
 8006090:	f7ff fd7c 	bl	8005b8c <put_lfn>
				fs->wflag = 1;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	2201      	movs	r2, #1
 8006098:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800609a:	2100      	movs	r1, #0
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7ff fba9 	bl	80057f4 <dir_next>
 80060a2:	4603      	mov	r3, r0
 80060a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80060a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d107      	bne.n	80060c0 <dir_register+0x184>
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	623b      	str	r3, [r7, #32]
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1d5      	bne.n	8006068 <dir_register+0x12c>
 80060bc:	e000      	b.n	80060c0 <dir_register+0x184>
				if (res != FR_OK) break;
 80060be:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80060c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d128      	bne.n	800611a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	4619      	mov	r1, r3
 80060ce:	69f8      	ldr	r0, [r7, #28]
 80060d0:	f7fe ff28 	bl	8004f24 <move_window>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80060da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d11b      	bne.n	800611a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	2220      	movs	r2, #32
 80060e8:	2100      	movs	r1, #0
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe fd0d 	bl	8004b0a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a18      	ldr	r0, [r3, #32]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3324      	adds	r3, #36	@ 0x24
 80060f8:	220b      	movs	r2, #11
 80060fa:	4619      	mov	r1, r3
 80060fc:	f7fe fce4 	bl	8004ac8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	330c      	adds	r3, #12
 800610c:	f002 0218 	and.w	r2, r2, #24
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	2201      	movs	r2, #1
 8006118:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800611a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800611e:	4618      	mov	r0, r3
 8006120:	3730      	adds	r7, #48	@ 0x30
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	4ec4ec4f 	.word	0x4ec4ec4f

0800612c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08a      	sub	sp, #40	@ 0x28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	613b      	str	r3, [r7, #16]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	61ba      	str	r2, [r7, #24]
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4413      	add	r3, r2
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800615a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800615c:	2b1f      	cmp	r3, #31
 800615e:	d940      	bls.n	80061e2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006160:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006162:	2b2f      	cmp	r3, #47	@ 0x2f
 8006164:	d006      	beq.n	8006174 <create_name+0x48>
 8006166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006168:	2b5c      	cmp	r3, #92	@ 0x5c
 800616a:	d110      	bne.n	800618e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800616c:	e002      	b.n	8006174 <create_name+0x48>
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	3301      	adds	r3, #1
 8006172:	61bb      	str	r3, [r7, #24]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	4413      	add	r3, r2
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b2f      	cmp	r3, #47	@ 0x2f
 800617e:	d0f6      	beq.n	800616e <create_name+0x42>
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	4413      	add	r3, r2
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b5c      	cmp	r3, #92	@ 0x5c
 800618a:	d0f0      	beq.n	800616e <create_name+0x42>
			break;
 800618c:	e02a      	b.n	80061e4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2bfe      	cmp	r3, #254	@ 0xfe
 8006192:	d901      	bls.n	8006198 <create_name+0x6c>
 8006194:	2306      	movs	r3, #6
 8006196:	e17d      	b.n	8006494 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006198:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800619a:	b2db      	uxtb	r3, r3
 800619c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800619e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061a0:	2101      	movs	r1, #1
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 fe48 	bl	8007e38 <ff_convert>
 80061a8:	4603      	mov	r3, r0
 80061aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80061ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <create_name+0x8a>
 80061b2:	2306      	movs	r3, #6
 80061b4:	e16e      	b.n	8006494 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80061b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80061ba:	d809      	bhi.n	80061d0 <create_name+0xa4>
 80061bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061be:	4619      	mov	r1, r3
 80061c0:	488d      	ldr	r0, [pc, #564]	@ (80063f8 <create_name+0x2cc>)
 80061c2:	f7fe fce4 	bl	8004b8e <chk_chr>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <create_name+0xa4>
 80061cc:	2306      	movs	r3, #6
 80061ce:	e161      	b.n	8006494 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	617a      	str	r2, [r7, #20]
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4413      	add	r3, r2
 80061dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80061de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80061e0:	e7b4      	b.n	800614c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80061e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	441a      	add	r2, r3
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80061ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061f0:	2b1f      	cmp	r3, #31
 80061f2:	d801      	bhi.n	80061f8 <create_name+0xcc>
 80061f4:	2304      	movs	r3, #4
 80061f6:	e000      	b.n	80061fa <create_name+0xce>
 80061f8:	2300      	movs	r3, #0
 80061fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80061fe:	e011      	b.n	8006224 <create_name+0xf8>
		w = lfn[di - 1];
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006206:	3b01      	subs	r3, #1
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006212:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006214:	2b20      	cmp	r3, #32
 8006216:	d002      	beq.n	800621e <create_name+0xf2>
 8006218:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800621a:	2b2e      	cmp	r3, #46	@ 0x2e
 800621c:	d106      	bne.n	800622c <create_name+0x100>
		di--;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	3b01      	subs	r3, #1
 8006222:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1ea      	bne.n	8006200 <create_name+0xd4>
 800622a:	e000      	b.n	800622e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800622c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	2200      	movs	r2, #0
 8006238:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d101      	bne.n	8006244 <create_name+0x118>
 8006240:	2306      	movs	r3, #6
 8006242:	e127      	b.n	8006494 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3324      	adds	r3, #36	@ 0x24
 8006248:	220b      	movs	r2, #11
 800624a:	2120      	movs	r1, #32
 800624c:	4618      	mov	r0, r3
 800624e:	f7fe fc5c 	bl	8004b0a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006252:	2300      	movs	r3, #0
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	e002      	b.n	800625e <create_name+0x132>
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	3301      	adds	r3, #1
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4413      	add	r3, r2
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	2b20      	cmp	r3, #32
 800626a:	d0f5      	beq.n	8006258 <create_name+0x12c>
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	2b2e      	cmp	r3, #46	@ 0x2e
 8006278:	d0ee      	beq.n	8006258 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d009      	beq.n	8006294 <create_name+0x168>
 8006280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006284:	f043 0303 	orr.w	r3, r3, #3
 8006288:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800628c:	e002      	b.n	8006294 <create_name+0x168>
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	3b01      	subs	r3, #1
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <create_name+0x182>
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80062a0:	3b01      	subs	r3, #1
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4413      	add	r3, r2
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80062ac:	d1ef      	bne.n	800628e <create_name+0x162>

	i = b = 0; ni = 8;
 80062ae:	2300      	movs	r3, #0
 80062b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80062b4:	2300      	movs	r3, #0
 80062b6:	623b      	str	r3, [r7, #32]
 80062b8:	2308      	movs	r3, #8
 80062ba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	61ba      	str	r2, [r7, #24]
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80062cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 8090 	beq.w	80063f4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80062d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	d006      	beq.n	80062e8 <create_name+0x1bc>
 80062da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80062de:	d10a      	bne.n	80062f6 <create_name+0x1ca>
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d006      	beq.n	80062f6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80062e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062ec:	f043 0303 	orr.w	r3, r3, #3
 80062f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80062f4:	e07d      	b.n	80063f2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80062f6:	6a3a      	ldr	r2, [r7, #32]
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d203      	bcs.n	8006306 <create_name+0x1da>
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	429a      	cmp	r2, r3
 8006304:	d123      	bne.n	800634e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2b0b      	cmp	r3, #11
 800630a:	d106      	bne.n	800631a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800630c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006310:	f043 0303 	orr.w	r3, r3, #3
 8006314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006318:	e075      	b.n	8006406 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	429a      	cmp	r2, r3
 8006320:	d005      	beq.n	800632e <create_name+0x202>
 8006322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006326:	f043 0303 	orr.w	r3, r3, #3
 800632a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	429a      	cmp	r2, r3
 8006334:	d866      	bhi.n	8006404 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	2308      	movs	r3, #8
 800633c:	623b      	str	r3, [r7, #32]
 800633e:	230b      	movs	r3, #11
 8006340:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006342:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800634c:	e051      	b.n	80063f2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800634e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006350:	2b7f      	cmp	r3, #127	@ 0x7f
 8006352:	d914      	bls.n	800637e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006354:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006356:	2100      	movs	r1, #0
 8006358:	4618      	mov	r0, r3
 800635a:	f001 fd6d 	bl	8007e38 <ff_convert>
 800635e:	4603      	mov	r3, r0
 8006360:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006362:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <create_name+0x246>
 8006368:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800636a:	3b80      	subs	r3, #128	@ 0x80
 800636c:	4a23      	ldr	r2, [pc, #140]	@ (80063fc <create_name+0x2d0>)
 800636e:	5cd3      	ldrb	r3, [r2, r3]
 8006370:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006372:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006376:	f043 0302 	orr.w	r3, r3, #2
 800637a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800637e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006380:	2b00      	cmp	r3, #0
 8006382:	d007      	beq.n	8006394 <create_name+0x268>
 8006384:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006386:	4619      	mov	r1, r3
 8006388:	481d      	ldr	r0, [pc, #116]	@ (8006400 <create_name+0x2d4>)
 800638a:	f7fe fc00 	bl	8004b8e <chk_chr>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006394:	235f      	movs	r3, #95	@ 0x5f
 8006396:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800639c:	f043 0303 	orr.w	r3, r3, #3
 80063a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063a4:	e01b      	b.n	80063de <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80063a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063a8:	2b40      	cmp	r3, #64	@ 0x40
 80063aa:	d909      	bls.n	80063c0 <create_name+0x294>
 80063ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063ae:	2b5a      	cmp	r3, #90	@ 0x5a
 80063b0:	d806      	bhi.n	80063c0 <create_name+0x294>
					b |= 2;
 80063b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063b6:	f043 0302 	orr.w	r3, r3, #2
 80063ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80063be:	e00e      	b.n	80063de <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80063c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063c2:	2b60      	cmp	r3, #96	@ 0x60
 80063c4:	d90b      	bls.n	80063de <create_name+0x2b2>
 80063c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063c8:	2b7a      	cmp	r3, #122	@ 0x7a
 80063ca:	d808      	bhi.n	80063de <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80063cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063d0:	f043 0301 	orr.w	r3, r3, #1
 80063d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80063d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063da:	3b20      	subs	r3, #32
 80063dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	1c5a      	adds	r2, r3, #1
 80063e2:	623a      	str	r2, [r7, #32]
 80063e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80063e6:	b2d1      	uxtb	r1, r2
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	4413      	add	r3, r2
 80063ec:	460a      	mov	r2, r1
 80063ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80063f2:	e763      	b.n	80062bc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80063f4:	bf00      	nop
 80063f6:	e006      	b.n	8006406 <create_name+0x2da>
 80063f8:	08008b14 	.word	0x08008b14
 80063fc:	08008b74 	.word	0x08008b74
 8006400:	08008b20 	.word	0x08008b20
			if (si > di) break;			/* No extension */
 8006404:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800640c:	2be5      	cmp	r3, #229	@ 0xe5
 800640e:	d103      	bne.n	8006418 <create_name+0x2ec>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2205      	movs	r2, #5
 8006414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b08      	cmp	r3, #8
 800641c:	d104      	bne.n	8006428 <create_name+0x2fc>
 800641e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006428:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800642c:	f003 030c 	and.w	r3, r3, #12
 8006430:	2b0c      	cmp	r3, #12
 8006432:	d005      	beq.n	8006440 <create_name+0x314>
 8006434:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006438:	f003 0303 	and.w	r3, r3, #3
 800643c:	2b03      	cmp	r3, #3
 800643e:	d105      	bne.n	800644c <create_name+0x320>
 8006440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006444:	f043 0302 	orr.w	r3, r3, #2
 8006448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800644c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d117      	bne.n	8006488 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006458:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800645c:	f003 0303 	and.w	r3, r3, #3
 8006460:	2b01      	cmp	r3, #1
 8006462:	d105      	bne.n	8006470 <create_name+0x344>
 8006464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006468:	f043 0310 	orr.w	r3, r3, #16
 800646c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006470:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006474:	f003 030c 	and.w	r3, r3, #12
 8006478:	2b04      	cmp	r3, #4
 800647a:	d105      	bne.n	8006488 <create_name+0x35c>
 800647c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006480:	f043 0308 	orr.w	r3, r3, #8
 8006484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800648e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8006492:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006494:	4618      	mov	r0, r3
 8006496:	3728      	adds	r7, #40	@ 0x28
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80064b0:	e002      	b.n	80064b8 <follow_path+0x1c>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80064be:	d0f8      	beq.n	80064b2 <follow_path+0x16>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80064c6:	d0f4      	beq.n	80064b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	2200      	movs	r2, #0
 80064cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b1f      	cmp	r3, #31
 80064d4:	d80a      	bhi.n	80064ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2280      	movs	r2, #128	@ 0x80
 80064da:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80064de:	2100      	movs	r1, #0
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff f8fe 	bl	80056e2 <dir_sdi>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]
 80064ea:	e048      	b.n	800657e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80064ec:	463b      	mov	r3, r7
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff fe1b 	bl	800612c <create_name>
 80064f6:	4603      	mov	r3, r0
 80064f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d139      	bne.n	8006574 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff fc5a 	bl	8005dba <dir_find>
 8006506:	4603      	mov	r3, r0
 8006508:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006510:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006518:	7dfb      	ldrb	r3, [r7, #23]
 800651a:	2b04      	cmp	r3, #4
 800651c:	d12c      	bne.n	8006578 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800651e:	7afb      	ldrb	r3, [r7, #11]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d127      	bne.n	8006578 <follow_path+0xdc>
 8006528:	2305      	movs	r3, #5
 800652a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800652c:	e024      	b.n	8006578 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800652e:	7afb      	ldrb	r3, [r7, #11]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d121      	bne.n	800657c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	799b      	ldrb	r3, [r3, #6]
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	d102      	bne.n	800654a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006544:	2305      	movs	r3, #5
 8006546:	75fb      	strb	r3, [r7, #23]
 8006548:	e019      	b.n	800657e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	8992      	ldrh	r2, [r2, #12]
 8006558:	fbb3 f0f2 	udiv	r0, r3, r2
 800655c:	fb00 f202 	mul.w	r2, r0, r2
 8006560:	1a9b      	subs	r3, r3, r2
 8006562:	440b      	add	r3, r1
 8006564:	4619      	mov	r1, r3
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff fa61 	bl	8005a2e <ld_clust>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006572:	e7bb      	b.n	80064ec <follow_path+0x50>
			if (res != FR_OK) break;
 8006574:	bf00      	nop
 8006576:	e002      	b.n	800657e <follow_path+0xe2>
				break;
 8006578:	bf00      	nop
 800657a:	e000      	b.n	800657e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800657c:	bf00      	nop
			}
		}
	}

	return res;
 800657e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006590:	f04f 33ff 	mov.w	r3, #4294967295
 8006594:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d031      	beq.n	8006602 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	617b      	str	r3, [r7, #20]
 80065a4:	e002      	b.n	80065ac <get_ldnumber+0x24>
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	3301      	adds	r3, #1
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b1f      	cmp	r3, #31
 80065b2:	d903      	bls.n	80065bc <get_ldnumber+0x34>
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80065ba:	d1f4      	bne.n	80065a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80065c2:	d11c      	bne.n	80065fe <get_ldnumber+0x76>
			tp = *path;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	60fa      	str	r2, [r7, #12]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	3b30      	subs	r3, #48	@ 0x30
 80065d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b09      	cmp	r3, #9
 80065da:	d80e      	bhi.n	80065fa <get_ldnumber+0x72>
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d10a      	bne.n	80065fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d107      	bne.n	80065fa <get_ldnumber+0x72>
					vol = (int)i;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	3301      	adds	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	e002      	b.n	8006604 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80065fe:	2300      	movs	r3, #0
 8006600:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006602:	693b      	ldr	r3, [r7, #16]
}
 8006604:	4618      	mov	r0, r3
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	70da      	strb	r2, [r3, #3]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f04f 32ff 	mov.w	r2, #4294967295
 8006626:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7fe fc7a 	bl	8004f24 <move_window>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <check_fs+0x2a>
 8006636:	2304      	movs	r3, #4
 8006638:	e038      	b.n	80066ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3338      	adds	r3, #56	@ 0x38
 800663e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe f9be 	bl	80049c4 <ld_word>
 8006648:	4603      	mov	r3, r0
 800664a:	461a      	mov	r2, r3
 800664c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006650:	429a      	cmp	r2, r3
 8006652:	d001      	beq.n	8006658 <check_fs+0x48>
 8006654:	2303      	movs	r3, #3
 8006656:	e029      	b.n	80066ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800665e:	2be9      	cmp	r3, #233	@ 0xe9
 8006660:	d009      	beq.n	8006676 <check_fs+0x66>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006668:	2beb      	cmp	r3, #235	@ 0xeb
 800666a:	d11e      	bne.n	80066aa <check_fs+0x9a>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006672:	2b90      	cmp	r3, #144	@ 0x90
 8006674:	d119      	bne.n	80066aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3338      	adds	r3, #56	@ 0x38
 800667a:	3336      	adds	r3, #54	@ 0x36
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe f9b9 	bl	80049f4 <ld_dword>
 8006682:	4603      	mov	r3, r0
 8006684:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006688:	4a0a      	ldr	r2, [pc, #40]	@ (80066b4 <check_fs+0xa4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <check_fs+0x82>
 800668e:	2300      	movs	r3, #0
 8006690:	e00c      	b.n	80066ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3338      	adds	r3, #56	@ 0x38
 8006696:	3352      	adds	r3, #82	@ 0x52
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe f9ab 	bl	80049f4 <ld_dword>
 800669e:	4603      	mov	r3, r0
 80066a0:	4a05      	ldr	r2, [pc, #20]	@ (80066b8 <check_fs+0xa8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d101      	bne.n	80066aa <check_fs+0x9a>
 80066a6:	2300      	movs	r3, #0
 80066a8:	e000      	b.n	80066ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80066aa:	2302      	movs	r3, #2
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	00544146 	.word	0x00544146
 80066b8:	33544146 	.word	0x33544146

080066bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b096      	sub	sp, #88	@ 0x58
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	4613      	mov	r3, r2
 80066c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f7ff ff59 	bl	8006588 <get_ldnumber>
 80066d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80066d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	da01      	bge.n	80066e2 <find_volume+0x26>
 80066de:	230b      	movs	r3, #11
 80066e0:	e265      	b.n	8006bae <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80066e2:	4a9f      	ldr	r2, [pc, #636]	@ (8006960 <find_volume+0x2a4>)
 80066e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ea:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80066ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <find_volume+0x3a>
 80066f2:	230c      	movs	r3, #12
 80066f4:	e25b      	b.n	8006bae <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	f023 0301 	bic.w	r3, r3, #1
 8006702:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01a      	beq.n	8006742 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800670c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	4618      	mov	r0, r3
 8006712:	f7fe f8b7 	bl	8004884 <disk_status>
 8006716:	4603      	mov	r3, r0
 8006718:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800671c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10c      	bne.n	8006742 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006728:	79fb      	ldrb	r3, [r7, #7]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <find_volume+0x82>
 800672e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800673a:	230a      	movs	r3, #10
 800673c:	e237      	b.n	8006bae <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800673e:	2300      	movs	r3, #0
 8006740:	e235      	b.n	8006bae <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800674a:	b2da      	uxtb	r2, r3
 800674c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006752:	785b      	ldrb	r3, [r3, #1]
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe f8af 	bl	80048b8 <disk_initialize>
 800675a:	4603      	mov	r3, r0
 800675c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006760:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800676c:	2303      	movs	r3, #3
 800676e:	e21e      	b.n	8006bae <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d007      	beq.n	8006786 <find_volume+0xca>
 8006776:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006782:	230a      	movs	r3, #10
 8006784:	e213      	b.n	8006bae <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	7858      	ldrb	r0, [r3, #1]
 800678a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800678c:	330c      	adds	r3, #12
 800678e:	461a      	mov	r2, r3
 8006790:	2102      	movs	r1, #2
 8006792:	f7fe f8f9 	bl	8004988 <disk_ioctl>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <find_volume+0xe4>
 800679c:	2301      	movs	r3, #1
 800679e:	e206      	b.n	8006bae <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	899b      	ldrh	r3, [r3, #12]
 80067a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067a8:	d80d      	bhi.n	80067c6 <find_volume+0x10a>
 80067aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ac:	899b      	ldrh	r3, [r3, #12]
 80067ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067b2:	d308      	bcc.n	80067c6 <find_volume+0x10a>
 80067b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b6:	899b      	ldrh	r3, [r3, #12]
 80067b8:	461a      	mov	r2, r3
 80067ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067bc:	899b      	ldrh	r3, [r3, #12]
 80067be:	3b01      	subs	r3, #1
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <find_volume+0x10e>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e1f1      	b.n	8006bae <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80067ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80067d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80067d2:	f7ff ff1d 	bl	8006610 <check_fs>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80067dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d149      	bne.n	8006878 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80067e4:	2300      	movs	r3, #0
 80067e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80067e8:	e01e      	b.n	8006828 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80067ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ec:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80067f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80067f8:	4413      	add	r3, r2
 80067fa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	3304      	adds	r3, #4
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d006      	beq.n	8006814 <find_volume+0x158>
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	3308      	adds	r3, #8
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe f8f2 	bl	80049f4 <ld_dword>
 8006810:	4602      	mov	r2, r0
 8006812:	e000      	b.n	8006816 <find_volume+0x15a>
 8006814:	2200      	movs	r2, #0
 8006816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	3358      	adds	r3, #88	@ 0x58
 800681c:	443b      	add	r3, r7
 800681e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006824:	3301      	adds	r3, #1
 8006826:	643b      	str	r3, [r7, #64]	@ 0x40
 8006828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800682a:	2b03      	cmp	r3, #3
 800682c:	d9dd      	bls.n	80067ea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800682e:	2300      	movs	r3, #0
 8006830:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <find_volume+0x182>
 8006838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800683a:	3b01      	subs	r3, #1
 800683c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800683e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	3358      	adds	r3, #88	@ 0x58
 8006844:	443b      	add	r3, r7
 8006846:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800684a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800684c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <find_volume+0x1a2>
 8006852:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006854:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006856:	f7ff fedb 	bl	8006610 <check_fs>
 800685a:	4603      	mov	r3, r0
 800685c:	e000      	b.n	8006860 <find_volume+0x1a4>
 800685e:	2303      	movs	r3, #3
 8006860:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006864:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006868:	2b01      	cmp	r3, #1
 800686a:	d905      	bls.n	8006878 <find_volume+0x1bc>
 800686c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800686e:	3301      	adds	r3, #1
 8006870:	643b      	str	r3, [r7, #64]	@ 0x40
 8006872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006874:	2b03      	cmp	r3, #3
 8006876:	d9e2      	bls.n	800683e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006878:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800687c:	2b04      	cmp	r3, #4
 800687e:	d101      	bne.n	8006884 <find_volume+0x1c8>
 8006880:	2301      	movs	r3, #1
 8006882:	e194      	b.n	8006bae <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006884:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006888:	2b01      	cmp	r3, #1
 800688a:	d901      	bls.n	8006890 <find_volume+0x1d4>
 800688c:	230d      	movs	r3, #13
 800688e:	e18e      	b.n	8006bae <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006892:	3338      	adds	r3, #56	@ 0x38
 8006894:	330b      	adds	r3, #11
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe f894 	bl	80049c4 <ld_word>
 800689c:	4603      	mov	r3, r0
 800689e:	461a      	mov	r2, r3
 80068a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a2:	899b      	ldrh	r3, [r3, #12]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d001      	beq.n	80068ac <find_volume+0x1f0>
 80068a8:	230d      	movs	r3, #13
 80068aa:	e180      	b.n	8006bae <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80068ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ae:	3338      	adds	r3, #56	@ 0x38
 80068b0:	3316      	adds	r3, #22
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe f886 	bl	80049c4 <ld_word>
 80068b8:	4603      	mov	r3, r0
 80068ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80068bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <find_volume+0x214>
 80068c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c4:	3338      	adds	r3, #56	@ 0x38
 80068c6:	3324      	adds	r3, #36	@ 0x24
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7fe f893 	bl	80049f4 <ld_dword>
 80068ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80068d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068d4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80068d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80068dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80068e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e2:	789b      	ldrb	r3, [r3, #2]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d005      	beq.n	80068f4 <find_volume+0x238>
 80068e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ea:	789b      	ldrb	r3, [r3, #2]
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d001      	beq.n	80068f4 <find_volume+0x238>
 80068f0:	230d      	movs	r3, #13
 80068f2:	e15c      	b.n	8006bae <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80068f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f6:	789b      	ldrb	r3, [r3, #2]
 80068f8:	461a      	mov	r2, r3
 80068fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068fc:	fb02 f303 	mul.w	r3, r2, r3
 8006900:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006904:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006908:	461a      	mov	r2, r3
 800690a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800690e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006910:	895b      	ldrh	r3, [r3, #10]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d008      	beq.n	8006928 <find_volume+0x26c>
 8006916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006918:	895b      	ldrh	r3, [r3, #10]
 800691a:	461a      	mov	r2, r3
 800691c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691e:	895b      	ldrh	r3, [r3, #10]
 8006920:	3b01      	subs	r3, #1
 8006922:	4013      	ands	r3, r2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <find_volume+0x270>
 8006928:	230d      	movs	r3, #13
 800692a:	e140      	b.n	8006bae <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	3338      	adds	r3, #56	@ 0x38
 8006930:	3311      	adds	r3, #17
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe f846 	bl	80049c4 <ld_word>
 8006938:	4603      	mov	r3, r0
 800693a:	461a      	mov	r2, r3
 800693c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006942:	891b      	ldrh	r3, [r3, #8]
 8006944:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006946:	8992      	ldrh	r2, [r2, #12]
 8006948:	0952      	lsrs	r2, r2, #5
 800694a:	b292      	uxth	r2, r2
 800694c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006950:	fb01 f202 	mul.w	r2, r1, r2
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <find_volume+0x2a8>
 800695c:	230d      	movs	r3, #13
 800695e:	e126      	b.n	8006bae <find_volume+0x4f2>
 8006960:	20000770 	.word	0x20000770

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006966:	3338      	adds	r3, #56	@ 0x38
 8006968:	3313      	adds	r3, #19
 800696a:	4618      	mov	r0, r3
 800696c:	f7fe f82a 	bl	80049c4 <ld_word>
 8006970:	4603      	mov	r3, r0
 8006972:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <find_volume+0x2cc>
 800697a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697c:	3338      	adds	r3, #56	@ 0x38
 800697e:	3320      	adds	r3, #32
 8006980:	4618      	mov	r0, r3
 8006982:	f7fe f837 	bl	80049f4 <ld_dword>
 8006986:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698a:	3338      	adds	r3, #56	@ 0x38
 800698c:	330e      	adds	r3, #14
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe f818 	bl	80049c4 <ld_word>
 8006994:	4603      	mov	r3, r0
 8006996:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006998:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <find_volume+0x2e6>
 800699e:	230d      	movs	r3, #13
 80069a0:	e105      	b.n	8006bae <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80069a2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80069a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a6:	4413      	add	r3, r2
 80069a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069aa:	8911      	ldrh	r1, [r2, #8]
 80069ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069ae:	8992      	ldrh	r2, [r2, #12]
 80069b0:	0952      	lsrs	r2, r2, #5
 80069b2:	b292      	uxth	r2, r2
 80069b4:	fbb1 f2f2 	udiv	r2, r1, r2
 80069b8:	b292      	uxth	r2, r2
 80069ba:	4413      	add	r3, r2
 80069bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80069be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d201      	bcs.n	80069ca <find_volume+0x30e>
 80069c6:	230d      	movs	r3, #13
 80069c8:	e0f1      	b.n	8006bae <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80069ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069d2:	8952      	ldrh	r2, [r2, #10]
 80069d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069d8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <find_volume+0x328>
 80069e0:	230d      	movs	r3, #13
 80069e2:	e0e4      	b.n	8006bae <find_volume+0x4f2>
		fmt = FS_FAT32;
 80069e4:	2303      	movs	r3, #3
 80069e6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d802      	bhi.n	80069fa <find_volume+0x33e>
 80069f4:	2302      	movs	r3, #2
 80069f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80069fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d802      	bhi.n	8006a0a <find_volume+0x34e>
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	1c9a      	adds	r2, r3, #2
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a10:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a16:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006a18:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a1c:	441a      	add	r2, r3
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a20:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006a22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a26:	441a      	add	r2, r3
 8006a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a2a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006a2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d11e      	bne.n	8006a72 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	3338      	adds	r3, #56	@ 0x38
 8006a38:	332a      	adds	r3, #42	@ 0x2a
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fd ffc2 	bl	80049c4 <ld_word>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <find_volume+0x38e>
 8006a46:	230d      	movs	r3, #13
 8006a48:	e0b1      	b.n	8006bae <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4c:	891b      	ldrh	r3, [r3, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <find_volume+0x39a>
 8006a52:	230d      	movs	r3, #13
 8006a54:	e0ab      	b.n	8006bae <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a58:	3338      	adds	r3, #56	@ 0x38
 8006a5a:	332c      	adds	r3, #44	@ 0x2c
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fd ffc9 	bl	80049f4 <ld_dword>
 8006a62:	4602      	mov	r2, r0
 8006a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a66:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a70:	e01f      	b.n	8006ab2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a74:	891b      	ldrh	r3, [r3, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <find_volume+0x3c2>
 8006a7a:	230d      	movs	r3, #13
 8006a7c:	e097      	b.n	8006bae <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a84:	441a      	add	r2, r3
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a8a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d103      	bne.n	8006a9a <find_volume+0x3de>
 8006a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	e00a      	b.n	8006ab0 <find_volume+0x3f4>
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9c:	69da      	ldr	r2, [r3, #28]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	4413      	add	r3, r2
 8006aa4:	085a      	lsrs	r2, r3, #1
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006ab0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab4:	6a1a      	ldr	r2, [r3, #32]
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab8:	899b      	ldrh	r3, [r3, #12]
 8006aba:	4619      	mov	r1, r3
 8006abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006abe:	440b      	add	r3, r1
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ac4:	8989      	ldrh	r1, [r1, #12]
 8006ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d201      	bcs.n	8006ad2 <find_volume+0x416>
 8006ace:	230d      	movs	r3, #13
 8006ad0:	e06d      	b.n	8006bae <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad8:	619a      	str	r2, [r3, #24]
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	2280      	movs	r2, #128	@ 0x80
 8006ae6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006ae8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d149      	bne.n	8006b84 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af2:	3338      	adds	r3, #56	@ 0x38
 8006af4:	3330      	adds	r3, #48	@ 0x30
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fd ff64 	bl	80049c4 <ld_word>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d140      	bne.n	8006b84 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b04:	3301      	adds	r3, #1
 8006b06:	4619      	mov	r1, r3
 8006b08:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b0a:	f7fe fa0b 	bl	8004f24 <move_window>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d137      	bne.n	8006b84 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b16:	2200      	movs	r2, #0
 8006b18:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1c:	3338      	adds	r3, #56	@ 0x38
 8006b1e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fd ff4e 	bl	80049c4 <ld_word>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d127      	bne.n	8006b84 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b36:	3338      	adds	r3, #56	@ 0x38
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fd ff5b 	bl	80049f4 <ld_dword>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb8 <find_volume+0x4fc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d11e      	bne.n	8006b84 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b48:	3338      	adds	r3, #56	@ 0x38
 8006b4a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fd ff50 	bl	80049f4 <ld_dword>
 8006b54:	4603      	mov	r3, r0
 8006b56:	4a19      	ldr	r2, [pc, #100]	@ (8006bbc <find_volume+0x500>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d113      	bne.n	8006b84 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5e:	3338      	adds	r3, #56	@ 0x38
 8006b60:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fd ff45 	bl	80049f4 <ld_dword>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b72:	3338      	adds	r3, #56	@ 0x38
 8006b74:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fd ff3b 	bl	80049f4 <ld_dword>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b86:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006b8a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc0 <find_volume+0x504>)
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	3301      	adds	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc0 <find_volume+0x504>)
 8006b96:	801a      	strh	r2, [r3, #0]
 8006b98:	4b09      	ldr	r3, [pc, #36]	@ (8006bc0 <find_volume+0x504>)
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba2:	4a08      	ldr	r2, [pc, #32]	@ (8006bc4 <find_volume+0x508>)
 8006ba4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006ba6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ba8:	f7fe f954 	bl	8004e54 <clear_lock>
#endif
	return FR_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3758      	adds	r7, #88	@ 0x58
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	41615252 	.word	0x41615252
 8006bbc:	61417272 	.word	0x61417272
 8006bc0:	20000774 	.word	0x20000774
 8006bc4:	20000798 	.word	0x20000798

08006bc8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006bd2:	2309      	movs	r3, #9
 8006bd4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01c      	beq.n	8006c16 <validate+0x4e>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d018      	beq.n	8006c16 <validate+0x4e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d013      	beq.n	8006c16 <validate+0x4e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	889a      	ldrh	r2, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	88db      	ldrh	r3, [r3, #6]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d10c      	bne.n	8006c16 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	785b      	ldrb	r3, [r3, #1]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fd fe3e 	bl	8004884 <disk_status>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <validate+0x4e>
			res = FR_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d102      	bne.n	8006c22 <validate+0x5a>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	e000      	b.n	8006c24 <validate+0x5c>
 8006c22:	2300      	movs	r3, #0
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	6013      	str	r3, [r2, #0]
	return res;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006c46:	f107 0310 	add.w	r3, r7, #16
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7ff fc9c 	bl	8006588 <get_ldnumber>
 8006c50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	da01      	bge.n	8006c5c <f_mount+0x28>
 8006c58:	230b      	movs	r3, #11
 8006c5a:	e02b      	b.n	8006cb4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006c5c:	4a17      	ldr	r2, [pc, #92]	@ (8006cbc <f_mount+0x88>)
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006c6c:	69b8      	ldr	r0, [r7, #24]
 8006c6e:	f7fe f8f1 	bl	8004e54 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2200      	movs	r2, #0
 8006c76:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	490d      	ldr	r1, [pc, #52]	@ (8006cbc <f_mount+0x88>)
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <f_mount+0x66>
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d001      	beq.n	8006c9e <f_mount+0x6a>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e00a      	b.n	8006cb4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006c9e:	f107 010c 	add.w	r1, r7, #12
 8006ca2:	f107 0308 	add.w	r3, r7, #8
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff fd07 	bl	80066bc <find_volume>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3720      	adds	r7, #32
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	20000770 	.word	0x20000770

08006cc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b09a      	sub	sp, #104	@ 0x68
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <f_open+0x18>
 8006cd4:	2309      	movs	r3, #9
 8006cd6:	e1b7      	b.n	8007048 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cde:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006ce0:	79fa      	ldrb	r2, [r7, #7]
 8006ce2:	f107 0114 	add.w	r1, r7, #20
 8006ce6:	f107 0308 	add.w	r3, r7, #8
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff fce6 	bl	80066bc <find_volume>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8006cf6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f040 819b 	bne.w	8007036 <f_open+0x376>
		dj.obj.fs = fs;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	f107 0318 	add.w	r3, r7, #24
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fbc5 	bl	800649c <follow_path>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d118      	bne.n	8006d52 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d20:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006d24:	b25b      	sxtb	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	da03      	bge.n	8006d32 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d2a:	2306      	movs	r3, #6
 8006d2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006d30:	e00f      	b.n	8006d52 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	bf8c      	ite	hi
 8006d38:	2301      	movhi	r3, #1
 8006d3a:	2300      	movls	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f107 0318 	add.w	r3, r7, #24
 8006d44:	4611      	mov	r1, r2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fd ff3c 	bl	8004bc4 <chk_lock>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	f003 031c 	and.w	r3, r3, #28
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d07f      	beq.n	8006e5c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006d5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d017      	beq.n	8006d94 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006d64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d10e      	bne.n	8006d8a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006d6c:	f7fd ff86 	bl	8004c7c <enq_lock>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d006      	beq.n	8006d84 <f_open+0xc4>
 8006d76:	f107 0318 	add.w	r3, r7, #24
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff f8de 	bl	8005f3c <dir_register>
 8006d80:	4603      	mov	r3, r0
 8006d82:	e000      	b.n	8006d86 <f_open+0xc6>
 8006d84:	2312      	movs	r3, #18
 8006d86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006d8a:	79fb      	ldrb	r3, [r7, #7]
 8006d8c:	f043 0308 	orr.w	r3, r3, #8
 8006d90:	71fb      	strb	r3, [r7, #7]
 8006d92:	e010      	b.n	8006db6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006d94:	7fbb      	ldrb	r3, [r7, #30]
 8006d96:	f003 0311 	and.w	r3, r3, #17
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <f_open+0xe6>
					res = FR_DENIED;
 8006d9e:	2307      	movs	r3, #7
 8006da0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006da4:	e007      	b.n	8006db6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006da6:	79fb      	ldrb	r3, [r7, #7]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <f_open+0xf6>
 8006db0:	2308      	movs	r3, #8
 8006db2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006db6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d168      	bne.n	8006e90 <f_open+0x1d0>
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	f003 0308 	and.w	r3, r3, #8
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d063      	beq.n	8006e90 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006dc8:	f7fd f83a 	bl	8003e40 <get_fattime>
 8006dcc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd0:	330e      	adds	r3, #14
 8006dd2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7fd fe4b 	bl	8004a70 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ddc:	3316      	adds	r3, #22
 8006dde:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fd fe45 	bl	8004a70 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de8:	330b      	adds	r3, #11
 8006dea:	2220      	movs	r2, #32
 8006dec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006df2:	4611      	mov	r1, r2
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fe1a 	bl	8005a2e <ld_clust>
 8006dfa:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006e00:	2200      	movs	r2, #0
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fe fe32 	bl	8005a6c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0a:	331c      	adds	r3, #28
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fd fe2e 	bl	8004a70 <st_dword>
					fs->wflag = 1;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	2201      	movs	r2, #1
 8006e18:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d037      	beq.n	8006e90 <f_open+0x1d0>
						dw = fs->winsect;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e24:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006e26:	f107 0318 	add.w	r3, r7, #24
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fb22 	bl	8005478 <remove_chain>
 8006e34:	4603      	mov	r3, r0
 8006e36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8006e3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d126      	bne.n	8006e90 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fe f86c 	bl	8004f24 <move_window>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e56:	3a01      	subs	r2, #1
 8006e58:	615a      	str	r2, [r3, #20]
 8006e5a:	e019      	b.n	8006e90 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006e5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d115      	bne.n	8006e90 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006e64:	7fbb      	ldrb	r3, [r7, #30]
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <f_open+0x1b6>
					res = FR_NO_FILE;
 8006e6e:	2304      	movs	r3, #4
 8006e70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006e74:	e00c      	b.n	8006e90 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <f_open+0x1d0>
 8006e80:	7fbb      	ldrb	r3, [r7, #30]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <f_open+0x1d0>
						res = FR_DENIED;
 8006e8a:	2307      	movs	r3, #7
 8006e8c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006e90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d126      	bne.n	8006ee6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	f003 0308 	and.w	r3, r3, #8
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
 8006ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ea8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006eb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006eb8:	79fb      	ldrb	r3, [r7, #7]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	bf8c      	ite	hi
 8006ebe:	2301      	movhi	r3, #1
 8006ec0:	2300      	movls	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	f107 0318 	add.w	r3, r7, #24
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fd fef7 	bl	8004cc0 <inc_lock>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <f_open+0x226>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006ee6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f040 80a3 	bne.w	8007036 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe fd99 	bl	8005a2e <ld_clust>
 8006efc:	4602      	mov	r2, r0
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f04:	331c      	adds	r3, #28
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fd fd74 	bl	80049f4 <ld_dword>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	88da      	ldrh	r2, [r3, #6]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	79fa      	ldrb	r2, [r7, #7]
 8006f2a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3330      	adds	r3, #48	@ 0x30
 8006f42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006f46:	2100      	movs	r1, #0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fd fdde 	bl	8004b0a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006f4e:	79fb      	ldrb	r3, [r7, #7]
 8006f50:	f003 0320 	and.w	r3, r3, #32
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d06e      	beq.n	8007036 <f_open+0x376>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d06a      	beq.n	8007036 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	895b      	ldrh	r3, [r3, #10]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	899b      	ldrh	r3, [r3, #12]
 8006f72:	fb02 f303 	mul.w	r3, r2, r3
 8006f76:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f84:	e016      	b.n	8006fb4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe f887 	bl	800509e <get_fat>
 8006f90:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006f92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d802      	bhi.n	8006f9e <f_open+0x2de>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006f9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d102      	bne.n	8006fac <f_open+0x2ec>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <f_open+0x304>
 8006fbc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d8e0      	bhi.n	8006f86 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006fc8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006fca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d131      	bne.n	8007036 <f_open+0x376>
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	899b      	ldrh	r3, [r3, #12]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fda:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fde:	fb01 f202 	mul.w	r2, r1, r2
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d026      	beq.n	8007036 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe f837 	bl	8005060 <clust2sect>
 8006ff2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8006ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d103      	bne.n	8007002 <f_open+0x342>
						res = FR_INT_ERR;
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007000:	e019      	b.n	8007036 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	899b      	ldrh	r3, [r3, #12]
 8007006:	461a      	mov	r2, r3
 8007008:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800700a:	fbb3 f2f2 	udiv	r2, r3, r2
 800700e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007010:	441a      	add	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	7858      	ldrb	r0, [r3, #1]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a1a      	ldr	r2, [r3, #32]
 8007024:	2301      	movs	r3, #1
 8007026:	f7fd fc6f 	bl	8004908 <disk_read>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <f_open+0x376>
 8007030:	2301      	movs	r3, #1
 8007032:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007036:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <f_open+0x384>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007044:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007048:	4618      	mov	r0, r3
 800704a:	3768      	adds	r7, #104	@ 0x68
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b08e      	sub	sp, #56	@ 0x38
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f107 0214 	add.w	r2, r7, #20
 800706e:	4611      	mov	r1, r2
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff fda9 	bl	8006bc8 <validate>
 8007076:	4603      	mov	r3, r0
 8007078:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800707c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007080:	2b00      	cmp	r3, #0
 8007082:	d107      	bne.n	8007094 <f_read+0x44>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	7d5b      	ldrb	r3, [r3, #21]
 8007088:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800708c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <f_read+0x4a>
 8007094:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007098:	e135      	b.n	8007306 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	7d1b      	ldrb	r3, [r3, #20]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <f_read+0x5a>
 80070a6:	2307      	movs	r3, #7
 80070a8:	e12d      	b.n	8007306 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	f240 811e 	bls.w	80072fc <f_read+0x2ac>
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80070c4:	e11a      	b.n	80072fc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	8992      	ldrh	r2, [r2, #12]
 80070ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80070d2:	fb01 f202 	mul.w	r2, r1, r2
 80070d6:	1a9b      	subs	r3, r3, r2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f040 80d5 	bne.w	8007288 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	8992      	ldrh	r2, [r2, #12]
 80070e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	8952      	ldrh	r2, [r2, #10]
 80070ee:	3a01      	subs	r2, #1
 80070f0:	4013      	ands	r3, r2
 80070f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d12f      	bne.n	800715a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d103      	bne.n	800710a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	633b      	str	r3, [r7, #48]	@ 0x30
 8007108:	e013      	b.n	8007132 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d007      	beq.n	8007122 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	4619      	mov	r1, r3
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7fe faaa 	bl	8005672 <clmt_clust>
 800711e:	6338      	str	r0, [r7, #48]	@ 0x30
 8007120:	e007      	b.n	8007132 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	4619      	mov	r1, r3
 800712a:	4610      	mov	r0, r2
 800712c:	f7fd ffb7 	bl	800509e <get_fat>
 8007130:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	2b01      	cmp	r3, #1
 8007136:	d804      	bhi.n	8007142 <f_read+0xf2>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2202      	movs	r2, #2
 800713c:	755a      	strb	r2, [r3, #21]
 800713e:	2302      	movs	r3, #2
 8007140:	e0e1      	b.n	8007306 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d104      	bne.n	8007154 <f_read+0x104>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	755a      	strb	r2, [r3, #21]
 8007150:	2301      	movs	r3, #1
 8007152:	e0d8      	b.n	8007306 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007158:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f7fd ff7c 	bl	8005060 <clust2sect>
 8007168:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d104      	bne.n	800717a <f_read+0x12a>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2202      	movs	r2, #2
 8007174:	755a      	strb	r2, [r3, #21]
 8007176:	2302      	movs	r3, #2
 8007178:	e0c5      	b.n	8007306 <f_read+0x2b6>
			sect += csect;
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	4413      	add	r3, r2
 8007180:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	899b      	ldrh	r3, [r3, #12]
 8007186:	461a      	mov	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	fbb3 f3f2 	udiv	r3, r3, r2
 800718e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	d041      	beq.n	800721a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719a:	4413      	add	r3, r2
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	8952      	ldrh	r2, [r2, #10]
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d905      	bls.n	80071b0 <f_read+0x160>
					cc = fs->csize - csect;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	895b      	ldrh	r3, [r3, #10]
 80071a8:	461a      	mov	r2, r3
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	7858      	ldrb	r0, [r3, #1]
 80071b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071ba:	f7fd fba5 	bl	8004908 <disk_read>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <f_read+0x17e>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2201      	movs	r2, #1
 80071c8:	755a      	strb	r2, [r3, #21]
 80071ca:	2301      	movs	r3, #1
 80071cc:	e09b      	b.n	8007306 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	7d1b      	ldrb	r3, [r3, #20]
 80071d2:	b25b      	sxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	da18      	bge.n	800720a <f_read+0x1ba>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a1a      	ldr	r2, [r3, #32]
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d911      	bls.n	800720a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6a1a      	ldr	r2, [r3, #32]
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	8992      	ldrh	r2, [r2, #12]
 80071f2:	fb02 f303 	mul.w	r3, r2, r3
 80071f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f8:	18d0      	adds	r0, r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	899b      	ldrh	r3, [r3, #12]
 8007204:	461a      	mov	r2, r3
 8007206:	f7fd fc5f 	bl	8004ac8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	899b      	ldrh	r3, [r3, #12]
 800720e:	461a      	mov	r2, r3
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	fb02 f303 	mul.w	r3, r2, r3
 8007216:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8007218:	e05c      	b.n	80072d4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	429a      	cmp	r2, r3
 8007222:	d02e      	beq.n	8007282 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	7d1b      	ldrb	r3, [r3, #20]
 8007228:	b25b      	sxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	da18      	bge.n	8007260 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	7858      	ldrb	r0, [r3, #1]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a1a      	ldr	r2, [r3, #32]
 800723c:	2301      	movs	r3, #1
 800723e:	f7fd fb83 	bl	8004948 <disk_write>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <f_read+0x202>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2201      	movs	r2, #1
 800724c:	755a      	strb	r2, [r3, #21]
 800724e:	2301      	movs	r3, #1
 8007250:	e059      	b.n	8007306 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	7d1b      	ldrb	r3, [r3, #20]
 8007256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800725a:	b2da      	uxtb	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	7858      	ldrb	r0, [r3, #1]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800726a:	2301      	movs	r3, #1
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	f7fd fb4b 	bl	8004908 <disk_read>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d004      	beq.n	8007282 <f_read+0x232>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2201      	movs	r2, #1
 800727c:	755a      	strb	r2, [r3, #21]
 800727e:	2301      	movs	r3, #1
 8007280:	e041      	b.n	8007306 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	899b      	ldrh	r3, [r3, #12]
 800728c:	4618      	mov	r0, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	8992      	ldrh	r2, [r2, #12]
 8007296:	fbb3 f1f2 	udiv	r1, r3, r2
 800729a:	fb01 f202 	mul.w	r2, r1, r2
 800729e:	1a9b      	subs	r3, r3, r2
 80072a0:	1ac3      	subs	r3, r0, r3
 80072a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80072a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d901      	bls.n	80072b0 <f_read+0x260>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	8992      	ldrh	r2, [r2, #12]
 80072be:	fbb3 f0f2 	udiv	r0, r3, r2
 80072c2:	fb00 f202 	mul.w	r2, r0, r2
 80072c6:	1a9b      	subs	r3, r3, r2
 80072c8:	440b      	add	r3, r1
 80072ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072cc:	4619      	mov	r1, r3
 80072ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80072d0:	f7fd fbfa 	bl	8004ac8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80072d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d8:	4413      	add	r3, r2
 80072da:	627b      	str	r3, [r7, #36]	@ 0x24
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	699a      	ldr	r2, [r3, #24]
 80072e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e2:	441a      	add	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	619a      	str	r2, [r3, #24]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ee:	441a      	add	r2, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f47f aee1 	bne.w	80070c6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3738      	adds	r7, #56	@ 0x38
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b08c      	sub	sp, #48	@ 0x30
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
 800731a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f107 0210 	add.w	r2, r7, #16
 800732c:	4611      	mov	r1, r2
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff fc4a 	bl	8006bc8 <validate>
 8007334:	4603      	mov	r3, r0
 8007336:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800733a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800733e:	2b00      	cmp	r3, #0
 8007340:	d107      	bne.n	8007352 <f_write+0x44>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	7d5b      	ldrb	r3, [r3, #21]
 8007346:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800734a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <f_write+0x4a>
 8007352:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007356:	e16a      	b.n	800762e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	7d1b      	ldrb	r3, [r3, #20]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <f_write+0x5a>
 8007364:	2307      	movs	r3, #7
 8007366:	e162      	b.n	800762e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	441a      	add	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	429a      	cmp	r2, r3
 8007376:	f080 814c 	bcs.w	8007612 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	43db      	mvns	r3, r3
 8007380:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007382:	e146      	b.n	8007612 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	8992      	ldrh	r2, [r2, #12]
 800738c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007390:	fb01 f202 	mul.w	r2, r1, r2
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	2b00      	cmp	r3, #0
 8007398:	f040 80f1 	bne.w	800757e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	8992      	ldrh	r2, [r2, #12]
 80073a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	8952      	ldrh	r2, [r2, #10]
 80073ac:	3a01      	subs	r2, #1
 80073ae:	4013      	ands	r3, r2
 80073b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d143      	bne.n	8007440 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10c      	bne.n	80073da <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80073c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d11a      	bne.n	8007402 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2100      	movs	r1, #0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fe f8b6 	bl	8005542 <create_chain>
 80073d6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80073d8:	e013      	b.n	8007402 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d007      	beq.n	80073f2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	4619      	mov	r1, r3
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f7fe f942 	bl	8005672 <clmt_clust>
 80073ee:	62b8      	str	r0, [r7, #40]	@ 0x28
 80073f0:	e007      	b.n	8007402 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	4619      	mov	r1, r3
 80073fa:	4610      	mov	r0, r2
 80073fc:	f7fe f8a1 	bl	8005542 <create_chain>
 8007400:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8109 	beq.w	800761c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800740a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740c:	2b01      	cmp	r3, #1
 800740e:	d104      	bne.n	800741a <f_write+0x10c>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2202      	movs	r2, #2
 8007414:	755a      	strb	r2, [r3, #21]
 8007416:	2302      	movs	r3, #2
 8007418:	e109      	b.n	800762e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800741a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007420:	d104      	bne.n	800742c <f_write+0x11e>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2201      	movs	r2, #1
 8007426:	755a      	strb	r2, [r3, #21]
 8007428:	2301      	movs	r3, #1
 800742a:	e100      	b.n	800762e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007430:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <f_write+0x132>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800743e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	7d1b      	ldrb	r3, [r3, #20]
 8007444:	b25b      	sxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	da18      	bge.n	800747c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	7858      	ldrb	r0, [r3, #1]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a1a      	ldr	r2, [r3, #32]
 8007458:	2301      	movs	r3, #1
 800745a:	f7fd fa75 	bl	8004948 <disk_write>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d004      	beq.n	800746e <f_write+0x160>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	755a      	strb	r2, [r3, #21]
 800746a:	2301      	movs	r3, #1
 800746c:	e0df      	b.n	800762e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	7d1b      	ldrb	r3, [r3, #20]
 8007472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007476:	b2da      	uxtb	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	4619      	mov	r1, r3
 8007484:	4610      	mov	r0, r2
 8007486:	f7fd fdeb 	bl	8005060 <clust2sect>
 800748a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d104      	bne.n	800749c <f_write+0x18e>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2202      	movs	r2, #2
 8007496:	755a      	strb	r2, [r3, #21]
 8007498:	2302      	movs	r3, #2
 800749a:	e0c8      	b.n	800762e <f_write+0x320>
			sect += csect;
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	4413      	add	r3, r2
 80074a2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	899b      	ldrh	r3, [r3, #12]
 80074a8:	461a      	mov	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d043      	beq.n	8007540 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	4413      	add	r3, r2
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	8952      	ldrh	r2, [r2, #10]
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d905      	bls.n	80074d2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	895b      	ldrh	r3, [r3, #10]
 80074ca:	461a      	mov	r2, r3
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	7858      	ldrb	r0, [r3, #1]
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	69f9      	ldr	r1, [r7, #28]
 80074dc:	f7fd fa34 	bl	8004948 <disk_write>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d004      	beq.n	80074f0 <f_write+0x1e2>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2201      	movs	r2, #1
 80074ea:	755a      	strb	r2, [r3, #21]
 80074ec:	2301      	movs	r3, #1
 80074ee:	e09e      	b.n	800762e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6a1a      	ldr	r2, [r3, #32]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	6a3a      	ldr	r2, [r7, #32]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d918      	bls.n	8007530 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6a1a      	ldr	r2, [r3, #32]
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	8992      	ldrh	r2, [r2, #12]
 8007510:	fb02 f303 	mul.w	r3, r2, r3
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	18d1      	adds	r1, r2, r3
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	899b      	ldrh	r3, [r3, #12]
 800751c:	461a      	mov	r2, r3
 800751e:	f7fd fad3 	bl	8004ac8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	7d1b      	ldrb	r3, [r3, #20]
 8007526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800752a:	b2da      	uxtb	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	899b      	ldrh	r3, [r3, #12]
 8007534:	461a      	mov	r2, r3
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	fb02 f303 	mul.w	r3, r2, r3
 800753c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800753e:	e04b      	b.n	80075d8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	429a      	cmp	r2, r3
 8007548:	d016      	beq.n	8007578 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007552:	429a      	cmp	r2, r3
 8007554:	d210      	bcs.n	8007578 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	7858      	ldrb	r0, [r3, #1]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007560:	2301      	movs	r3, #1
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	f7fd f9d0 	bl	8004908 <disk_read>
 8007568:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2201      	movs	r2, #1
 8007572:	755a      	strb	r2, [r3, #21]
 8007574:	2301      	movs	r3, #1
 8007576:	e05a      	b.n	800762e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	899b      	ldrh	r3, [r3, #12]
 8007582:	4618      	mov	r0, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	8992      	ldrh	r2, [r2, #12]
 800758c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007590:	fb01 f202 	mul.w	r2, r1, r2
 8007594:	1a9b      	subs	r3, r3, r2
 8007596:	1ac3      	subs	r3, r0, r3
 8007598:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800759a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d901      	bls.n	80075a6 <f_write+0x298>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	8992      	ldrh	r2, [r2, #12]
 80075b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80075b8:	fb00 f202 	mul.w	r2, r0, r2
 80075bc:	1a9b      	subs	r3, r3, r2
 80075be:	440b      	add	r3, r1
 80075c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075c2:	69f9      	ldr	r1, [r7, #28]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fd fa7f 	bl	8004ac8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	7d1b      	ldrb	r3, [r3, #20]
 80075ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80075d8:	69fa      	ldr	r2, [r7, #28]
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	4413      	add	r3, r2
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	699a      	ldr	r2, [r3, #24]
 80075e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e6:	441a      	add	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	619a      	str	r2, [r3, #24]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	bf38      	it	cc
 80075f8:	461a      	movcc	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	60da      	str	r2, [r3, #12]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007604:	441a      	add	r2, r3
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	f47f aeb5 	bne.w	8007384 <f_write+0x76>
 800761a:	e000      	b.n	800761e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800761c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	7d1b      	ldrb	r3, [r3, #20]
 8007622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007626:	b2da      	uxtb	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3730      	adds	r7, #48	@ 0x30
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b086      	sub	sp, #24
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f107 0208 	add.w	r2, r7, #8
 8007644:	4611      	mov	r1, r2
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff fabe 	bl	8006bc8 <validate>
 800764c:	4603      	mov	r3, r0
 800764e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d168      	bne.n	8007728 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7d1b      	ldrb	r3, [r3, #20]
 800765a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800765e:	2b00      	cmp	r3, #0
 8007660:	d062      	beq.n	8007728 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7d1b      	ldrb	r3, [r3, #20]
 8007666:	b25b      	sxtb	r3, r3
 8007668:	2b00      	cmp	r3, #0
 800766a:	da15      	bge.n	8007698 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	7858      	ldrb	r0, [r3, #1]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1a      	ldr	r2, [r3, #32]
 800767a:	2301      	movs	r3, #1
 800767c:	f7fd f964 	bl	8004948 <disk_write>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <f_sync+0x54>
 8007686:	2301      	movs	r3, #1
 8007688:	e04f      	b.n	800772a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	7d1b      	ldrb	r3, [r3, #20]
 800768e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007692:	b2da      	uxtb	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007698:	f7fc fbd2 	bl	8003e40 <get_fattime>
 800769c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a4:	4619      	mov	r1, r3
 80076a6:	4610      	mov	r0, r2
 80076a8:	f7fd fc3c 	bl	8004f24 <move_window>
 80076ac:	4603      	mov	r3, r0
 80076ae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d138      	bne.n	8007728 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	330b      	adds	r3, #11
 80076c0:	781a      	ldrb	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	330b      	adds	r3, #11
 80076c6:	f042 0220 	orr.w	r2, r2, #32
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	461a      	mov	r2, r3
 80076d8:	68f9      	ldr	r1, [r7, #12]
 80076da:	f7fe f9c7 	bl	8005a6c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f103 021c 	add.w	r2, r3, #28
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	4619      	mov	r1, r3
 80076ea:	4610      	mov	r0, r2
 80076ec:	f7fd f9c0 	bl	8004a70 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3316      	adds	r3, #22
 80076f4:	6939      	ldr	r1, [r7, #16]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fd f9ba 	bl	8004a70 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3312      	adds	r3, #18
 8007700:	2100      	movs	r1, #0
 8007702:	4618      	mov	r0, r3
 8007704:	f7fd f999 	bl	8004a3a <st_word>
					fs->wflag = 1;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2201      	movs	r2, #1
 800770c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	4618      	mov	r0, r3
 8007712:	f7fd fc35 	bl	8004f80 <sync_fs>
 8007716:	4603      	mov	r3, r0
 8007718:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	7d1b      	ldrb	r3, [r3, #20]
 800771e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007722:	b2da      	uxtb	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007728:	7dfb      	ldrb	r3, [r7, #23]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff ff7b 	bl	8007636 <f_sync>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d118      	bne.n	800777c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f107 0208 	add.w	r2, r7, #8
 8007750:	4611      	mov	r1, r2
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff fa38 	bl	8006bc8 <validate>
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800775c:	7bfb      	ldrb	r3, [r7, #15]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10c      	bne.n	800777c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	4618      	mov	r0, r3
 8007768:	f7fd fb38 	bl	8004ddc <dec_lock>
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d102      	bne.n	800777c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800777c:	7bfb      	ldrb	r3, [r7, #15]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b090      	sub	sp, #64	@ 0x40
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f107 0208 	add.w	r2, r7, #8
 8007796:	4611      	mov	r1, r2
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff fa15 	bl	8006bc8 <validate>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80077a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d103      	bne.n	80077b4 <f_lseek+0x2e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	7d5b      	ldrb	r3, [r3, #21]
 80077b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80077b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <f_lseek+0x3c>
 80077bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80077c0:	e201      	b.n	8007bc6 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f000 80d9 	beq.w	800797e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d2:	d15a      	bne.n	800788a <f_lseek+0x104>
			tbl = fp->cltbl;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077dc:	1d1a      	adds	r2, r3, #4
 80077de:	627a      	str	r2, [r7, #36]	@ 0x24
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	2302      	movs	r3, #2
 80077e6:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80077ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d03a      	beq.n	800786a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80077f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f6:	613b      	str	r3, [r7, #16]
 80077f8:	2300      	movs	r3, #0
 80077fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fe:	3302      	adds	r3, #2
 8007800:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007808:	3301      	adds	r3, #1
 800780a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007810:	4618      	mov	r0, r3
 8007812:	f7fd fc44 	bl	800509e <get_fat>
 8007816:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	2b01      	cmp	r3, #1
 800781c:	d804      	bhi.n	8007828 <f_lseek+0xa2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2202      	movs	r2, #2
 8007822:	755a      	strb	r2, [r3, #21]
 8007824:	2302      	movs	r3, #2
 8007826:	e1ce      	b.n	8007bc6 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d104      	bne.n	800783a <f_lseek+0xb4>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	755a      	strb	r2, [r3, #21]
 8007836:	2301      	movs	r3, #1
 8007838:	e1c5      	b.n	8007bc6 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3301      	adds	r3, #1
 800783e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007840:	429a      	cmp	r2, r3
 8007842:	d0de      	beq.n	8007802 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	429a      	cmp	r2, r3
 800784a:	d809      	bhi.n	8007860 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800784c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	627a      	str	r2, [r7, #36]	@ 0x24
 8007852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007858:	1d1a      	adds	r2, r3, #4
 800785a:	627a      	str	r2, [r7, #36]	@ 0x24
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007866:	429a      	cmp	r2, r3
 8007868:	d3c4      	bcc.n	80077f4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007870:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	429a      	cmp	r2, r3
 8007878:	d803      	bhi.n	8007882 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	e19f      	b.n	8007bc2 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007882:	2311      	movs	r3, #17
 8007884:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007888:	e19b      	b.n	8007bc2 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d902      	bls.n	800789a <f_lseek+0x114>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 818d 	beq.w	8007bc2 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7fd fedf 	bl	8005672 <clmt_clust>
 80078b4:	4602      	mov	r2, r0
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	4619      	mov	r1, r3
 80078c2:	4610      	mov	r0, r2
 80078c4:	f7fd fbcc 	bl	8005060 <clust2sect>
 80078c8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <f_lseek+0x154>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	755a      	strb	r2, [r3, #21]
 80078d6:	2302      	movs	r3, #2
 80078d8:	e175      	b.n	8007bc6 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	3b01      	subs	r3, #1
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	8992      	ldrh	r2, [r2, #12]
 80078e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	8952      	ldrh	r2, [r2, #10]
 80078ea:	3a01      	subs	r2, #1
 80078ec:	4013      	ands	r3, r2
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	4413      	add	r3, r2
 80078f2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	8992      	ldrh	r2, [r2, #12]
 80078fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007900:	fb01 f202 	mul.w	r2, r1, r2
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 815b 	beq.w	8007bc2 <f_lseek+0x43c>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	429a      	cmp	r2, r3
 8007914:	f000 8155 	beq.w	8007bc2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	7d1b      	ldrb	r3, [r3, #20]
 800791c:	b25b      	sxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	da18      	bge.n	8007954 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	7858      	ldrb	r0, [r3, #1]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a1a      	ldr	r2, [r3, #32]
 8007930:	2301      	movs	r3, #1
 8007932:	f7fd f809 	bl	8004948 <disk_write>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d004      	beq.n	8007946 <f_lseek+0x1c0>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	755a      	strb	r2, [r3, #21]
 8007942:	2301      	movs	r3, #1
 8007944:	e13f      	b.n	8007bc6 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7d1b      	ldrb	r3, [r3, #20]
 800794a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800794e:	b2da      	uxtb	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	7858      	ldrb	r0, [r3, #1]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800795e:	2301      	movs	r3, #1
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	f7fc ffd1 	bl	8004908 <disk_read>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d004      	beq.n	8007976 <f_lseek+0x1f0>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	755a      	strb	r2, [r3, #21]
 8007972:	2301      	movs	r3, #1
 8007974:	e127      	b.n	8007bc6 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	621a      	str	r2, [r3, #32]
 800797c:	e121      	b.n	8007bc2 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	429a      	cmp	r2, r3
 8007986:	d908      	bls.n	800799a <f_lseek+0x214>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	7d1b      	ldrb	r3, [r3, #20]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079a8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 80b5 	beq.w	8007b1c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	895b      	ldrh	r3, [r3, #10]
 80079b6:	461a      	mov	r2, r3
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	899b      	ldrh	r3, [r3, #12]
 80079bc:	fb02 f303 	mul.w	r3, r2, r3
 80079c0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d01b      	beq.n	8007a00 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	1e5a      	subs	r2, r3, #1
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	1e59      	subs	r1, r3, #1
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80079dc:	429a      	cmp	r2, r3
 80079de:	d30f      	bcc.n	8007a00 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	1e5a      	subs	r2, r3, #1
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	425b      	negs	r3, r3
 80079e8:	401a      	ands	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079fe:	e022      	b.n	8007a46 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d119      	bne.n	8007a40 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2100      	movs	r1, #0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fd fd96 	bl	8005542 <create_chain>
 8007a16:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d104      	bne.n	8007a28 <f_lseek+0x2a2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2202      	movs	r2, #2
 8007a22:	755a      	strb	r2, [r3, #21]
 8007a24:	2302      	movs	r3, #2
 8007a26:	e0ce      	b.n	8007bc6 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2e:	d104      	bne.n	8007a3a <f_lseek+0x2b4>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	755a      	strb	r2, [r3, #21]
 8007a36:	2301      	movs	r3, #1
 8007a38:	e0c5      	b.n	8007bc6 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a3e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a44:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d067      	beq.n	8007b1c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007a4c:	e03a      	b.n	8007ac4 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	603b      	str	r3, [r7, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699a      	ldr	r2, [r3, #24]
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	441a      	add	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	7d1b      	ldrb	r3, [r3, #20]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fd fd65 	bl	8005542 <create_chain>
 8007a78:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d108      	bne.n	8007a92 <f_lseek+0x30c>
							ofs = 0; break;
 8007a80:	2300      	movs	r3, #0
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	e022      	b.n	8007acc <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fd fb07 	bl	800509e <get_fat>
 8007a90:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a98:	d104      	bne.n	8007aa4 <f_lseek+0x31e>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	755a      	strb	r2, [r3, #21]
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e090      	b.n	8007bc6 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d904      	bls.n	8007ab4 <f_lseek+0x32e>
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d304      	bcc.n	8007abe <f_lseek+0x338>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	755a      	strb	r2, [r3, #21]
 8007aba:	2302      	movs	r3, #2
 8007abc:	e083      	b.n	8007bc6 <f_lseek+0x440>
					fp->clust = clst;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ac2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d8c0      	bhi.n	8007a4e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	699a      	ldr	r2, [r3, #24]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	441a      	add	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	899b      	ldrh	r3, [r3, #12]
 8007adc:	461a      	mov	r2, r3
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ae4:	fb01 f202 	mul.w	r2, r1, r2
 8007ae8:	1a9b      	subs	r3, r3, r2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d016      	beq.n	8007b1c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fd fab4 	bl	8005060 <clust2sect>
 8007af8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d104      	bne.n	8007b0a <f_lseek+0x384>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	755a      	strb	r2, [r3, #21]
 8007b06:	2302      	movs	r3, #2
 8007b08:	e05d      	b.n	8007bc6 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	899b      	ldrh	r3, [r3, #12]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b18:	4413      	add	r3, r2
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	699a      	ldr	r2, [r3, #24]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d90a      	bls.n	8007b3e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	699a      	ldr	r2, [r3, #24]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7d1b      	ldrb	r3, [r3, #20]
 8007b34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b38:	b2da      	uxtb	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	68ba      	ldr	r2, [r7, #8]
 8007b44:	8992      	ldrh	r2, [r2, #12]
 8007b46:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b4a:	fb01 f202 	mul.w	r2, r1, r2
 8007b4e:	1a9b      	subs	r3, r3, r2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d036      	beq.n	8007bc2 <f_lseek+0x43c>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a1b      	ldr	r3, [r3, #32]
 8007b58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d031      	beq.n	8007bc2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	7d1b      	ldrb	r3, [r3, #20]
 8007b62:	b25b      	sxtb	r3, r3
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	da18      	bge.n	8007b9a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	7858      	ldrb	r0, [r3, #1]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1a      	ldr	r2, [r3, #32]
 8007b76:	2301      	movs	r3, #1
 8007b78:	f7fc fee6 	bl	8004948 <disk_write>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <f_lseek+0x406>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	755a      	strb	r2, [r3, #21]
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e01c      	b.n	8007bc6 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	7d1b      	ldrb	r3, [r3, #20]
 8007b90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	7858      	ldrb	r0, [r3, #1]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ba8:	f7fc feae 	bl	8004908 <disk_read>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d004      	beq.n	8007bbc <f_lseek+0x436>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	755a      	strb	r2, [r3, #21]
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e004      	b.n	8007bc6 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007bc0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007bc2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3740      	adds	r7, #64	@ 0x40
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b088      	sub	sp, #32
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007be2:	e01c      	b.n	8007c1e <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007be4:	f107 0310 	add.w	r3, r7, #16
 8007be8:	f107 0114 	add.w	r1, r7, #20
 8007bec:	2201      	movs	r2, #1
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff fa2e 	bl	8007050 <f_read>
		if (rc != 1) break;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d117      	bne.n	8007c2a <f_gets+0x5c>
		c = s[0];
 8007bfa:	7d3b      	ldrb	r3, [r7, #20]
 8007bfc:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	2b0d      	cmp	r3, #13
 8007c02:	d00b      	beq.n	8007c1c <f_gets+0x4e>
		*p++ = c;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	61ba      	str	r2, [r7, #24]
 8007c0a:	7dfa      	ldrb	r2, [r7, #23]
 8007c0c:	701a      	strb	r2, [r3, #0]
		n++;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	3301      	adds	r3, #1
 8007c12:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
 8007c16:	2b0a      	cmp	r3, #10
 8007c18:	d009      	beq.n	8007c2e <f_gets+0x60>
 8007c1a:	e000      	b.n	8007c1e <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007c1c:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	dbdd      	blt.n	8007be4 <f_gets+0x16>
 8007c28:	e002      	b.n	8007c30 <f_gets+0x62>
		if (rc != 1) break;
 8007c2a:	bf00      	nop
 8007c2c:	e000      	b.n	8007c30 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8007c2e:	bf00      	nop
	}
	*p = 0;
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <f_gets+0x72>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	e000      	b.n	8007c42 <f_gets+0x74>
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3720      	adds	r7, #32
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	2b0a      	cmp	r3, #10
 8007c5a:	d103      	bne.n	8007c64 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8007c5c:	210d      	movs	r1, #13
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff fff3 	bl	8007c4a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	db25      	blt.n	8007cbc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	60fa      	str	r2, [r7, #12]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	4413      	add	r3, r2
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b3c      	cmp	r3, #60	@ 0x3c
 8007c82:	dd12      	ble.n	8007caa <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f103 010c 	add.w	r1, r3, #12
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	f107 0308 	add.w	r3, r7, #8
 8007c94:	f7ff fb3b 	bl	800730e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d101      	bne.n	8007ca4 <putc_bfd+0x5a>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e001      	b.n	8007ca8 <putc_bfd+0x5e>
 8007ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ca8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	1c5a      	adds	r2, r3, #1
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	609a      	str	r2, [r3, #8]
 8007cba:	e000      	b.n	8007cbe <putc_bfd+0x74>
	if (i < 0) return;
 8007cbc:	bf00      	nop
}
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	db16      	blt.n	8007d02 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6818      	ldr	r0, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f103 010c 	add.w	r1, r3, #12
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f107 030c 	add.w	r3, r7, #12
 8007ce8:	f7ff fb11 	bl	800730e <f_write>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d107      	bne.n	8007d02 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d102      	bne.n	8007d02 <putc_flush+0x3e>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	e001      	b.n	8007d06 <putc_flush+0x42>
	return EOF;
 8007d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	605a      	str	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	609a      	str	r2, [r3, #8]
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b096      	sub	sp, #88	@ 0x58
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8007d42:	f107 030c 	add.w	r3, r7, #12
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff ffe0 	bl	8007d0e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007d4e:	e009      	b.n	8007d64 <f_puts+0x2c>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	607a      	str	r2, [r7, #4]
 8007d56:	781a      	ldrb	r2, [r3, #0]
 8007d58:	f107 030c 	add.w	r3, r7, #12
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff ff73 	bl	8007c4a <putc_bfd>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1f1      	bne.n	8007d50 <f_puts+0x18>
	return putc_flush(&pb);
 8007d6c:	f107 030c 	add.w	r3, r7, #12
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff ffa7 	bl	8007cc4 <putc_flush>
 8007d76:	4603      	mov	r3, r0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3758      	adds	r7, #88	@ 0x58
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007d96:	4b1f      	ldr	r3, [pc, #124]	@ (8007e14 <FATFS_LinkDriverEx+0x94>)
 8007d98:	7a5b      	ldrb	r3, [r3, #9]
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d131      	bne.n	8007e04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007da0:	4b1c      	ldr	r3, [pc, #112]	@ (8007e14 <FATFS_LinkDriverEx+0x94>)
 8007da2:	7a5b      	ldrb	r3, [r3, #9]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	461a      	mov	r2, r3
 8007da8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e14 <FATFS_LinkDriverEx+0x94>)
 8007daa:	2100      	movs	r1, #0
 8007dac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007dae:	4b19      	ldr	r3, [pc, #100]	@ (8007e14 <FATFS_LinkDriverEx+0x94>)
 8007db0:	7a5b      	ldrb	r3, [r3, #9]
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	4a17      	ldr	r2, [pc, #92]	@ (8007e14 <FATFS_LinkDriverEx+0x94>)
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007dbe:	4b15      	ldr	r3, [pc, #84]	@ (8007e14 <FATFS_LinkDriverEx+0x94>)
 8007dc0:	7a5b      	ldrb	r3, [r3, #9]
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	4b13      	ldr	r3, [pc, #76]	@ (8007e14 <FATFS_LinkDriverEx+0x94>)
 8007dc8:	4413      	add	r3, r2
 8007dca:	79fa      	ldrb	r2, [r7, #7]
 8007dcc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007dce:	4b11      	ldr	r3, [pc, #68]	@ (8007e14 <FATFS_LinkDriverEx+0x94>)
 8007dd0:	7a5b      	ldrb	r3, [r3, #9]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	b2d1      	uxtb	r1, r2
 8007dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8007e14 <FATFS_LinkDriverEx+0x94>)
 8007dda:	7251      	strb	r1, [r2, #9]
 8007ddc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007dde:	7dbb      	ldrb	r3, [r7, #22]
 8007de0:	3330      	adds	r3, #48	@ 0x30
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	3301      	adds	r3, #1
 8007dec:	223a      	movs	r2, #58	@ 0x3a
 8007dee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	3302      	adds	r3, #2
 8007df4:	222f      	movs	r2, #47	@ 0x2f
 8007df6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	3303      	adds	r3, #3
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007e00:	2300      	movs	r3, #0
 8007e02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20000998 	.word	0x20000998

08007e18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007e22:	2200      	movs	r2, #0
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7ff ffaa 	bl	8007d80 <FATFS_LinkDriverEx>
 8007e2c:	4603      	mov	r3, r0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
	...

08007e38 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	6039      	str	r1, [r7, #0]
 8007e42:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007e44:	88fb      	ldrh	r3, [r7, #6]
 8007e46:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e48:	d802      	bhi.n	8007e50 <ff_convert+0x18>
		c = chr;
 8007e4a:	88fb      	ldrh	r3, [r7, #6]
 8007e4c:	81fb      	strh	r3, [r7, #14]
 8007e4e:	e025      	b.n	8007e9c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	2bff      	cmp	r3, #255	@ 0xff
 8007e5a:	d805      	bhi.n	8007e68 <ff_convert+0x30>
 8007e5c:	88fb      	ldrh	r3, [r7, #6]
 8007e5e:	3b80      	subs	r3, #128	@ 0x80
 8007e60:	4a12      	ldr	r2, [pc, #72]	@ (8007eac <ff_convert+0x74>)
 8007e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e66:	e000      	b.n	8007e6a <ff_convert+0x32>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	81fb      	strh	r3, [r7, #14]
 8007e6c:	e016      	b.n	8007e9c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007e6e:	2300      	movs	r3, #0
 8007e70:	81fb      	strh	r3, [r7, #14]
 8007e72:	e009      	b.n	8007e88 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007e74:	89fb      	ldrh	r3, [r7, #14]
 8007e76:	4a0d      	ldr	r2, [pc, #52]	@ (8007eac <ff_convert+0x74>)
 8007e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e7c:	88fa      	ldrh	r2, [r7, #6]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d006      	beq.n	8007e90 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007e82:	89fb      	ldrh	r3, [r7, #14]
 8007e84:	3301      	adds	r3, #1
 8007e86:	81fb      	strh	r3, [r7, #14]
 8007e88:	89fb      	ldrh	r3, [r7, #14]
 8007e8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e8c:	d9f2      	bls.n	8007e74 <ff_convert+0x3c>
 8007e8e:	e000      	b.n	8007e92 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007e90:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007e92:	89fb      	ldrh	r3, [r7, #14]
 8007e94:	3380      	adds	r3, #128	@ 0x80
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007e9c:	89fb      	ldrh	r3, [r7, #14]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	08008c04 	.word	0x08008c04

08007eb0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007eba:	88fb      	ldrh	r3, [r7, #6]
 8007ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ec0:	d201      	bcs.n	8007ec6 <ff_wtoupper+0x16>
 8007ec2:	4b3e      	ldr	r3, [pc, #248]	@ (8007fbc <ff_wtoupper+0x10c>)
 8007ec4:	e000      	b.n	8007ec8 <ff_wtoupper+0x18>
 8007ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8007fc0 <ff_wtoupper+0x110>)
 8007ec8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	1c9a      	adds	r2, r3, #2
 8007ece:	617a      	str	r2, [r7, #20]
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007ed4:	8a7b      	ldrh	r3, [r7, #18]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d068      	beq.n	8007fac <ff_wtoupper+0xfc>
 8007eda:	88fa      	ldrh	r2, [r7, #6]
 8007edc:	8a7b      	ldrh	r3, [r7, #18]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d364      	bcc.n	8007fac <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	1c9a      	adds	r2, r3, #2
 8007ee6:	617a      	str	r2, [r7, #20]
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	823b      	strh	r3, [r7, #16]
 8007eec:	8a3b      	ldrh	r3, [r7, #16]
 8007eee:	0a1b      	lsrs	r3, r3, #8
 8007ef0:	81fb      	strh	r3, [r7, #14]
 8007ef2:	8a3b      	ldrh	r3, [r7, #16]
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007ef8:	88fa      	ldrh	r2, [r7, #6]
 8007efa:	8a79      	ldrh	r1, [r7, #18]
 8007efc:	8a3b      	ldrh	r3, [r7, #16]
 8007efe:	440b      	add	r3, r1
 8007f00:	429a      	cmp	r2, r3
 8007f02:	da49      	bge.n	8007f98 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007f04:	89fb      	ldrh	r3, [r7, #14]
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	d84f      	bhi.n	8007faa <ff_wtoupper+0xfa>
 8007f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f10 <ff_wtoupper+0x60>)
 8007f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f10:	08007f35 	.word	0x08007f35
 8007f14:	08007f47 	.word	0x08007f47
 8007f18:	08007f5d 	.word	0x08007f5d
 8007f1c:	08007f65 	.word	0x08007f65
 8007f20:	08007f6d 	.word	0x08007f6d
 8007f24:	08007f75 	.word	0x08007f75
 8007f28:	08007f7d 	.word	0x08007f7d
 8007f2c:	08007f85 	.word	0x08007f85
 8007f30:	08007f8d 	.word	0x08007f8d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007f34:	88fa      	ldrh	r2, [r7, #6]
 8007f36:	8a7b      	ldrh	r3, [r7, #18]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4413      	add	r3, r2
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	80fb      	strh	r3, [r7, #6]
 8007f44:	e027      	b.n	8007f96 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007f46:	88fa      	ldrh	r2, [r7, #6]
 8007f48:	8a7b      	ldrh	r3, [r7, #18]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	88fa      	ldrh	r2, [r7, #6]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	80fb      	strh	r3, [r7, #6]
 8007f5a:	e01c      	b.n	8007f96 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007f5c:	88fb      	ldrh	r3, [r7, #6]
 8007f5e:	3b10      	subs	r3, #16
 8007f60:	80fb      	strh	r3, [r7, #6]
 8007f62:	e018      	b.n	8007f96 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007f64:	88fb      	ldrh	r3, [r7, #6]
 8007f66:	3b20      	subs	r3, #32
 8007f68:	80fb      	strh	r3, [r7, #6]
 8007f6a:	e014      	b.n	8007f96 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	3b30      	subs	r3, #48	@ 0x30
 8007f70:	80fb      	strh	r3, [r7, #6]
 8007f72:	e010      	b.n	8007f96 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007f74:	88fb      	ldrh	r3, [r7, #6]
 8007f76:	3b1a      	subs	r3, #26
 8007f78:	80fb      	strh	r3, [r7, #6]
 8007f7a:	e00c      	b.n	8007f96 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007f7c:	88fb      	ldrh	r3, [r7, #6]
 8007f7e:	3308      	adds	r3, #8
 8007f80:	80fb      	strh	r3, [r7, #6]
 8007f82:	e008      	b.n	8007f96 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	3b50      	subs	r3, #80	@ 0x50
 8007f88:	80fb      	strh	r3, [r7, #6]
 8007f8a:	e004      	b.n	8007f96 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007f8c:	88fb      	ldrh	r3, [r7, #6]
 8007f8e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007f92:	80fb      	strh	r3, [r7, #6]
 8007f94:	bf00      	nop
			}
			break;
 8007f96:	e008      	b.n	8007faa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007f98:	89fb      	ldrh	r3, [r7, #14]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d195      	bne.n	8007eca <ff_wtoupper+0x1a>
 8007f9e:	8a3b      	ldrh	r3, [r7, #16]
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007fa8:	e78f      	b.n	8007eca <ff_wtoupper+0x1a>
			break;
 8007faa:	bf00      	nop
	}

	return chr;
 8007fac:	88fb      	ldrh	r3, [r7, #6]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	08008d04 	.word	0x08008d04
 8007fc0:	08008ef8 	.word	0x08008ef8

08007fc4 <siprintf>:
 8007fc4:	b40e      	push	{r1, r2, r3}
 8007fc6:	b500      	push	{lr}
 8007fc8:	b09c      	sub	sp, #112	@ 0x70
 8007fca:	ab1d      	add	r3, sp, #116	@ 0x74
 8007fcc:	9002      	str	r0, [sp, #8]
 8007fce:	9006      	str	r0, [sp, #24]
 8007fd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007fd4:	4809      	ldr	r0, [pc, #36]	@ (8007ffc <siprintf+0x38>)
 8007fd6:	9107      	str	r1, [sp, #28]
 8007fd8:	9104      	str	r1, [sp, #16]
 8007fda:	4909      	ldr	r1, [pc, #36]	@ (8008000 <siprintf+0x3c>)
 8007fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fe0:	9105      	str	r1, [sp, #20]
 8007fe2:	6800      	ldr	r0, [r0, #0]
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	a902      	add	r1, sp, #8
 8007fe8:	f000 f994 	bl	8008314 <_svfiprintf_r>
 8007fec:	9b02      	ldr	r3, [sp, #8]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	b01c      	add	sp, #112	@ 0x70
 8007ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ff8:	b003      	add	sp, #12
 8007ffa:	4770      	bx	lr
 8007ffc:	20000024 	.word	0x20000024
 8008000:	ffff0208 	.word	0xffff0208

08008004 <memset>:
 8008004:	4402      	add	r2, r0
 8008006:	4603      	mov	r3, r0
 8008008:	4293      	cmp	r3, r2
 800800a:	d100      	bne.n	800800e <memset+0xa>
 800800c:	4770      	bx	lr
 800800e:	f803 1b01 	strb.w	r1, [r3], #1
 8008012:	e7f9      	b.n	8008008 <memset+0x4>

08008014 <__errno>:
 8008014:	4b01      	ldr	r3, [pc, #4]	@ (800801c <__errno+0x8>)
 8008016:	6818      	ldr	r0, [r3, #0]
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	20000024 	.word	0x20000024

08008020 <__libc_init_array>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	4d0d      	ldr	r5, [pc, #52]	@ (8008058 <__libc_init_array+0x38>)
 8008024:	4c0d      	ldr	r4, [pc, #52]	@ (800805c <__libc_init_array+0x3c>)
 8008026:	1b64      	subs	r4, r4, r5
 8008028:	10a4      	asrs	r4, r4, #2
 800802a:	2600      	movs	r6, #0
 800802c:	42a6      	cmp	r6, r4
 800802e:	d109      	bne.n	8008044 <__libc_init_array+0x24>
 8008030:	4d0b      	ldr	r5, [pc, #44]	@ (8008060 <__libc_init_array+0x40>)
 8008032:	4c0c      	ldr	r4, [pc, #48]	@ (8008064 <__libc_init_array+0x44>)
 8008034:	f000 fc66 	bl	8008904 <_init>
 8008038:	1b64      	subs	r4, r4, r5
 800803a:	10a4      	asrs	r4, r4, #2
 800803c:	2600      	movs	r6, #0
 800803e:	42a6      	cmp	r6, r4
 8008040:	d105      	bne.n	800804e <__libc_init_array+0x2e>
 8008042:	bd70      	pop	{r4, r5, r6, pc}
 8008044:	f855 3b04 	ldr.w	r3, [r5], #4
 8008048:	4798      	blx	r3
 800804a:	3601      	adds	r6, #1
 800804c:	e7ee      	b.n	800802c <__libc_init_array+0xc>
 800804e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008052:	4798      	blx	r3
 8008054:	3601      	adds	r6, #1
 8008056:	e7f2      	b.n	800803e <__libc_init_array+0x1e>
 8008058:	08008ff0 	.word	0x08008ff0
 800805c:	08008ff0 	.word	0x08008ff0
 8008060:	08008ff0 	.word	0x08008ff0
 8008064:	08008ff4 	.word	0x08008ff4

08008068 <__retarget_lock_acquire_recursive>:
 8008068:	4770      	bx	lr

0800806a <__retarget_lock_release_recursive>:
 800806a:	4770      	bx	lr

0800806c <_free_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4605      	mov	r5, r0
 8008070:	2900      	cmp	r1, #0
 8008072:	d041      	beq.n	80080f8 <_free_r+0x8c>
 8008074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008078:	1f0c      	subs	r4, r1, #4
 800807a:	2b00      	cmp	r3, #0
 800807c:	bfb8      	it	lt
 800807e:	18e4      	addlt	r4, r4, r3
 8008080:	f000 f8e0 	bl	8008244 <__malloc_lock>
 8008084:	4a1d      	ldr	r2, [pc, #116]	@ (80080fc <_free_r+0x90>)
 8008086:	6813      	ldr	r3, [r2, #0]
 8008088:	b933      	cbnz	r3, 8008098 <_free_r+0x2c>
 800808a:	6063      	str	r3, [r4, #4]
 800808c:	6014      	str	r4, [r2, #0]
 800808e:	4628      	mov	r0, r5
 8008090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008094:	f000 b8dc 	b.w	8008250 <__malloc_unlock>
 8008098:	42a3      	cmp	r3, r4
 800809a:	d908      	bls.n	80080ae <_free_r+0x42>
 800809c:	6820      	ldr	r0, [r4, #0]
 800809e:	1821      	adds	r1, r4, r0
 80080a0:	428b      	cmp	r3, r1
 80080a2:	bf01      	itttt	eq
 80080a4:	6819      	ldreq	r1, [r3, #0]
 80080a6:	685b      	ldreq	r3, [r3, #4]
 80080a8:	1809      	addeq	r1, r1, r0
 80080aa:	6021      	streq	r1, [r4, #0]
 80080ac:	e7ed      	b.n	800808a <_free_r+0x1e>
 80080ae:	461a      	mov	r2, r3
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	b10b      	cbz	r3, 80080b8 <_free_r+0x4c>
 80080b4:	42a3      	cmp	r3, r4
 80080b6:	d9fa      	bls.n	80080ae <_free_r+0x42>
 80080b8:	6811      	ldr	r1, [r2, #0]
 80080ba:	1850      	adds	r0, r2, r1
 80080bc:	42a0      	cmp	r0, r4
 80080be:	d10b      	bne.n	80080d8 <_free_r+0x6c>
 80080c0:	6820      	ldr	r0, [r4, #0]
 80080c2:	4401      	add	r1, r0
 80080c4:	1850      	adds	r0, r2, r1
 80080c6:	4283      	cmp	r3, r0
 80080c8:	6011      	str	r1, [r2, #0]
 80080ca:	d1e0      	bne.n	800808e <_free_r+0x22>
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	6053      	str	r3, [r2, #4]
 80080d2:	4408      	add	r0, r1
 80080d4:	6010      	str	r0, [r2, #0]
 80080d6:	e7da      	b.n	800808e <_free_r+0x22>
 80080d8:	d902      	bls.n	80080e0 <_free_r+0x74>
 80080da:	230c      	movs	r3, #12
 80080dc:	602b      	str	r3, [r5, #0]
 80080de:	e7d6      	b.n	800808e <_free_r+0x22>
 80080e0:	6820      	ldr	r0, [r4, #0]
 80080e2:	1821      	adds	r1, r4, r0
 80080e4:	428b      	cmp	r3, r1
 80080e6:	bf04      	itt	eq
 80080e8:	6819      	ldreq	r1, [r3, #0]
 80080ea:	685b      	ldreq	r3, [r3, #4]
 80080ec:	6063      	str	r3, [r4, #4]
 80080ee:	bf04      	itt	eq
 80080f0:	1809      	addeq	r1, r1, r0
 80080f2:	6021      	streq	r1, [r4, #0]
 80080f4:	6054      	str	r4, [r2, #4]
 80080f6:	e7ca      	b.n	800808e <_free_r+0x22>
 80080f8:	bd38      	pop	{r3, r4, r5, pc}
 80080fa:	bf00      	nop
 80080fc:	20000ae8 	.word	0x20000ae8

08008100 <sbrk_aligned>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	4e0f      	ldr	r6, [pc, #60]	@ (8008140 <sbrk_aligned+0x40>)
 8008104:	460c      	mov	r4, r1
 8008106:	6831      	ldr	r1, [r6, #0]
 8008108:	4605      	mov	r5, r0
 800810a:	b911      	cbnz	r1, 8008112 <sbrk_aligned+0x12>
 800810c:	f000 fba6 	bl	800885c <_sbrk_r>
 8008110:	6030      	str	r0, [r6, #0]
 8008112:	4621      	mov	r1, r4
 8008114:	4628      	mov	r0, r5
 8008116:	f000 fba1 	bl	800885c <_sbrk_r>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	d103      	bne.n	8008126 <sbrk_aligned+0x26>
 800811e:	f04f 34ff 	mov.w	r4, #4294967295
 8008122:	4620      	mov	r0, r4
 8008124:	bd70      	pop	{r4, r5, r6, pc}
 8008126:	1cc4      	adds	r4, r0, #3
 8008128:	f024 0403 	bic.w	r4, r4, #3
 800812c:	42a0      	cmp	r0, r4
 800812e:	d0f8      	beq.n	8008122 <sbrk_aligned+0x22>
 8008130:	1a21      	subs	r1, r4, r0
 8008132:	4628      	mov	r0, r5
 8008134:	f000 fb92 	bl	800885c <_sbrk_r>
 8008138:	3001      	adds	r0, #1
 800813a:	d1f2      	bne.n	8008122 <sbrk_aligned+0x22>
 800813c:	e7ef      	b.n	800811e <sbrk_aligned+0x1e>
 800813e:	bf00      	nop
 8008140:	20000ae4 	.word	0x20000ae4

08008144 <_malloc_r>:
 8008144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008148:	1ccd      	adds	r5, r1, #3
 800814a:	f025 0503 	bic.w	r5, r5, #3
 800814e:	3508      	adds	r5, #8
 8008150:	2d0c      	cmp	r5, #12
 8008152:	bf38      	it	cc
 8008154:	250c      	movcc	r5, #12
 8008156:	2d00      	cmp	r5, #0
 8008158:	4606      	mov	r6, r0
 800815a:	db01      	blt.n	8008160 <_malloc_r+0x1c>
 800815c:	42a9      	cmp	r1, r5
 800815e:	d904      	bls.n	800816a <_malloc_r+0x26>
 8008160:	230c      	movs	r3, #12
 8008162:	6033      	str	r3, [r6, #0]
 8008164:	2000      	movs	r0, #0
 8008166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008240 <_malloc_r+0xfc>
 800816e:	f000 f869 	bl	8008244 <__malloc_lock>
 8008172:	f8d8 3000 	ldr.w	r3, [r8]
 8008176:	461c      	mov	r4, r3
 8008178:	bb44      	cbnz	r4, 80081cc <_malloc_r+0x88>
 800817a:	4629      	mov	r1, r5
 800817c:	4630      	mov	r0, r6
 800817e:	f7ff ffbf 	bl	8008100 <sbrk_aligned>
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	4604      	mov	r4, r0
 8008186:	d158      	bne.n	800823a <_malloc_r+0xf6>
 8008188:	f8d8 4000 	ldr.w	r4, [r8]
 800818c:	4627      	mov	r7, r4
 800818e:	2f00      	cmp	r7, #0
 8008190:	d143      	bne.n	800821a <_malloc_r+0xd6>
 8008192:	2c00      	cmp	r4, #0
 8008194:	d04b      	beq.n	800822e <_malloc_r+0xea>
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	4639      	mov	r1, r7
 800819a:	4630      	mov	r0, r6
 800819c:	eb04 0903 	add.w	r9, r4, r3
 80081a0:	f000 fb5c 	bl	800885c <_sbrk_r>
 80081a4:	4581      	cmp	r9, r0
 80081a6:	d142      	bne.n	800822e <_malloc_r+0xea>
 80081a8:	6821      	ldr	r1, [r4, #0]
 80081aa:	1a6d      	subs	r5, r5, r1
 80081ac:	4629      	mov	r1, r5
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7ff ffa6 	bl	8008100 <sbrk_aligned>
 80081b4:	3001      	adds	r0, #1
 80081b6:	d03a      	beq.n	800822e <_malloc_r+0xea>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	442b      	add	r3, r5
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	f8d8 3000 	ldr.w	r3, [r8]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	bb62      	cbnz	r2, 8008220 <_malloc_r+0xdc>
 80081c6:	f8c8 7000 	str.w	r7, [r8]
 80081ca:	e00f      	b.n	80081ec <_malloc_r+0xa8>
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	1b52      	subs	r2, r2, r5
 80081d0:	d420      	bmi.n	8008214 <_malloc_r+0xd0>
 80081d2:	2a0b      	cmp	r2, #11
 80081d4:	d917      	bls.n	8008206 <_malloc_r+0xc2>
 80081d6:	1961      	adds	r1, r4, r5
 80081d8:	42a3      	cmp	r3, r4
 80081da:	6025      	str	r5, [r4, #0]
 80081dc:	bf18      	it	ne
 80081de:	6059      	strne	r1, [r3, #4]
 80081e0:	6863      	ldr	r3, [r4, #4]
 80081e2:	bf08      	it	eq
 80081e4:	f8c8 1000 	streq.w	r1, [r8]
 80081e8:	5162      	str	r2, [r4, r5]
 80081ea:	604b      	str	r3, [r1, #4]
 80081ec:	4630      	mov	r0, r6
 80081ee:	f000 f82f 	bl	8008250 <__malloc_unlock>
 80081f2:	f104 000b 	add.w	r0, r4, #11
 80081f6:	1d23      	adds	r3, r4, #4
 80081f8:	f020 0007 	bic.w	r0, r0, #7
 80081fc:	1ac2      	subs	r2, r0, r3
 80081fe:	bf1c      	itt	ne
 8008200:	1a1b      	subne	r3, r3, r0
 8008202:	50a3      	strne	r3, [r4, r2]
 8008204:	e7af      	b.n	8008166 <_malloc_r+0x22>
 8008206:	6862      	ldr	r2, [r4, #4]
 8008208:	42a3      	cmp	r3, r4
 800820a:	bf0c      	ite	eq
 800820c:	f8c8 2000 	streq.w	r2, [r8]
 8008210:	605a      	strne	r2, [r3, #4]
 8008212:	e7eb      	b.n	80081ec <_malloc_r+0xa8>
 8008214:	4623      	mov	r3, r4
 8008216:	6864      	ldr	r4, [r4, #4]
 8008218:	e7ae      	b.n	8008178 <_malloc_r+0x34>
 800821a:	463c      	mov	r4, r7
 800821c:	687f      	ldr	r7, [r7, #4]
 800821e:	e7b6      	b.n	800818e <_malloc_r+0x4a>
 8008220:	461a      	mov	r2, r3
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	42a3      	cmp	r3, r4
 8008226:	d1fb      	bne.n	8008220 <_malloc_r+0xdc>
 8008228:	2300      	movs	r3, #0
 800822a:	6053      	str	r3, [r2, #4]
 800822c:	e7de      	b.n	80081ec <_malloc_r+0xa8>
 800822e:	230c      	movs	r3, #12
 8008230:	6033      	str	r3, [r6, #0]
 8008232:	4630      	mov	r0, r6
 8008234:	f000 f80c 	bl	8008250 <__malloc_unlock>
 8008238:	e794      	b.n	8008164 <_malloc_r+0x20>
 800823a:	6005      	str	r5, [r0, #0]
 800823c:	e7d6      	b.n	80081ec <_malloc_r+0xa8>
 800823e:	bf00      	nop
 8008240:	20000ae8 	.word	0x20000ae8

08008244 <__malloc_lock>:
 8008244:	4801      	ldr	r0, [pc, #4]	@ (800824c <__malloc_lock+0x8>)
 8008246:	f7ff bf0f 	b.w	8008068 <__retarget_lock_acquire_recursive>
 800824a:	bf00      	nop
 800824c:	20000ae0 	.word	0x20000ae0

08008250 <__malloc_unlock>:
 8008250:	4801      	ldr	r0, [pc, #4]	@ (8008258 <__malloc_unlock+0x8>)
 8008252:	f7ff bf0a 	b.w	800806a <__retarget_lock_release_recursive>
 8008256:	bf00      	nop
 8008258:	20000ae0 	.word	0x20000ae0

0800825c <__ssputs_r>:
 800825c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	688e      	ldr	r6, [r1, #8]
 8008262:	461f      	mov	r7, r3
 8008264:	42be      	cmp	r6, r7
 8008266:	680b      	ldr	r3, [r1, #0]
 8008268:	4682      	mov	sl, r0
 800826a:	460c      	mov	r4, r1
 800826c:	4690      	mov	r8, r2
 800826e:	d82d      	bhi.n	80082cc <__ssputs_r+0x70>
 8008270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008274:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008278:	d026      	beq.n	80082c8 <__ssputs_r+0x6c>
 800827a:	6965      	ldr	r5, [r4, #20]
 800827c:	6909      	ldr	r1, [r1, #16]
 800827e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008282:	eba3 0901 	sub.w	r9, r3, r1
 8008286:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800828a:	1c7b      	adds	r3, r7, #1
 800828c:	444b      	add	r3, r9
 800828e:	106d      	asrs	r5, r5, #1
 8008290:	429d      	cmp	r5, r3
 8008292:	bf38      	it	cc
 8008294:	461d      	movcc	r5, r3
 8008296:	0553      	lsls	r3, r2, #21
 8008298:	d527      	bpl.n	80082ea <__ssputs_r+0x8e>
 800829a:	4629      	mov	r1, r5
 800829c:	f7ff ff52 	bl	8008144 <_malloc_r>
 80082a0:	4606      	mov	r6, r0
 80082a2:	b360      	cbz	r0, 80082fe <__ssputs_r+0xa2>
 80082a4:	6921      	ldr	r1, [r4, #16]
 80082a6:	464a      	mov	r2, r9
 80082a8:	f000 fae8 	bl	800887c <memcpy>
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b6:	81a3      	strh	r3, [r4, #12]
 80082b8:	6126      	str	r6, [r4, #16]
 80082ba:	6165      	str	r5, [r4, #20]
 80082bc:	444e      	add	r6, r9
 80082be:	eba5 0509 	sub.w	r5, r5, r9
 80082c2:	6026      	str	r6, [r4, #0]
 80082c4:	60a5      	str	r5, [r4, #8]
 80082c6:	463e      	mov	r6, r7
 80082c8:	42be      	cmp	r6, r7
 80082ca:	d900      	bls.n	80082ce <__ssputs_r+0x72>
 80082cc:	463e      	mov	r6, r7
 80082ce:	6820      	ldr	r0, [r4, #0]
 80082d0:	4632      	mov	r2, r6
 80082d2:	4641      	mov	r1, r8
 80082d4:	f000 faa8 	bl	8008828 <memmove>
 80082d8:	68a3      	ldr	r3, [r4, #8]
 80082da:	1b9b      	subs	r3, r3, r6
 80082dc:	60a3      	str	r3, [r4, #8]
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	4433      	add	r3, r6
 80082e2:	6023      	str	r3, [r4, #0]
 80082e4:	2000      	movs	r0, #0
 80082e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ea:	462a      	mov	r2, r5
 80082ec:	f000 fad4 	bl	8008898 <_realloc_r>
 80082f0:	4606      	mov	r6, r0
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d1e0      	bne.n	80082b8 <__ssputs_r+0x5c>
 80082f6:	6921      	ldr	r1, [r4, #16]
 80082f8:	4650      	mov	r0, sl
 80082fa:	f7ff feb7 	bl	800806c <_free_r>
 80082fe:	230c      	movs	r3, #12
 8008300:	f8ca 3000 	str.w	r3, [sl]
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	f04f 30ff 	mov.w	r0, #4294967295
 8008310:	e7e9      	b.n	80082e6 <__ssputs_r+0x8a>
	...

08008314 <_svfiprintf_r>:
 8008314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008318:	4698      	mov	r8, r3
 800831a:	898b      	ldrh	r3, [r1, #12]
 800831c:	061b      	lsls	r3, r3, #24
 800831e:	b09d      	sub	sp, #116	@ 0x74
 8008320:	4607      	mov	r7, r0
 8008322:	460d      	mov	r5, r1
 8008324:	4614      	mov	r4, r2
 8008326:	d510      	bpl.n	800834a <_svfiprintf_r+0x36>
 8008328:	690b      	ldr	r3, [r1, #16]
 800832a:	b973      	cbnz	r3, 800834a <_svfiprintf_r+0x36>
 800832c:	2140      	movs	r1, #64	@ 0x40
 800832e:	f7ff ff09 	bl	8008144 <_malloc_r>
 8008332:	6028      	str	r0, [r5, #0]
 8008334:	6128      	str	r0, [r5, #16]
 8008336:	b930      	cbnz	r0, 8008346 <_svfiprintf_r+0x32>
 8008338:	230c      	movs	r3, #12
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	b01d      	add	sp, #116	@ 0x74
 8008342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008346:	2340      	movs	r3, #64	@ 0x40
 8008348:	616b      	str	r3, [r5, #20]
 800834a:	2300      	movs	r3, #0
 800834c:	9309      	str	r3, [sp, #36]	@ 0x24
 800834e:	2320      	movs	r3, #32
 8008350:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008354:	f8cd 800c 	str.w	r8, [sp, #12]
 8008358:	2330      	movs	r3, #48	@ 0x30
 800835a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084f8 <_svfiprintf_r+0x1e4>
 800835e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008362:	f04f 0901 	mov.w	r9, #1
 8008366:	4623      	mov	r3, r4
 8008368:	469a      	mov	sl, r3
 800836a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800836e:	b10a      	cbz	r2, 8008374 <_svfiprintf_r+0x60>
 8008370:	2a25      	cmp	r2, #37	@ 0x25
 8008372:	d1f9      	bne.n	8008368 <_svfiprintf_r+0x54>
 8008374:	ebba 0b04 	subs.w	fp, sl, r4
 8008378:	d00b      	beq.n	8008392 <_svfiprintf_r+0x7e>
 800837a:	465b      	mov	r3, fp
 800837c:	4622      	mov	r2, r4
 800837e:	4629      	mov	r1, r5
 8008380:	4638      	mov	r0, r7
 8008382:	f7ff ff6b 	bl	800825c <__ssputs_r>
 8008386:	3001      	adds	r0, #1
 8008388:	f000 80a7 	beq.w	80084da <_svfiprintf_r+0x1c6>
 800838c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800838e:	445a      	add	r2, fp
 8008390:	9209      	str	r2, [sp, #36]	@ 0x24
 8008392:	f89a 3000 	ldrb.w	r3, [sl]
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 809f 	beq.w	80084da <_svfiprintf_r+0x1c6>
 800839c:	2300      	movs	r3, #0
 800839e:	f04f 32ff 	mov.w	r2, #4294967295
 80083a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083a6:	f10a 0a01 	add.w	sl, sl, #1
 80083aa:	9304      	str	r3, [sp, #16]
 80083ac:	9307      	str	r3, [sp, #28]
 80083ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80083b4:	4654      	mov	r4, sl
 80083b6:	2205      	movs	r2, #5
 80083b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083bc:	484e      	ldr	r0, [pc, #312]	@ (80084f8 <_svfiprintf_r+0x1e4>)
 80083be:	f7f7 ff2f 	bl	8000220 <memchr>
 80083c2:	9a04      	ldr	r2, [sp, #16]
 80083c4:	b9d8      	cbnz	r0, 80083fe <_svfiprintf_r+0xea>
 80083c6:	06d0      	lsls	r0, r2, #27
 80083c8:	bf44      	itt	mi
 80083ca:	2320      	movmi	r3, #32
 80083cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083d0:	0711      	lsls	r1, r2, #28
 80083d2:	bf44      	itt	mi
 80083d4:	232b      	movmi	r3, #43	@ 0x2b
 80083d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083da:	f89a 3000 	ldrb.w	r3, [sl]
 80083de:	2b2a      	cmp	r3, #42	@ 0x2a
 80083e0:	d015      	beq.n	800840e <_svfiprintf_r+0xfa>
 80083e2:	9a07      	ldr	r2, [sp, #28]
 80083e4:	4654      	mov	r4, sl
 80083e6:	2000      	movs	r0, #0
 80083e8:	f04f 0c0a 	mov.w	ip, #10
 80083ec:	4621      	mov	r1, r4
 80083ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083f2:	3b30      	subs	r3, #48	@ 0x30
 80083f4:	2b09      	cmp	r3, #9
 80083f6:	d94b      	bls.n	8008490 <_svfiprintf_r+0x17c>
 80083f8:	b1b0      	cbz	r0, 8008428 <_svfiprintf_r+0x114>
 80083fa:	9207      	str	r2, [sp, #28]
 80083fc:	e014      	b.n	8008428 <_svfiprintf_r+0x114>
 80083fe:	eba0 0308 	sub.w	r3, r0, r8
 8008402:	fa09 f303 	lsl.w	r3, r9, r3
 8008406:	4313      	orrs	r3, r2
 8008408:	9304      	str	r3, [sp, #16]
 800840a:	46a2      	mov	sl, r4
 800840c:	e7d2      	b.n	80083b4 <_svfiprintf_r+0xa0>
 800840e:	9b03      	ldr	r3, [sp, #12]
 8008410:	1d19      	adds	r1, r3, #4
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	9103      	str	r1, [sp, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	bfbb      	ittet	lt
 800841a:	425b      	neglt	r3, r3
 800841c:	f042 0202 	orrlt.w	r2, r2, #2
 8008420:	9307      	strge	r3, [sp, #28]
 8008422:	9307      	strlt	r3, [sp, #28]
 8008424:	bfb8      	it	lt
 8008426:	9204      	strlt	r2, [sp, #16]
 8008428:	7823      	ldrb	r3, [r4, #0]
 800842a:	2b2e      	cmp	r3, #46	@ 0x2e
 800842c:	d10a      	bne.n	8008444 <_svfiprintf_r+0x130>
 800842e:	7863      	ldrb	r3, [r4, #1]
 8008430:	2b2a      	cmp	r3, #42	@ 0x2a
 8008432:	d132      	bne.n	800849a <_svfiprintf_r+0x186>
 8008434:	9b03      	ldr	r3, [sp, #12]
 8008436:	1d1a      	adds	r2, r3, #4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	9203      	str	r2, [sp, #12]
 800843c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008440:	3402      	adds	r4, #2
 8008442:	9305      	str	r3, [sp, #20]
 8008444:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008508 <_svfiprintf_r+0x1f4>
 8008448:	7821      	ldrb	r1, [r4, #0]
 800844a:	2203      	movs	r2, #3
 800844c:	4650      	mov	r0, sl
 800844e:	f7f7 fee7 	bl	8000220 <memchr>
 8008452:	b138      	cbz	r0, 8008464 <_svfiprintf_r+0x150>
 8008454:	9b04      	ldr	r3, [sp, #16]
 8008456:	eba0 000a 	sub.w	r0, r0, sl
 800845a:	2240      	movs	r2, #64	@ 0x40
 800845c:	4082      	lsls	r2, r0
 800845e:	4313      	orrs	r3, r2
 8008460:	3401      	adds	r4, #1
 8008462:	9304      	str	r3, [sp, #16]
 8008464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008468:	4824      	ldr	r0, [pc, #144]	@ (80084fc <_svfiprintf_r+0x1e8>)
 800846a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800846e:	2206      	movs	r2, #6
 8008470:	f7f7 fed6 	bl	8000220 <memchr>
 8008474:	2800      	cmp	r0, #0
 8008476:	d036      	beq.n	80084e6 <_svfiprintf_r+0x1d2>
 8008478:	4b21      	ldr	r3, [pc, #132]	@ (8008500 <_svfiprintf_r+0x1ec>)
 800847a:	bb1b      	cbnz	r3, 80084c4 <_svfiprintf_r+0x1b0>
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	3307      	adds	r3, #7
 8008480:	f023 0307 	bic.w	r3, r3, #7
 8008484:	3308      	adds	r3, #8
 8008486:	9303      	str	r3, [sp, #12]
 8008488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800848a:	4433      	add	r3, r6
 800848c:	9309      	str	r3, [sp, #36]	@ 0x24
 800848e:	e76a      	b.n	8008366 <_svfiprintf_r+0x52>
 8008490:	fb0c 3202 	mla	r2, ip, r2, r3
 8008494:	460c      	mov	r4, r1
 8008496:	2001      	movs	r0, #1
 8008498:	e7a8      	b.n	80083ec <_svfiprintf_r+0xd8>
 800849a:	2300      	movs	r3, #0
 800849c:	3401      	adds	r4, #1
 800849e:	9305      	str	r3, [sp, #20]
 80084a0:	4619      	mov	r1, r3
 80084a2:	f04f 0c0a 	mov.w	ip, #10
 80084a6:	4620      	mov	r0, r4
 80084a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ac:	3a30      	subs	r2, #48	@ 0x30
 80084ae:	2a09      	cmp	r2, #9
 80084b0:	d903      	bls.n	80084ba <_svfiprintf_r+0x1a6>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0c6      	beq.n	8008444 <_svfiprintf_r+0x130>
 80084b6:	9105      	str	r1, [sp, #20]
 80084b8:	e7c4      	b.n	8008444 <_svfiprintf_r+0x130>
 80084ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80084be:	4604      	mov	r4, r0
 80084c0:	2301      	movs	r3, #1
 80084c2:	e7f0      	b.n	80084a6 <_svfiprintf_r+0x192>
 80084c4:	ab03      	add	r3, sp, #12
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	462a      	mov	r2, r5
 80084ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008504 <_svfiprintf_r+0x1f0>)
 80084cc:	a904      	add	r1, sp, #16
 80084ce:	4638      	mov	r0, r7
 80084d0:	f3af 8000 	nop.w
 80084d4:	1c42      	adds	r2, r0, #1
 80084d6:	4606      	mov	r6, r0
 80084d8:	d1d6      	bne.n	8008488 <_svfiprintf_r+0x174>
 80084da:	89ab      	ldrh	r3, [r5, #12]
 80084dc:	065b      	lsls	r3, r3, #25
 80084de:	f53f af2d 	bmi.w	800833c <_svfiprintf_r+0x28>
 80084e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084e4:	e72c      	b.n	8008340 <_svfiprintf_r+0x2c>
 80084e6:	ab03      	add	r3, sp, #12
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	462a      	mov	r2, r5
 80084ec:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <_svfiprintf_r+0x1f0>)
 80084ee:	a904      	add	r1, sp, #16
 80084f0:	4638      	mov	r0, r7
 80084f2:	f000 f879 	bl	80085e8 <_printf_i>
 80084f6:	e7ed      	b.n	80084d4 <_svfiprintf_r+0x1c0>
 80084f8:	08008fb4 	.word	0x08008fb4
 80084fc:	08008fbe 	.word	0x08008fbe
 8008500:	00000000 	.word	0x00000000
 8008504:	0800825d 	.word	0x0800825d
 8008508:	08008fba 	.word	0x08008fba

0800850c <_printf_common>:
 800850c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008510:	4616      	mov	r6, r2
 8008512:	4698      	mov	r8, r3
 8008514:	688a      	ldr	r2, [r1, #8]
 8008516:	690b      	ldr	r3, [r1, #16]
 8008518:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800851c:	4293      	cmp	r3, r2
 800851e:	bfb8      	it	lt
 8008520:	4613      	movlt	r3, r2
 8008522:	6033      	str	r3, [r6, #0]
 8008524:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008528:	4607      	mov	r7, r0
 800852a:	460c      	mov	r4, r1
 800852c:	b10a      	cbz	r2, 8008532 <_printf_common+0x26>
 800852e:	3301      	adds	r3, #1
 8008530:	6033      	str	r3, [r6, #0]
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	0699      	lsls	r1, r3, #26
 8008536:	bf42      	ittt	mi
 8008538:	6833      	ldrmi	r3, [r6, #0]
 800853a:	3302      	addmi	r3, #2
 800853c:	6033      	strmi	r3, [r6, #0]
 800853e:	6825      	ldr	r5, [r4, #0]
 8008540:	f015 0506 	ands.w	r5, r5, #6
 8008544:	d106      	bne.n	8008554 <_printf_common+0x48>
 8008546:	f104 0a19 	add.w	sl, r4, #25
 800854a:	68e3      	ldr	r3, [r4, #12]
 800854c:	6832      	ldr	r2, [r6, #0]
 800854e:	1a9b      	subs	r3, r3, r2
 8008550:	42ab      	cmp	r3, r5
 8008552:	dc26      	bgt.n	80085a2 <_printf_common+0x96>
 8008554:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008558:	6822      	ldr	r2, [r4, #0]
 800855a:	3b00      	subs	r3, #0
 800855c:	bf18      	it	ne
 800855e:	2301      	movne	r3, #1
 8008560:	0692      	lsls	r2, r2, #26
 8008562:	d42b      	bmi.n	80085bc <_printf_common+0xb0>
 8008564:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008568:	4641      	mov	r1, r8
 800856a:	4638      	mov	r0, r7
 800856c:	47c8      	blx	r9
 800856e:	3001      	adds	r0, #1
 8008570:	d01e      	beq.n	80085b0 <_printf_common+0xa4>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	6922      	ldr	r2, [r4, #16]
 8008576:	f003 0306 	and.w	r3, r3, #6
 800857a:	2b04      	cmp	r3, #4
 800857c:	bf02      	ittt	eq
 800857e:	68e5      	ldreq	r5, [r4, #12]
 8008580:	6833      	ldreq	r3, [r6, #0]
 8008582:	1aed      	subeq	r5, r5, r3
 8008584:	68a3      	ldr	r3, [r4, #8]
 8008586:	bf0c      	ite	eq
 8008588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800858c:	2500      	movne	r5, #0
 800858e:	4293      	cmp	r3, r2
 8008590:	bfc4      	itt	gt
 8008592:	1a9b      	subgt	r3, r3, r2
 8008594:	18ed      	addgt	r5, r5, r3
 8008596:	2600      	movs	r6, #0
 8008598:	341a      	adds	r4, #26
 800859a:	42b5      	cmp	r5, r6
 800859c:	d11a      	bne.n	80085d4 <_printf_common+0xc8>
 800859e:	2000      	movs	r0, #0
 80085a0:	e008      	b.n	80085b4 <_printf_common+0xa8>
 80085a2:	2301      	movs	r3, #1
 80085a4:	4652      	mov	r2, sl
 80085a6:	4641      	mov	r1, r8
 80085a8:	4638      	mov	r0, r7
 80085aa:	47c8      	blx	r9
 80085ac:	3001      	adds	r0, #1
 80085ae:	d103      	bne.n	80085b8 <_printf_common+0xac>
 80085b0:	f04f 30ff 	mov.w	r0, #4294967295
 80085b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b8:	3501      	adds	r5, #1
 80085ba:	e7c6      	b.n	800854a <_printf_common+0x3e>
 80085bc:	18e1      	adds	r1, r4, r3
 80085be:	1c5a      	adds	r2, r3, #1
 80085c0:	2030      	movs	r0, #48	@ 0x30
 80085c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085c6:	4422      	add	r2, r4
 80085c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085d0:	3302      	adds	r3, #2
 80085d2:	e7c7      	b.n	8008564 <_printf_common+0x58>
 80085d4:	2301      	movs	r3, #1
 80085d6:	4622      	mov	r2, r4
 80085d8:	4641      	mov	r1, r8
 80085da:	4638      	mov	r0, r7
 80085dc:	47c8      	blx	r9
 80085de:	3001      	adds	r0, #1
 80085e0:	d0e6      	beq.n	80085b0 <_printf_common+0xa4>
 80085e2:	3601      	adds	r6, #1
 80085e4:	e7d9      	b.n	800859a <_printf_common+0x8e>
	...

080085e8 <_printf_i>:
 80085e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085ec:	7e0f      	ldrb	r7, [r1, #24]
 80085ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085f0:	2f78      	cmp	r7, #120	@ 0x78
 80085f2:	4691      	mov	r9, r2
 80085f4:	4680      	mov	r8, r0
 80085f6:	460c      	mov	r4, r1
 80085f8:	469a      	mov	sl, r3
 80085fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085fe:	d807      	bhi.n	8008610 <_printf_i+0x28>
 8008600:	2f62      	cmp	r7, #98	@ 0x62
 8008602:	d80a      	bhi.n	800861a <_printf_i+0x32>
 8008604:	2f00      	cmp	r7, #0
 8008606:	f000 80d2 	beq.w	80087ae <_printf_i+0x1c6>
 800860a:	2f58      	cmp	r7, #88	@ 0x58
 800860c:	f000 80b9 	beq.w	8008782 <_printf_i+0x19a>
 8008610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008614:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008618:	e03a      	b.n	8008690 <_printf_i+0xa8>
 800861a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800861e:	2b15      	cmp	r3, #21
 8008620:	d8f6      	bhi.n	8008610 <_printf_i+0x28>
 8008622:	a101      	add	r1, pc, #4	@ (adr r1, 8008628 <_printf_i+0x40>)
 8008624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008628:	08008681 	.word	0x08008681
 800862c:	08008695 	.word	0x08008695
 8008630:	08008611 	.word	0x08008611
 8008634:	08008611 	.word	0x08008611
 8008638:	08008611 	.word	0x08008611
 800863c:	08008611 	.word	0x08008611
 8008640:	08008695 	.word	0x08008695
 8008644:	08008611 	.word	0x08008611
 8008648:	08008611 	.word	0x08008611
 800864c:	08008611 	.word	0x08008611
 8008650:	08008611 	.word	0x08008611
 8008654:	08008795 	.word	0x08008795
 8008658:	080086bf 	.word	0x080086bf
 800865c:	0800874f 	.word	0x0800874f
 8008660:	08008611 	.word	0x08008611
 8008664:	08008611 	.word	0x08008611
 8008668:	080087b7 	.word	0x080087b7
 800866c:	08008611 	.word	0x08008611
 8008670:	080086bf 	.word	0x080086bf
 8008674:	08008611 	.word	0x08008611
 8008678:	08008611 	.word	0x08008611
 800867c:	08008757 	.word	0x08008757
 8008680:	6833      	ldr	r3, [r6, #0]
 8008682:	1d1a      	adds	r2, r3, #4
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6032      	str	r2, [r6, #0]
 8008688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800868c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008690:	2301      	movs	r3, #1
 8008692:	e09d      	b.n	80087d0 <_printf_i+0x1e8>
 8008694:	6833      	ldr	r3, [r6, #0]
 8008696:	6820      	ldr	r0, [r4, #0]
 8008698:	1d19      	adds	r1, r3, #4
 800869a:	6031      	str	r1, [r6, #0]
 800869c:	0606      	lsls	r6, r0, #24
 800869e:	d501      	bpl.n	80086a4 <_printf_i+0xbc>
 80086a0:	681d      	ldr	r5, [r3, #0]
 80086a2:	e003      	b.n	80086ac <_printf_i+0xc4>
 80086a4:	0645      	lsls	r5, r0, #25
 80086a6:	d5fb      	bpl.n	80086a0 <_printf_i+0xb8>
 80086a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086ac:	2d00      	cmp	r5, #0
 80086ae:	da03      	bge.n	80086b8 <_printf_i+0xd0>
 80086b0:	232d      	movs	r3, #45	@ 0x2d
 80086b2:	426d      	negs	r5, r5
 80086b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086b8:	4859      	ldr	r0, [pc, #356]	@ (8008820 <_printf_i+0x238>)
 80086ba:	230a      	movs	r3, #10
 80086bc:	e011      	b.n	80086e2 <_printf_i+0xfa>
 80086be:	6821      	ldr	r1, [r4, #0]
 80086c0:	6833      	ldr	r3, [r6, #0]
 80086c2:	0608      	lsls	r0, r1, #24
 80086c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80086c8:	d402      	bmi.n	80086d0 <_printf_i+0xe8>
 80086ca:	0649      	lsls	r1, r1, #25
 80086cc:	bf48      	it	mi
 80086ce:	b2ad      	uxthmi	r5, r5
 80086d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80086d2:	4853      	ldr	r0, [pc, #332]	@ (8008820 <_printf_i+0x238>)
 80086d4:	6033      	str	r3, [r6, #0]
 80086d6:	bf14      	ite	ne
 80086d8:	230a      	movne	r3, #10
 80086da:	2308      	moveq	r3, #8
 80086dc:	2100      	movs	r1, #0
 80086de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086e2:	6866      	ldr	r6, [r4, #4]
 80086e4:	60a6      	str	r6, [r4, #8]
 80086e6:	2e00      	cmp	r6, #0
 80086e8:	bfa2      	ittt	ge
 80086ea:	6821      	ldrge	r1, [r4, #0]
 80086ec:	f021 0104 	bicge.w	r1, r1, #4
 80086f0:	6021      	strge	r1, [r4, #0]
 80086f2:	b90d      	cbnz	r5, 80086f8 <_printf_i+0x110>
 80086f4:	2e00      	cmp	r6, #0
 80086f6:	d04b      	beq.n	8008790 <_printf_i+0x1a8>
 80086f8:	4616      	mov	r6, r2
 80086fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80086fe:	fb03 5711 	mls	r7, r3, r1, r5
 8008702:	5dc7      	ldrb	r7, [r0, r7]
 8008704:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008708:	462f      	mov	r7, r5
 800870a:	42bb      	cmp	r3, r7
 800870c:	460d      	mov	r5, r1
 800870e:	d9f4      	bls.n	80086fa <_printf_i+0x112>
 8008710:	2b08      	cmp	r3, #8
 8008712:	d10b      	bne.n	800872c <_printf_i+0x144>
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	07df      	lsls	r7, r3, #31
 8008718:	d508      	bpl.n	800872c <_printf_i+0x144>
 800871a:	6923      	ldr	r3, [r4, #16]
 800871c:	6861      	ldr	r1, [r4, #4]
 800871e:	4299      	cmp	r1, r3
 8008720:	bfde      	ittt	le
 8008722:	2330      	movle	r3, #48	@ 0x30
 8008724:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008728:	f106 36ff 	addle.w	r6, r6, #4294967295
 800872c:	1b92      	subs	r2, r2, r6
 800872e:	6122      	str	r2, [r4, #16]
 8008730:	f8cd a000 	str.w	sl, [sp]
 8008734:	464b      	mov	r3, r9
 8008736:	aa03      	add	r2, sp, #12
 8008738:	4621      	mov	r1, r4
 800873a:	4640      	mov	r0, r8
 800873c:	f7ff fee6 	bl	800850c <_printf_common>
 8008740:	3001      	adds	r0, #1
 8008742:	d14a      	bne.n	80087da <_printf_i+0x1f2>
 8008744:	f04f 30ff 	mov.w	r0, #4294967295
 8008748:	b004      	add	sp, #16
 800874a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	f043 0320 	orr.w	r3, r3, #32
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	4833      	ldr	r0, [pc, #204]	@ (8008824 <_printf_i+0x23c>)
 8008758:	2778      	movs	r7, #120	@ 0x78
 800875a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	6831      	ldr	r1, [r6, #0]
 8008762:	061f      	lsls	r7, r3, #24
 8008764:	f851 5b04 	ldr.w	r5, [r1], #4
 8008768:	d402      	bmi.n	8008770 <_printf_i+0x188>
 800876a:	065f      	lsls	r7, r3, #25
 800876c:	bf48      	it	mi
 800876e:	b2ad      	uxthmi	r5, r5
 8008770:	6031      	str	r1, [r6, #0]
 8008772:	07d9      	lsls	r1, r3, #31
 8008774:	bf44      	itt	mi
 8008776:	f043 0320 	orrmi.w	r3, r3, #32
 800877a:	6023      	strmi	r3, [r4, #0]
 800877c:	b11d      	cbz	r5, 8008786 <_printf_i+0x19e>
 800877e:	2310      	movs	r3, #16
 8008780:	e7ac      	b.n	80086dc <_printf_i+0xf4>
 8008782:	4827      	ldr	r0, [pc, #156]	@ (8008820 <_printf_i+0x238>)
 8008784:	e7e9      	b.n	800875a <_printf_i+0x172>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	f023 0320 	bic.w	r3, r3, #32
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	e7f6      	b.n	800877e <_printf_i+0x196>
 8008790:	4616      	mov	r6, r2
 8008792:	e7bd      	b.n	8008710 <_printf_i+0x128>
 8008794:	6833      	ldr	r3, [r6, #0]
 8008796:	6825      	ldr	r5, [r4, #0]
 8008798:	6961      	ldr	r1, [r4, #20]
 800879a:	1d18      	adds	r0, r3, #4
 800879c:	6030      	str	r0, [r6, #0]
 800879e:	062e      	lsls	r6, r5, #24
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	d501      	bpl.n	80087a8 <_printf_i+0x1c0>
 80087a4:	6019      	str	r1, [r3, #0]
 80087a6:	e002      	b.n	80087ae <_printf_i+0x1c6>
 80087a8:	0668      	lsls	r0, r5, #25
 80087aa:	d5fb      	bpl.n	80087a4 <_printf_i+0x1bc>
 80087ac:	8019      	strh	r1, [r3, #0]
 80087ae:	2300      	movs	r3, #0
 80087b0:	6123      	str	r3, [r4, #16]
 80087b2:	4616      	mov	r6, r2
 80087b4:	e7bc      	b.n	8008730 <_printf_i+0x148>
 80087b6:	6833      	ldr	r3, [r6, #0]
 80087b8:	1d1a      	adds	r2, r3, #4
 80087ba:	6032      	str	r2, [r6, #0]
 80087bc:	681e      	ldr	r6, [r3, #0]
 80087be:	6862      	ldr	r2, [r4, #4]
 80087c0:	2100      	movs	r1, #0
 80087c2:	4630      	mov	r0, r6
 80087c4:	f7f7 fd2c 	bl	8000220 <memchr>
 80087c8:	b108      	cbz	r0, 80087ce <_printf_i+0x1e6>
 80087ca:	1b80      	subs	r0, r0, r6
 80087cc:	6060      	str	r0, [r4, #4]
 80087ce:	6863      	ldr	r3, [r4, #4]
 80087d0:	6123      	str	r3, [r4, #16]
 80087d2:	2300      	movs	r3, #0
 80087d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087d8:	e7aa      	b.n	8008730 <_printf_i+0x148>
 80087da:	6923      	ldr	r3, [r4, #16]
 80087dc:	4632      	mov	r2, r6
 80087de:	4649      	mov	r1, r9
 80087e0:	4640      	mov	r0, r8
 80087e2:	47d0      	blx	sl
 80087e4:	3001      	adds	r0, #1
 80087e6:	d0ad      	beq.n	8008744 <_printf_i+0x15c>
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	079b      	lsls	r3, r3, #30
 80087ec:	d413      	bmi.n	8008816 <_printf_i+0x22e>
 80087ee:	68e0      	ldr	r0, [r4, #12]
 80087f0:	9b03      	ldr	r3, [sp, #12]
 80087f2:	4298      	cmp	r0, r3
 80087f4:	bfb8      	it	lt
 80087f6:	4618      	movlt	r0, r3
 80087f8:	e7a6      	b.n	8008748 <_printf_i+0x160>
 80087fa:	2301      	movs	r3, #1
 80087fc:	4632      	mov	r2, r6
 80087fe:	4649      	mov	r1, r9
 8008800:	4640      	mov	r0, r8
 8008802:	47d0      	blx	sl
 8008804:	3001      	adds	r0, #1
 8008806:	d09d      	beq.n	8008744 <_printf_i+0x15c>
 8008808:	3501      	adds	r5, #1
 800880a:	68e3      	ldr	r3, [r4, #12]
 800880c:	9903      	ldr	r1, [sp, #12]
 800880e:	1a5b      	subs	r3, r3, r1
 8008810:	42ab      	cmp	r3, r5
 8008812:	dcf2      	bgt.n	80087fa <_printf_i+0x212>
 8008814:	e7eb      	b.n	80087ee <_printf_i+0x206>
 8008816:	2500      	movs	r5, #0
 8008818:	f104 0619 	add.w	r6, r4, #25
 800881c:	e7f5      	b.n	800880a <_printf_i+0x222>
 800881e:	bf00      	nop
 8008820:	08008fc5 	.word	0x08008fc5
 8008824:	08008fd6 	.word	0x08008fd6

08008828 <memmove>:
 8008828:	4288      	cmp	r0, r1
 800882a:	b510      	push	{r4, lr}
 800882c:	eb01 0402 	add.w	r4, r1, r2
 8008830:	d902      	bls.n	8008838 <memmove+0x10>
 8008832:	4284      	cmp	r4, r0
 8008834:	4623      	mov	r3, r4
 8008836:	d807      	bhi.n	8008848 <memmove+0x20>
 8008838:	1e43      	subs	r3, r0, #1
 800883a:	42a1      	cmp	r1, r4
 800883c:	d008      	beq.n	8008850 <memmove+0x28>
 800883e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008842:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008846:	e7f8      	b.n	800883a <memmove+0x12>
 8008848:	4402      	add	r2, r0
 800884a:	4601      	mov	r1, r0
 800884c:	428a      	cmp	r2, r1
 800884e:	d100      	bne.n	8008852 <memmove+0x2a>
 8008850:	bd10      	pop	{r4, pc}
 8008852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008856:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800885a:	e7f7      	b.n	800884c <memmove+0x24>

0800885c <_sbrk_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	4d06      	ldr	r5, [pc, #24]	@ (8008878 <_sbrk_r+0x1c>)
 8008860:	2300      	movs	r3, #0
 8008862:	4604      	mov	r4, r0
 8008864:	4608      	mov	r0, r1
 8008866:	602b      	str	r3, [r5, #0]
 8008868:	f7f8 fc38 	bl	80010dc <_sbrk>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d102      	bne.n	8008876 <_sbrk_r+0x1a>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	b103      	cbz	r3, 8008876 <_sbrk_r+0x1a>
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	20000adc 	.word	0x20000adc

0800887c <memcpy>:
 800887c:	440a      	add	r2, r1
 800887e:	4291      	cmp	r1, r2
 8008880:	f100 33ff 	add.w	r3, r0, #4294967295
 8008884:	d100      	bne.n	8008888 <memcpy+0xc>
 8008886:	4770      	bx	lr
 8008888:	b510      	push	{r4, lr}
 800888a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800888e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008892:	4291      	cmp	r1, r2
 8008894:	d1f9      	bne.n	800888a <memcpy+0xe>
 8008896:	bd10      	pop	{r4, pc}

08008898 <_realloc_r>:
 8008898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800889c:	4680      	mov	r8, r0
 800889e:	4615      	mov	r5, r2
 80088a0:	460c      	mov	r4, r1
 80088a2:	b921      	cbnz	r1, 80088ae <_realloc_r+0x16>
 80088a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088a8:	4611      	mov	r1, r2
 80088aa:	f7ff bc4b 	b.w	8008144 <_malloc_r>
 80088ae:	b92a      	cbnz	r2, 80088bc <_realloc_r+0x24>
 80088b0:	f7ff fbdc 	bl	800806c <_free_r>
 80088b4:	2400      	movs	r4, #0
 80088b6:	4620      	mov	r0, r4
 80088b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088bc:	f000 f81a 	bl	80088f4 <_malloc_usable_size_r>
 80088c0:	4285      	cmp	r5, r0
 80088c2:	4606      	mov	r6, r0
 80088c4:	d802      	bhi.n	80088cc <_realloc_r+0x34>
 80088c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80088ca:	d8f4      	bhi.n	80088b6 <_realloc_r+0x1e>
 80088cc:	4629      	mov	r1, r5
 80088ce:	4640      	mov	r0, r8
 80088d0:	f7ff fc38 	bl	8008144 <_malloc_r>
 80088d4:	4607      	mov	r7, r0
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d0ec      	beq.n	80088b4 <_realloc_r+0x1c>
 80088da:	42b5      	cmp	r5, r6
 80088dc:	462a      	mov	r2, r5
 80088de:	4621      	mov	r1, r4
 80088e0:	bf28      	it	cs
 80088e2:	4632      	movcs	r2, r6
 80088e4:	f7ff ffca 	bl	800887c <memcpy>
 80088e8:	4621      	mov	r1, r4
 80088ea:	4640      	mov	r0, r8
 80088ec:	f7ff fbbe 	bl	800806c <_free_r>
 80088f0:	463c      	mov	r4, r7
 80088f2:	e7e0      	b.n	80088b6 <_realloc_r+0x1e>

080088f4 <_malloc_usable_size_r>:
 80088f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088f8:	1f18      	subs	r0, r3, #4
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	bfbc      	itt	lt
 80088fe:	580b      	ldrlt	r3, [r1, r0]
 8008900:	18c0      	addlt	r0, r0, r3
 8008902:	4770      	bx	lr

08008904 <_init>:
 8008904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008906:	bf00      	nop
 8008908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800890a:	bc08      	pop	{r3}
 800890c:	469e      	mov	lr, r3
 800890e:	4770      	bx	lr

08008910 <_fini>:
 8008910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008912:	bf00      	nop
 8008914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008916:	bc08      	pop	{r3}
 8008918:	469e      	mov	lr, r3
 800891a:	4770      	bx	lr
